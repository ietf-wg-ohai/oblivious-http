{
  "magic": "E!vIA5L86J2I",
  "timestamp": "2023-05-02T00:30:31.366479+00:00",
  "repo": "ietf-wg-ohai/oblivious-http",
  "labels": [
    {
      "name": "bug",
      "description": "Something isn't working",
      "color": "d73a4a"
    },
    {
      "name": "documentation",
      "description": "Improvements or additions to documentation",
      "color": "0075ca"
    },
    {
      "name": "duplicate",
      "description": "This issue or pull request already exists",
      "color": "cfd3d7"
    },
    {
      "name": "enhancement",
      "description": "New feature or request",
      "color": "a2eeef"
    },
    {
      "name": "good first issue",
      "description": "Good for newcomers",
      "color": "7057ff"
    },
    {
      "name": "help wanted",
      "description": "Extra attention is needed",
      "color": "008672"
    },
    {
      "name": "invalid",
      "description": "This doesn't seem right",
      "color": "e4e669"
    },
    {
      "name": "question",
      "description": "Further information is requested",
      "color": "d876e3"
    },
    {
      "name": "wontfix",
      "description": "This will not be worked on",
      "color": "ffffff"
    },
    {
      "name": "discuss",
      "description": "",
      "color": "3215B2"
    },
    {
      "name": "comment",
      "description": "",
      "color": "47FC47"
    },
    {
      "name": "nit",
      "description": "",
      "color": "D5F646"
    },
    {
      "name": "review",
      "description": null,
      "color": "b6d7a8"
    }
  ],
  "issues": [
    {
      "number": 2,
      "id": "MDU6SXNzdWU3ODY1NDIwMjQ=",
      "title": "Informational status codes",
      "url": "https://github.com/ietf-wg-ohai/oblivious-http/issues/2",
      "state": "CLOSED",
      "author": "martinthomson",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "We aren't really able to carry informational status codes using this form of encapsulation.\r\n\r\nSure, we could encode an informational status as a new message, but we don't have anywhere to include it, except as the content of a response, along with the final status code.  That might not be helpful if you consider things like 100-continue.\r\n\r\nMy recommendation is to make this limitation clear and prohibit the use of 100-continue.\r\n",
      "createdAt": "2021-01-15T05:13:15Z",
      "updatedAt": "2021-01-22T02:35:34Z",
      "closedAt": "2021-01-22T02:35:34Z",
      "comments": []
    },
    {
      "number": 4,
      "id": "MDU6SXNzdWU3ODY1OTg2NDU=",
      "title": "Padding",
      "url": "https://github.com/ietf-wg-ohai/oblivious-http/issues/4",
      "state": "CLOSED",
      "author": "martinthomson",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "The format I've sketched out for binary messages can be padded with zeros without needing a separate padding field.  That's probably a feature worth mentioning in both drafts.",
      "createdAt": "2021-01-15T06:27:26Z",
      "updatedAt": "2021-01-27T05:05:35Z",
      "closedAt": "2021-01-27T05:05:35Z",
      "comments": [
        {
          "author": "martinthomson",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Padding is in the binary HTTP draft now.",
          "createdAt": "2021-01-27T05:05:35Z",
          "updatedAt": "2021-01-27T05:05:35Z"
        }
      ]
    },
    {
      "number": 5,
      "id": "MDU6SXNzdWU3ODY2MTA2MjQ=",
      "title": "y u no proxy?",
      "url": "https://github.com/ietf-wg-ohai/oblivious-http/issues/5",
      "state": "CLOSED",
      "author": "martinthomson",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "We need to explain the advantages of this over making a new connection via a proxy for every request.  That is largely performance-related: TLS costs a lot more than this does, both in terms of round trips (1 extra), in terms of bytes exchanged (waaay more), and in terms of CPU cycles spent doing crypto (2x at least).",
      "createdAt": "2021-01-15T06:36:13Z",
      "updatedAt": "2021-01-18T21:43:07Z",
      "closedAt": "2021-01-18T21:43:07Z",
      "comments": []
    },
    {
      "number": 6,
      "id": "MDU6SXNzdWU3ODY2MjE2NDM=",
      "title": "What trust does each entity place in other entities?",
      "url": "https://github.com/ietf-wg-ohai/oblivious-http/issues/6",
      "state": "CLOSED",
      "author": "martinthomson",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "This also needs to talk about how different entities might authenticate others that are involved in order to back that trust with something more concrete.\r\n\r\nSpamming/DoS: request resources trust proxy resources not to pass on spam; same for target resources and request resources.  A request resource might want to authenticate a proxy resource so that they can limit the proxies they accept.  A target resource might do the same to request resources, but a more plausible deployment model is those two being the same entity (something that you can't have with proxy/request). \r\n\r\nInformation protection: clients trust proxy resources not to give their information to request resources.  That is, not their IP address, nor any strong indication that two requests come from the same entity.  (We have seen cases where people think this might be required for anti-abuse, but I think that ignores the spamming/DoS relationship to the detriment of user privacy.  This might be a fun discussion.)",
      "createdAt": "2021-01-15T06:41:33Z",
      "updatedAt": "2021-01-18T21:43:07Z",
      "closedAt": "2021-01-18T21:43:07Z",
      "comments": []
    },
    {
      "number": 8,
      "id": "MDU6SXNzdWU3ODc4NTY3MDU=",
      "title": "Consider nonces",
      "url": "https://github.com/ietf-wg-ohai/oblivious-http/issues/8",
      "state": "CLOSED",
      "author": "martinthomson",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "In our discussion of #7, @chris-wood and I explored the ways in which nonce reuse might occur.\r\n\r\nThe problem arises if the client reuses `enc`.  This leads to nonce reuse on the request for sure.  However, if the request is the same, the problem shifts to the response.  Unless the response is also identical, we get nonce reuse on the response instead.\r\n\r\nWe then discussed options for safeguarding against this.\r\n\r\nAs the client is expected to include randomness in its derivation of its key, it seems like the failing is not something that adding extra steps at the client will address.  So I don't think that adding anything to the request really helps.  \r\n\r\nSeparately, HPKE code is supposed to be stateful.  Reuse of a context should result in the sequence number increasing, leading to a nonce that the server cannot reconstruct (unless it also counts and does trial decryption, but that's two bad actors).  That should ensure that the client doesn't use the same nonce twice.  You really have to have bad randomness at the client to get into a deliberate nonce reuse scenario if you trust that the HPKE implementation is properly stateful.\r\n\r\nHowever, a response that is generated in response to a replayed request is something I am concerned about.  We know that HTTP clients routinely do, even if the request is marked POST.  So some protection here is warranted.  For this, I'm going to suggest that we change from salting based on the request to salting based on `enc || new-randomness`.  Hashing the entire message is likely to be very expensive, both in terms of cycles, but also in terms of state.  The public key should be enough to ensure the binding in the case where a client doesn't reuse the context, and the new randomness should help in case of reuse.\r\n\r\nI think that it's OK to use 128 bits of extra randomness here, but we don't have a handy constant to hang that on.  Nn is 96, Nk could be 128 or 256 depending on the AEAD.  What we really want is the block size, but that isn't a property that is exposed anywhere.",
      "createdAt": "2021-01-18T01:57:54Z",
      "updatedAt": "2021-01-18T23:43:12Z",
      "closedAt": "2021-01-18T23:43:12Z",
      "comments": [
        {
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "body": "I think this is the right design on balance. If we were more conservative, we could include the entire client request (including `enc`), but that doesn't really hedge against the misuse scenario. I'll propose text in #9.",
          "createdAt": "2021-01-18T15:20:52Z",
          "updatedAt": "2021-01-18T15:20:52Z"
        },
        {
          "author": "martinthomson",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Fixed in #11.",
          "createdAt": "2021-01-18T23:43:01Z",
          "updatedAt": "2021-01-18T23:43:01Z"
        }
      ]
    },
    {
      "number": 12,
      "id": "MDU6SXNzdWU3ODg1Njk0NDU=",
      "title": "Key ID length authentication",
      "url": "https://github.com/ietf-wg-ohai/oblivious-http/issues/12",
      "state": "CLOSED",
      "author": "chris-wood",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Should the key ID length be explicitly authenticated, e.g., by including it in the AAD, or should the AEAD implicitly authenticate things? Unclear!",
      "createdAt": "2021-01-18T21:59:15Z",
      "updatedAt": "2021-01-23T01:55:40Z",
      "closedAt": "2021-01-23T01:55:40Z",
      "comments": [
        {
          "author": "martinthomson",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Should we even bother with an AAD at all?  The best reason is that the keyID determines which key the server uses, which is information that factors into decisions.\r\n\r\n(A related question might be why doesn't HPKE take variables as input so that things like key identifiers can be integrated into the key schedule.)",
          "createdAt": "2021-01-18T22:01:51Z",
          "updatedAt": "2021-01-18T22:01:51Z"
        },
        {
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "body": "> Should we even bother with an AAD at all? The best reason is that the keyID determines which key the server uses, which is information that factors into decisions.\r\n\r\nMy take: yes. I need to think through the implications of no additional authentication at all, and in the mean time, I'd be more comfortable with simply authenticating everything possible.\r\n\r\n> (A related question might be why doesn't HPKE take variables as input so that things like key identifiers can be integrated into the key schedule.)\r\n\r\nI think it was discussed, but it makes the interface a mess. And since applications can accomplish the same thing by shoving what they want authenticated into the AAD, it was voted down.",
          "createdAt": "2021-01-18T22:07:44Z",
          "updatedAt": "2021-01-18T22:07:44Z"
        },
        {
          "author": "martinthomson",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Yeah, you and I both know that putting stuff in the AAD isn't a real substitute for having it in the key schedule.  I completely understand how this would mess with the purity of the design, but TLS managed by wrapping its labels better (which also addresses a known problem with HKDF not being injective).",
          "createdAt": "2021-01-18T22:11:09Z",
          "updatedAt": "2021-01-18T22:11:09Z"
        },
        {
          "author": "martinthomson",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Fixed by virtue of making the key ID fixed length in #22.",
          "createdAt": "2021-01-22T03:45:06Z",
          "updatedAt": "2021-01-22T03:45:06Z"
        }
      ]
    },
    {
      "number": 13,
      "id": "MDU6SXNzdWU3ODg1Njk2OTY=",
      "title": "AAD for requests",
      "url": "https://github.com/ietf-wg-ohai/oblivious-http/issues/13",
      "state": "CLOSED",
      "author": "martinthomson",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Right now, @chris-wood and I are debating what I think might be three options:\r\n\r\n1. No AAD\r\n2. keyID\r\n3. length-prefixed keyID\r\n\r\nThe response includes no AAD.",
      "createdAt": "2021-01-18T21:59:56Z",
      "updatedAt": "2021-01-18T22:00:27Z",
      "closedAt": "2021-01-18T22:00:27Z",
      "comments": [
        {
          "author": "martinthomson",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Oops,  #12.",
          "createdAt": "2021-01-18T22:00:16Z",
          "updatedAt": "2021-01-18T22:00:16Z"
        }
      ]
    },
    {
      "number": 16,
      "id": "MDU6SXNzdWU3ODg4OTAxMDM=",
      "title": "Format for server key information",
      "url": "https://github.com/ietf-wg-ohai/oblivious-http/issues/16",
      "state": "CLOSED",
      "author": "martinthomson",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Right now we just use words for this, but we might want to define a format that includes keyID, KEM, KDF, AEAD, and pk for the server. A media type for this might be good. Given the general applicability of this, it might want to be a separate document.",
      "createdAt": "2021-01-19T10:14:24Z",
      "updatedAt": "2021-01-27T05:05:03Z",
      "closedAt": "2021-01-27T05:05:03Z",
      "comments": [
        {
          "author": "ekr",
          "authorAssociation": "NONE",
          "body": "I would suggest we steal either the MLS or the ECH format.\n\nOn Tue, Jan 19, 2021 at 2:14 AM Martin Thomson <notifications@github.com>\nwrote:\n\n> Right now we just use words for this, but we might want to define a format\n> that includes keyID, KEM, KDF, AEAD, and pk for the server. A media type\n> for this might be good. Given the general applicability of this, it might\n> want to be a separate document.\n>\n> \u2014\n> You are receiving this because you are subscribed to this thread.\n> Reply to this email directly, view it on GitHub\n> <https://github.com/unicorn-wg/oblivious-http/issues/16>, or unsubscribe\n> <https://github.com/notifications/unsubscribe-auth/AAIPLIKWUAMCATTJF2WJ4S3S2VLRBANCNFSM4WIRJ2YA>\n> .\n>\n",
          "createdAt": "2021-01-19T13:29:51Z",
          "updatedAt": "2021-01-19T13:29:51Z"
        },
        {
          "author": "martinthomson",
          "authorAssociation": "CONTRIBUTOR",
          "body": "That seems ideal.  I was more thinking about how we might represent this information as a media type or in a header field.  Right now, we're assuming configuration rather than discovery, but for things like key rotation, it could be helpful to include a way to provide updated keys.\r\n\r\nOne way this might help to provide a way for an oblivious request resource to indicate some of the keys that can be used to talk to it.",
          "createdAt": "2021-01-19T21:44:58Z",
          "updatedAt": "2021-01-19T21:44:58Z"
        },
        {
          "author": "martinthomson",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I looked at the ECH format and it wasn't suitable.  It doesn't include a key identifier (it uses that hashing thing for identification) and it relies on TLS signaling the KDF and AEAD that was chosen.  It also includes stuff we don't need.\r\n\r\nThe MLS KeyPackage is even more divergent from our needs.  MLS remaps the KEM, KDF, and AEAD identifiers and includes a bunch of other stuff we don't need.\r\n\r\nWhat I've implemented, which can easily change is this:\r\n\r\n```\r\nConfig {\r\n  Key ID Length (i),\r\n  Key ID (..),\r\n  KEM (16),\r\n  KDF (16),\r\n  AEAD (16),\r\n  Public Key (..), # remainder\r\n}\r\n```\r\n\r\nHowever, I think that it makes sense to have a format that wraps multiple keys, say:\r\n\r\n```\r\nPrefixed Config {\r\n  Config Length (i),\r\n  Config (..),\r\n}\r\nOblivious Request Resource Config {\r\n  PrefixedConfig (..) ...,\r\n}\r\n```\r\n\r\nThis would allow an oblivious request resource to advertise multiple keys.\r\n\r\nDrawbacks:\r\n\r\n* This is not space efficient: if the same key supports multiple configurations, then this will require that the key be repeated multiple times, and with a different key identifier for each.  But I'm going to suggest that gzip can solve that problem for us.\r\n\r\n* There is no way to annotate individual keys.  This might complicate the addition of per-key expiration times.  My initial view is that once replacement keys are available, you don't need to advertise other keys, even if you still accept requests for some time.\r\n\r\nAll told, this is starting to smell like a substantial enough piece to warrant a separate document.",
          "createdAt": "2021-01-21T00:15:47Z",
          "updatedAt": "2021-01-21T00:15:47Z"
        },
        {
          "author": "ekr",
          "authorAssociation": "NONE",
          "body": "Hmm... I'm not sure I agree with this analysis. This seems to me that it's\nisomorphic to the ECH situation, you're just making a different design\ntradeoff about where to carry the KDF and AEAD, for instance. What stops\nyou from using the hashing thing and carrying the KDF and AEAD in this\nbrand new format?\n\n\nOn Wed, Jan 20, 2021 at 4:16 PM Martin Thomson <notifications@github.com>\nwrote:\n\n> I looked at the ECH format and it wasn't suitable. It doesn't include a\n> key identifier (it uses that hashing thing for identification) and it\n> relies on TLS signaling the KDF and AEAD that was chosen. It also includes\n> stuff we don't need.\n>\n> The MLS KeyPackage is even more divergent from our needs. MLS remaps the\n> KEM, KDF, and AEAD identifiers and includes a bunch of other stuff we don't\n> need.\n>\n> What I've implemented, which can easily change is this:\n>\n> Config {\n>   Key ID Length (i),\n>   Key ID (..),\n>   KEM (16),\n>   KDF (16),\n>   AEAD (16),\n>   Public Key (..), # remainder\n> }\n>\n> However, I think that it makes sense to have a format that wraps multiple\n> keys, say:\n>\n> Prefixed Config {\n>   Config Length (i),\n>   Config (..),\n> }\n> Oblivious Request Resource Config {\n>   PrefixedConfig (..) ...,\n> }\n>\n> This would allow an oblivious request resource to advertise multiple keys.\n>\n> Drawbacks:\n>\n>    -\n>\n>    This is not space efficient: if the same key supports multiple\n>    configurations, then this will require that the key be repeated multiple\n>    times, and with a different key identifier for each. But I'm going to\n>    suggest that gzip can solve that problem for us.\n>    -\n>\n>    There is no way to annotate individual keys. This might complicate the\n>    addition of per-key expiration times. My initial view is that once\n>    replacement keys are available, you don't need to advertise other keys,\n>    even if you still accept requests for some time.\n>\n> All told, this is starting to smell like a substantial enough piece to\n> warrant a separate document.\n>\n> \u2014\n> You are receiving this because you commented.\n> Reply to this email directly, view it on GitHub\n> <https://github.com/unicorn-wg/oblivious-http/issues/16#issuecomment-764059399>,\n> or unsubscribe\n> <https://github.com/notifications/unsubscribe-auth/AAIPLIL25D37MHIJ254FSHLS25W4FANCNFSM4WIRJ2YA>\n> .\n>\n",
          "createdAt": "2021-01-21T00:27:17Z",
          "updatedAt": "2021-01-21T00:27:17Z"
        },
        {
          "author": "martinthomson",
          "authorAssociation": "CONTRIBUTOR",
          "body": "OK, I'm going to try not to react here with how abhorrent the hashing thing is, but I think that it exists primarily to avoid carrying information in the ECH context.\r\n\r\nWe could carry certainly carry KDF and AEAD identifiers separate to the key identifier.  That's a choice that would allow us to reuse the part of the ECH configuration that repeats that piece.  And have multiple combinations of those for the same key identifier.  I don't care so much about that piece, though in practice you can get that by packing those fields into the key identifier.\r\n\r\nThe pieces we really don't want are the public name (which means nothing in this context) and extensions.  This is not something that needs extending arbitrarily.",
          "createdAt": "2021-01-21T00:33:07Z",
          "updatedAt": "2021-01-21T00:33:07Z"
        },
        {
          "author": "ekr",
          "authorAssociation": "NONE",
          "body": "On Wed, Jan 20, 2021 at 4:33 PM Martin Thomson <notifications@github.com>\r\nwrote:\r\n\r\n> OK, I'm going to try not to react here with how abhorrent the hashing\r\n> thing is, but I think that it exists primarily to avoid carrying\r\n> information in the ECH context.\r\n>\r\n> We could carry certainly carry KDF and AEAD identifiers separate to the\r\n> key identifier. That's a choice that would allow us to reuse the part of\r\n> the ECH configuration that repeats that piece. And have multiple\r\n> combinations of those for the same key identifier. I don't care so much\r\n> about that piece, though in practice you can get that by packing those\r\n> fields into the key identifier.\r\n>\r\nMy point is that the design considerations are no different here than for\r\nECH. As far as I can tell, this simply reflects a different aesthetic\r\npreference. That's fine, but I think consistency of design is useful and\r\nimportant, and so to the extent to which it's just aesthetics we should\r\ncome down to one conclusion and then impose it on both. If that means\r\nchanging ECH, then so be it.\r\n\r\n> The pieces we really don't want are the public name (which means nothing in\r\n> this context)\r\n\r\nI agree with this.\r\n\r\n> and extensions. This is not something that needs extending arbitrarily.\r\n\r\nI don't agree with this. My experience is that more or less whenever we\r\nmake the decision not to leave ourselves extension points we find that we\r\nregret this. In that vein, it's worth noting that we can address the public\r\nname issue by making public name an extension, thus harmonizing the formats\r\nand avoiding the clutter here.\r\n",
          "createdAt": "2021-01-21T00:38:17Z",
          "updatedAt": "2021-01-21T00:39:20Z"
        },
        {
          "author": "martinthomson",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I value reuse, but not to that extent.  Not when it means a format that has extensions, where in one context extension A is mandatory, but in another context extension B is mandatory instead.  And all the mess that comes with extension processing to boot.",
          "createdAt": "2021-01-21T00:42:45Z",
          "updatedAt": "2021-01-21T00:42:45Z"
        },
        {
          "author": "martinthomson",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Oh, and this point:\r\n\r\n> My experience is that more or less whenever we make the decision not to leave ourselves extension points we find that we regret this. \r\n\r\nI would expect to be able to use a different extension point at the next layer up.  That is, define a new media type or whatever.",
          "createdAt": "2021-01-21T00:45:08Z",
          "updatedAt": "2021-01-21T00:45:08Z"
        },
        {
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "body": "For what it's worth, I would like for ECH and OHTTP to share the same shape of configuration, modulo the unnecessary bits (public name). @martinthomson, can you elaborate on why the client-computed Key ID is, well, abhorrent? :-) ",
          "createdAt": "2021-01-21T16:59:33Z",
          "updatedAt": "2021-01-21T16:59:33Z"
        },
        {
          "author": "ekr",
          "authorAssociation": "NONE",
          "body": "While I don't agree with MT about extensions, perhaps we could factor out\nthe common pieces into a component that could be used by both ECH and OHTTP\ncould use -- and maybe even MLS.\n\nOn Thu, Jan 21, 2021 at 8:59 AM Christopher Wood <notifications@github.com>\nwrote:\n\n> For what it's worth, I would like for ECH and OHTTP to share the same\n> shape of configuration, modulo the unnecessary bits (public name).\n> @martinthomson <https://github.com/martinthomson>, can you elaborate on\n> why the client-computed Key ID is, well, abhorrent? :-)\n>\n> \u2014\n> You are receiving this because you commented.\n> Reply to this email directly, view it on GitHub\n> <https://github.com/unicorn-wg/oblivious-http/issues/16#issuecomment-764792760>,\n> or unsubscribe\n> <https://github.com/notifications/unsubscribe-auth/AAIPLIO53S22RAQSMK4SYRDS3BMQLANCNFSM4WIRJ2YA>\n> .\n>\n",
          "createdAt": "2021-01-21T17:12:58Z",
          "updatedAt": "2021-01-21T17:12:58Z"
        },
        {
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "body": "So, a server-chosen key ID does seem attractive, for a number of reasons:\r\n\r\n- Deployment-specific flexibility in the ID -> key mapping\r\n- Avoids hash computation (and algorithm choice) on clients\r\n\r\nHowever, for the sake of exploration, let's say a server wants to publish two configs -- one for AES and another for ChaCha. Clients would obtain this set of of configs... somehow... and make a choice between the two based on their preferences (do they support AES intrinsics?). Let's say an attacker stripped the config with AES from the response to client, forcing it to use ChaCha. The client's Key ID signal does not indicate to the server that the chosen key was made from an incomplete view of the keys. Is this a problem? Perhaps not for AEAD algorithms we care about, but what about in a future world where one key carries a PQ KEM public key and another carries a classical KEM public key? \r\n\r\nIf we think KEM key selection is a problem, then it seems there are a couple ways to address this:\r\n\r\n1. Have clients signal to servers their view of the config set (as is done in ECH with the config_id being computed as a hash of the ECHConfig)\r\n2. Ensure attackers can't interfere with client view of configs\r\n\r\nIf OHTTP configs are published in DNS (I'm not necessarily advocating for this), then (1) seems preferable. If OHTTP configs are fetched directly from the request resource, then perhaps (2) applies?\r\n\r\nI guess the representation of the key ID depends on the threat model, which isn't surprising. :-)\r\n\r\n@ekr, what do you think?",
          "createdAt": "2021-01-21T17:59:31Z",
          "updatedAt": "2021-01-21T17:59:45Z"
        },
        {
          "author": "ekr",
          "authorAssociation": "NONE",
          "body": "I spent some time looking back at the history of ECH. It turns out that I originally had a key id and then Kazuho proposed removing it, mostly on the grounds that it was easier to manage with a unique value. It seems like the situation is basically the same here for O-HTTP as for ECH, so we should converge on a common answer whatever that is.\r\n\r\nhttps://github.com/tlswg/draft-ietf-tls-esni/pull/43\r\n\r\nWRT the question of negotiation, ISTM that that's a function of folding the entire configuration into the transcript, and so obviously another identifier is needed if you want to refer to a specific component in the configuration, whether that's a key or a config instance or whatever.\r\n\r\n",
          "createdAt": "2021-01-21T21:48:39Z",
          "updatedAt": "2021-01-21T21:48:39Z"
        },
        {
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "body": "> WRT the question of negotiation, ISTM that that's a function of folding the entire configuration into the transcript, and so obviously another identifier is needed if you want to refer to a specific component in the configuration, whether that's a key or a config instance or whatever.\r\n\r\nTo clarify, are you suggesting possibly folding the entire config set into the transcript and then identifying one specific config in that set (via key id)? ",
          "createdAt": "2021-01-21T21:54:20Z",
          "updatedAt": "2021-01-21T21:54:20Z"
        },
        {
          "author": "ekr",
          "authorAssociation": "NONE",
          "body": "If you're concerned about downgrade, I think it's the only way. Though of\ncourse at that point the client has already sent the information, so the\nvalue is limited.\n\nOn Thu, Jan 21, 2021 at 1:54 PM Christopher Wood <notifications@github.com>\nwrote:\n\n> WRT the question of negotiation, ISTM that that's a function of folding\n> the entire configuration into the transcript, and so obviously another\n> identifier is needed if you want to refer to a specific component in the\n> configuration, whether that's a key or a config instance or whatever.\n>\n> To clarify, are you suggesting possibly folding the entire config set into\n> the transcript and then identifying one specific config in that set (via\n> key id)?\n>\n> \u2014\n> You are receiving this because you were mentioned.\n> Reply to this email directly, view it on GitHub\n> <https://github.com/unicorn-wg/oblivious-http/issues/16#issuecomment-764965967>,\n> or unsubscribe\n> <https://github.com/notifications/unsubscribe-auth/AAIPLIO7HC7LXZ25IM3NJQ3S3CPBVANCNFSM4WIRJ2YA>\n> .\n>\n",
          "createdAt": "2021-01-21T22:20:08Z",
          "updatedAt": "2021-01-21T22:20:08Z"
        },
        {
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "body": "Yeah, that's a good point. So perhaps there's not much we can do about downgrade other than ensure integrity for the config set?",
          "createdAt": "2021-01-21T22:22:40Z",
          "updatedAt": "2021-01-21T22:22:40Z"
        },
        {
          "author": "martinthomson",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Documented the agreed format in #24.  We've still open questions about the extent to which this and ECH can be harmonized, so I'll open a separate issue to ensure that happens.",
          "createdAt": "2021-01-23T02:03:48Z",
          "updatedAt": "2021-01-23T02:03:48Z"
        },
        {
          "author": "martinthomson",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Let's leave #27 as where we can track key format changes.",
          "createdAt": "2021-01-27T05:05:03Z",
          "updatedAt": "2021-01-27T05:05:03Z"
        }
      ]
    },
    {
      "number": 19,
      "id": "MDU6SXNzdWU3OTA2MDcxMzM=",
      "title": "Discovery",
      "url": "https://github.com/ietf-wg-ohai/oblivious-http/issues/19",
      "state": "CLOSED",
      "author": "martinthomson",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "This probably covers a bunch of things, so I'll start with a few things that might want to be discovered automatically:\r\n\r\n1. Clients might want to ask the oblivious proxy resource which oblivious request resource it forwards to.\r\n2. Clients might want to learn about which oblivious target resources a particular oblivious request resource is willing to forward to.\r\n3. Clients might want to learn automatically about the public keys the oblivious request resource has (along with key identifiers, see #16).\r\n4. Clients might want to ask about the oblivious proxy resources that forward to a particular oblivious request resource.  This is a little tricky, because clients will need to exercise discretion in selecting from this set.  This also risks exposing the existence of DoS exemption agreements between the oblivious request resource server and the oblivious proxy resource server.\r\n5. Clients might want to ask the oblivious target resource for an oblivious request resource (or by extension oblivious proxy resource) that it can use to reach that resource.\r\n\r\nIf you look at this as link relations, this is two forward links, a key configuration, and two backward links.  Defining link relation types for this might be a way to address this.  Assuming that we also define a media type for a key configuration format, that is.\r\n",
      "createdAt": "2021-01-21T01:45:10Z",
      "updatedAt": "2022-03-28T03:08:41Z",
      "closedAt": "2022-03-28T03:08:41Z",
      "comments": [
        {
          "author": "elear",
          "authorAssociation": "NONE",
          "body": "This seems to me to the fundamental challenge with this system, and a great many other systems.  DHTs have been used to advertise resource availability, but the searched object is quite hard to blind from everyone.  We could say that good is the enemy of great, only we've been at this a while, and neither have shown up.",
          "createdAt": "2021-06-02T11:00:59Z",
          "updatedAt": "2021-06-02T11:00:59Z"
        },
        {
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "body": "@elear use of the word \"system\" is interesting here. OHTTP does not describe a _system_, but a protocol. The way that this protocol is deployed and used in practice, I think, defines the system. (The same argument goes for protocols like DoH.) So I don't see this as a challenge to the protocol design, but rather to how one might configure and use it in practice. And that seems rightfully out of scope.",
          "createdAt": "2021-06-16T23:15:41Z",
          "updatedAt": "2021-06-16T23:15:41Z"
        },
        {
          "author": "elear",
          "authorAssociation": "NONE",
          "body": "@chris-wood Document that practice a bit, then, if it is practice.  I don't view the DoH document as a resounding success, fwiw.  It left many questions unanswered, to the point that we had to spin up another working group just to address them.  My fundamental question remains: does ohttp contribute more positive than negative?  No use case in the document means no understanding of that.  I do appreciate Martin and Eric's explanation on list.  Perhaps that should be incorporated.",
          "createdAt": "2021-06-17T05:05:20Z",
          "updatedAt": "2021-06-17T05:05:20Z"
        },
        {
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "body": "You might not find this satisfactory, but there is text in the draft about exactly the use cases that Ekr described.\r\n\r\nhttps://unicorn-wg.github.io/oblivious-http/draft-thomson-http-oblivious.html#name-applicability has those two.\r\n\r\nAre you asking for more discussion of the relationship between various actors in those use cases?\r\n\r\n",
          "createdAt": "2021-06-17T07:00:55Z",
          "updatedAt": "2021-06-17T07:00:55Z"
        },
        {
          "author": "elear",
          "authorAssociation": "NONE",
          "body": "Martin, the example you gave was really good.  The trick is to show how the players interact.",
          "createdAt": "2021-06-17T12:11:09Z",
          "updatedAt": "2021-06-17T12:11:09Z"
        },
        {
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "body": "Discussed at IETF 113 and the WG decided that we would continue the discovery discussion in relation to other drafts.",
          "createdAt": "2022-03-28T03:08:41Z",
          "updatedAt": "2022-03-28T03:08:41Z"
        }
      ]
    },
    {
      "number": 20,
      "id": "MDU6SXNzdWU3OTA2MDk1NTI=",
      "title": "Multiple KDF/AEAD tuples",
      "url": "https://github.com/ietf-wg-ohai/oblivious-http/issues/20",
      "state": "CLOSED",
      "author": "martinthomson",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Splitting this from #16.\r\n\r\nIt seems likely that a single KEM key will support multiple KDF or AEAD options (NSS will soon support 3 of the former, and 2 of the latter, maybe 3 of each).  Having a configuration that includes a single set of (KEM, key, and key identifier) with a list of KDF+AEAD pairs, akin to ECH, would make it easier to support that sort of deployment.  Without that, key identifiers need to carry information about the KDF and AEAD.\r\n\r\nTo support this, the format needs to be adjusted to carry the KDF and AEAD identifier.  In doing so, we probably want to encode the choice of KDF and AEAD in the key schedule or AAD accordingly.",
      "createdAt": "2021-01-21T01:50:19Z",
      "updatedAt": "2021-01-23T01:55:40Z",
      "closedAt": "2021-01-23T01:55:40Z",
      "comments": []
    },
    {
      "number": 21,
      "id": "MDU6SXNzdWU3OTE1NjI4ODc=",
      "title": "Document key configuration format",
      "url": "https://github.com/ietf-wg-ohai/oblivious-http/issues/21",
      "state": "CLOSED",
      "author": "martinthomson",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "And document the requirements for this format (namely that it be authenticated and attributed to the oblivious request resource).",
      "createdAt": "2021-01-21T23:19:21Z",
      "updatedAt": "2021-01-23T01:46:47Z",
      "closedAt": "2021-01-23T01:46:47Z",
      "comments": []
    },
    {
      "number": 23,
      "id": "MDU6SXNzdWU3OTE2NDM4MTg=",
      "title": "Indicating that the key wasn't known",
      "url": "https://github.com/ietf-wg-ohai/oblivious-http/issues/23",
      "state": "CLOSED",
      "author": "martinthomson",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "If the key identifier isn't known to the oblivious request resource, or the message can't be decrypted, it probably wants to send a clear signal.  The signal is definitely not encapsulated at that point, so clients have limited options available to them.\r\n\r\nAs a first-order suggestion, a 4xx status code generally indicates to the client that it might want to review the information it used.  However, more specific error codes might help in specific cases that we deem important or common.  Top of the list: when the identified key has been decommissioned.",
      "createdAt": "2021-01-22T02:25:01Z",
      "updatedAt": "2021-01-23T01:46:24Z",
      "closedAt": "2021-01-23T01:46:24Z",
      "comments": [
        {
          "author": "martinthomson",
          "authorAssociation": "CONTRIBUTOR",
          "body": "How does [422 (Unprocessable Content)](https://httpwg.org/http-core/draft-ietf-httpbis-semantics-latest.html#status.422) sound in terms of saying \"the content was unusable\".  We could go further and recommend the use of [RFC 7807](https://tools.ietf.org/html/rfc7807) if you think more detail is needed.",
          "createdAt": "2021-01-22T03:44:27Z",
          "updatedAt": "2021-01-22T03:44:27Z"
        }
      ]
    },
    {
      "number": 27,
      "id": "MDU6SXNzdWU3OTI0MDg5OTU=",
      "title": "Ensure key configuration matches ECH",
      "url": "https://github.com/ietf-wg-ohai/oblivious-http/issues/27",
      "state": "CLOSED",
      "author": "martinthomson",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "We are proposing alignment, but we need to make sure that happens.",
      "createdAt": "2021-01-23T02:04:17Z",
      "updatedAt": "2022-02-14T01:18:29Z",
      "closedAt": "2022-02-14T01:18:29Z",
      "comments": [
        {
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "body": "Achieved. Names are different, but the structure is the same.\r\n\r\nOurs:\r\n\r\n```\r\nopaque HpkePublicKey[Npk];\r\nuint16 HpkeKemId;\r\nuint16 HpkeKdfId;\r\nuint16 HpkeAeadId;\r\n\r\nstruct {\r\n  HpkeKdfId kdf_id;\r\n  HpkeAeadId aead_id;\r\n} HpkeSymmetricAlgorithms;\r\n\r\nstruct {\r\n  uint8 key_id;\r\n  HpkeKemId kem_id;\r\n  HpkePublicKey public_key;\r\n  HpkeSymmetricAlgorithms cipher_suites<4..2^16-4>;\r\n} KeyConfig;\r\n```\r\n\r\nTheirs:\r\n\r\n```\r\n    opaque HpkePublicKey<1..2^16-1>;\r\n    uint16 HpkeKemId;  // Defined in I-D.irtf-cfrg-hpke\r\n    uint16 HpkeKdfId;  // Defined in I-D.irtf-cfrg-hpke\r\n    uint16 HpkeAeadId; // Defined in I-D.irtf-cfrg-hpke\r\n\r\n    struct {\r\n        HpkeKdfId kdf_id;\r\n        HpkeAeadId aead_id;\r\n    } HpkeSymmetricCipherSuite;\r\n\r\n    struct {\r\n        uint8 config_id;\r\n        HpkeKemId kem_id;\r\n        HpkePublicKey public_key;\r\n        HpkeSymmetricCipherSuite cipher_suites<4..2^16-4>;\r\n    } HpkeKeyConfig;\r\n\r\n    struct {\r\n        HpkeKeyConfig key_config;\r\n        uint8 maximum_name_length;\r\n        opaque public_name<1..255>;\r\n        Extension extensions<0..2^16-1>;\r\n    } ECHConfigContents;\r\n\r\n    struct {\r\n        uint16 version;\r\n        uint16 length;\r\n        select (ECHConfig.version) {\r\n          case 0xfe0d: ECHConfigContents contents;\r\n        }\r\n    } ECHConfig;\r\n```\r\n\r\nNo need to keep this open at this stage.  If things drift, we can use a new issue.",
          "createdAt": "2022-02-14T01:18:29Z",
          "updatedAt": "2022-02-14T01:18:29Z"
        }
      ]
    },
    {
      "number": 31,
      "id": "MDU6SXNzdWU3OTM3ODgzMDA=",
      "title": "The length of the public key is fixed",
      "url": "https://github.com/ietf-wg-ohai/oblivious-http/issues/31",
      "state": "CLOSED",
      "author": "martinthomson",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "We currently length-prefix it, but we don't *have* to.  Think about this a little.",
      "createdAt": "2021-01-25T23:00:15Z",
      "updatedAt": "2021-02-19T21:54:53Z",
      "closedAt": "2021-02-19T21:54:53Z",
      "comments": [
        {
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "body": "Both the public key and encapsulated secret are fixed length. I think making these fixed length on the wire is good. However, it *does* require the parsing code to know the corresponding size, which depends on the KEM. This requires there to be a function to map the kem_id to the corresponding size(s). @martinthomson, do you have such an API in your implementation? I have one in mine, which would make this pretty straightforward to implement.",
          "createdAt": "2021-02-19T17:25:54Z",
          "updatedAt": "2021-02-19T17:25:54Z"
        }
      ]
    },
    {
      "number": 32,
      "id": "MDU6SXNzdWU3OTM3OTc3ODU=",
      "title": "Include KEMID in Encapsulated Request",
      "url": "https://github.com/ietf-wg-ohai/oblivious-http/issues/32",
      "state": "CLOSED",
      "author": "chris-wood",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Currently, an encapsulated request carries a key ID which maps to a KEM key that determines the size of the encapsulated public key in a request. This means that code parsing a request needs to know the ID -> KEM mapping in order to parse things correctly, which is somewhat annoying. I propose we add KEMID to the request so that this mapping isn't needed to just parse the message. As a bonus, that would also fold in the KEMID explicitly into the AAD alongside the KDFID and AEADID. ",
      "createdAt": "2021-01-25T23:21:13Z",
      "updatedAt": "2021-02-20T14:02:13Z",
      "closedAt": "2021-02-20T14:02:13Z",
      "comments": []
    },
    {
      "number": 38,
      "id": "MDU6SXNzdWU3OTc4NTI3MjI=",
      "title": "Discuss correlation of requests by key",
      "url": "https://github.com/ietf-wg-ohai/oblivious-http/issues/38",
      "state": "CLOSED",
      "author": "martinthomson",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "A server that wants to undermine this process can ensure that clients are provided with individual keys.  Though there is a limited number of key identifiers (though see also #27), a server could extend the number of identifiers with a little bit of trial decryption.  Or the server could just use this ability selectively.\r\n\r\nThough the draft deliberately avoids talking about how clients learn about keys, we might talk about the implications of acquiring keys from servers.  If the server is responsible for issuing keys, then the server can target individuals with specific keys.\r\n\r\n@davidben suggests that maybe we could have the proxy provide keys.  This is not a bad way to deal with this problem, though it places more trust in the proxy as the proxy now needs to be trusted not to provide a key for which it has the secret key.  That might still work if the key could be further authenticated by the server, but that's a rabbit hole of its own.",
      "createdAt": "2021-02-01T00:22:14Z",
      "updatedAt": "2021-02-19T21:59:35Z",
      "closedAt": "2021-02-19T21:59:35Z",
      "comments": []
    },
    {
      "number": 39,
      "id": "MDU6SXNzdWU3OTc4NTMwMTM=",
      "title": "Time bounds on keys",
      "url": "https://github.com/ietf-wg-ohai/oblivious-http/issues/39",
      "state": "CLOSED",
      "author": "martinthomson",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "@davidben suggests that we need to consider how to time-bound server keys to limit the risk of secret key exposure.",
      "createdAt": "2021-02-01T00:23:17Z",
      "updatedAt": "2021-02-19T17:01:19Z",
      "closedAt": "2021-02-19T17:01:19Z",
      "comments": []
    },
    {
      "number": 40,
      "id": "MDU6SXNzdWU3OTc4NTMzNjc=",
      "title": "Requests can be replayed",
      "url": "https://github.com/ietf-wg-ohai/oblivious-http/issues/40",
      "state": "CLOSED",
      "author": "martinthomson",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "This means that servers need anti-replay protections, especially if they are performing non-idempotent operations.",
      "createdAt": "2021-02-01T00:24:26Z",
      "updatedAt": "2021-02-18T00:10:18Z",
      "closedAt": "2021-02-18T00:10:18Z",
      "comments": []
    },
    {
      "number": 41,
      "id": "MDU6SXNzdWU3OTc4NTM3NTk=",
      "title": "Responses lack post-compromise security",
      "url": "https://github.com/ietf-wg-ohai/oblivious-http/issues/41",
      "state": "CLOSED",
      "author": "martinthomson",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Compromise of the client after it sends the request can be used to recover the keys used to decrypt (or falsify) the response.",
      "createdAt": "2021-02-01T00:25:44Z",
      "updatedAt": "2021-02-19T17:01:19Z",
      "closedAt": "2021-02-19T17:01:19Z",
      "comments": []
    },
    {
      "number": 42,
      "id": "MDU6SXNzdWU3OTc4NTQ0MDQ=",
      "title": "Use cases/applicability",
      "url": "https://github.com/ietf-wg-ohai/oblivious-http/issues/42",
      "state": "CLOSED",
      "author": "martinthomson",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "A little more text on the narrow applicability of this would be helpful.  Some people originally interpreted this as having broader application than was ever intended.",
      "createdAt": "2021-02-01T00:27:57Z",
      "updatedAt": "2021-02-17T23:25:37Z",
      "closedAt": "2021-02-17T23:25:37Z",
      "comments": [
        {
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "body": "@martinthomson can we close this with #44?",
          "createdAt": "2021-02-17T23:19:47Z",
          "updatedAt": "2021-02-17T23:19:47Z"
        },
        {
          "author": "martinthomson",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Yep.  I forgot to link it.",
          "createdAt": "2021-02-17T23:25:37Z",
          "updatedAt": "2021-02-17T23:25:37Z"
        }
      ]
    },
    {
      "number": 54,
      "id": "MDU6SXNzdWU4MTkwMzQxOTg=",
      "title": "Consider making domain separation labels sharper",
      "url": "https://github.com/ietf-wg-ohai/oblivious-http/issues/54",
      "state": "CLOSED",
      "author": "chris-wood",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Several people have pointed out (offline) that \"request\" and \"response\" could be reused by other protocols. Given that one should not reuse OHTTP keys in other protocols, I don't think this is an issue. But hedging against users tempted to to do so seems like a reasonable thing to do. We might just rename these to \"ohttp request\" and \"ohttp response\", for example.",
      "createdAt": "2021-03-01T16:27:30Z",
      "updatedAt": "2022-02-07T17:47:31Z",
      "closedAt": "2022-02-07T17:47:31Z",
      "comments": [
        {
          "author": "jhoyla",
          "authorAssociation": "NONE",
          "body": "Including 'ohttp' in the HPKE `KeySchedule` `info` field would also enforce key separation.\r\nMy vote is to do both.",
          "createdAt": "2021-03-01T16:30:07Z",
          "updatedAt": "2021-03-01T16:30:07Z"
        },
        {
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "body": "I can live with that.  No guarantee that others don't also use \"ohttp request\" or what have you at the same time that they reuse the keys, but it's good hygiene.  I might check whether that adds another HMAC iteration though.",
          "createdAt": "2021-03-02T00:02:37Z",
          "updatedAt": "2021-03-02T00:02:37Z"
        },
        {
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "body": "OK, we're over the limit pretty much no matter what we do.  HPKE is not careful enough to avoid this.\r\n\r\nHKDF-SHA-256 blocks are 512-bit/64-byte with 9 bytes minimum padding.  Output is 32 bytes.\r\nX25519 keys are 32 bytes, public and private.\r\n\r\nSHA-256 remaining is 64N + 55\r\n\r\n```\r\n   def LabeledExtract(salt, label, ikm):\r\n     labeled_ikm = concat(\"HPKE-v1\", suite_id, label, ikm)\r\n     return Extract(salt, labeled_ikm)\r\n```\r\nOverhead: 7 (\"HPKE-v1\") + 2 (suite_id) + 32 (ikm).\r\nRemaining: 64N + 14\r\n```\r\n   def LabeledExpand(prk, label, info, L):\r\n     labeled_info = concat(I2OSP(L, 2), \"HPKE-v1\", suite_id,\r\n                           label, info)\r\n     return Expand(prk, labeled_info, L)\r\n```\r\nOverhead: 2 (L) + 7 (\"HPKE-v1\") + 2 (suite_id) + 1 (for HKDF counter byte)\r\nRemaining for label + info: 64N + 43\r\n(For L > 32, additional iterations have a lower limit of 11.)\r\n```\r\n   def KeySchedule<ROLE>(mode, shared_secret, info, psk, psk_id):\r\n     VerifyPSKInputs(mode, psk, psk_id)\r\n\r\n     psk_id_hash = LabeledExtract(\"\", \"psk_id_hash\", psk_id)\r\n```\r\nHere, psk_id > 3 bytes pushes over the edge.\r\n```\r\n     info_hash = LabeledExtract(\"\", \"info_hash\", info)\r\n```\r\nHere, info > 5 bytes pushes over the edge.\r\n```\r\n     key_schedule_context = concat(mode, psk_id_hash, info_hash)\r\n\r\n     secret = LabeledExtract(shared_secret, \"secret\", psk)\r\n```\r\nNo flexibility here as psk needs to be large.\r\n```\r\n     key = LabeledExpand(secret, \"key\", key_schedule_context, Nk)\r\n```\r\nHere key_schedule_context is fixed in size, so while it spills over into\r\nmultiple blocks, and the 5 bytes of spill is well within limits.\r\n```\r\n     base_nonce = LabeledExpand(secret, \"base_nonce\",\r\n                                key_schedule_context, Nn)\r\n```\r\nThe spill here is 12 bytes. Unless Nn > 32 (which is won't be), no problem.\r\n```\r\n     exporter_secret = LabeledExpand(secret, \"exp\",\r\n                                     key_schedule_context, Nh)\r\n```\r\nA 6 byte spill and no real option to reduce this, so it's OK.\r\n```\r\n     return Context<ROLE>(key, base_nonce, 0, exporter_secret)\r\n```",
          "createdAt": "2021-03-02T01:32:25Z",
          "updatedAt": "2021-03-02T01:32:25Z"
        },
        {
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "body": "OK, my mistake.  I had thought that ikm was always decently large, but the _hash labels are used to hash inputs smaller than Nsk, so they don't overflow.  While there are multiple iterations of the compression function at multiple points, there is no real choice there as one of the inputs is always a full block and you also need something extra to distinguish between that and other uses.\r\n\r\nIn short, only dropping the PSK gunk would give us a real shot at improving this.",
          "createdAt": "2021-03-02T03:30:59Z",
          "updatedAt": "2021-03-02T03:30:59Z"
        },
        {
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "body": "This was addressed in #85. Closing.",
          "createdAt": "2022-02-07T17:47:31Z",
          "updatedAt": "2022-02-07T17:47:31Z"
        }
      ]
    },
    {
      "number": 55,
      "id": "MDU6SXNzdWU4MzM2MjQ4MzE=",
      "title": "Caching server keys on a client",
      "url": "https://github.com/ietf-wg-ohai/oblivious-http/issues/55",
      "state": "CLOSED",
      "author": "ddragana",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [],
      "body": "Clients should cache server keys for some time. TTL can be supply in a cache-control header of a ohttp-keys response.\r\nShould this be mentioned or is it implied?",
      "createdAt": "2021-03-17T10:30:05Z",
      "updatedAt": "2022-02-14T14:31:22Z",
      "closedAt": "2022-02-14T14:31:22Z",
      "comments": [
        {
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "body": "The document doesn't really define the key configuration acquisition method, so it can't really cover details like caching (or retention).  Getting into specifics with HTTP Cache-Control is out of scope.\r\n\r\nThere is discussion of retention periods in [draft-wood-key-consistency](https://datatracker.ietf.org/doc/html/draft-wood-key-consistency), which are relevant and might be worth pointing to.  That document has uncertain status, but we might still use an informative reference.",
          "createdAt": "2021-03-17T23:21:55Z",
          "updatedAt": "2021-03-17T23:21:55Z"
        }
      ]
    },
    {
      "number": 56,
      "id": "MDU6SXNzdWU4ODQ5MjE1Mzc=",
      "title": "Independent HTTPS connection implications",
      "url": "https://github.com/ietf-wg-ohai/oblivious-http/issues/56",
      "state": "CLOSED",
      "author": "chris-wood",
      "authorAssociation": "COLLABORATOR",
      "assignees": [
        "chris-wood"
      ],
      "labels": [],
      "body": "Clients and proxies create independent TLS connections to the upstream node in the OHTTP chain. This raises some interesting questions:\r\n\r\n- What if the trust stores between client and proxy are disjoint? \r\n- What if the proxy completely disables server authentication in its connection to the target? \r\n\r\nThe [ODoH model](https://github.com/cloudflare/odoh-analysis) does not assume a secure connection between proxy and target, so I don't think this has an effect on the security properties of OHTTP. That said, it may be worth noting explicitly, if we don't already do so.",
      "createdAt": "2021-05-10T19:20:34Z",
      "updatedAt": "2021-05-12T03:29:14Z",
      "closedAt": "2021-05-12T03:29:14Z",
      "comments": [
        {
          "author": "martinthomson",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Yeah, the same applies here.  We rely on the proxy not leaking certain information, but that does not necessarily extend to a reliance on TLS for that hop.  Worth noting.",
          "createdAt": "2021-05-10T22:26:42Z",
          "updatedAt": "2021-05-10T22:26:42Z"
        }
      ]
    },
    {
      "number": 58,
      "id": "MDU6SXNzdWU5MDkzNzgyMDk=",
      "title": "Suggest that this be experimental",
      "url": "https://github.com/ietf-wg-ohai/oblivious-http/issues/58",
      "state": "CLOSED",
      "author": "elear",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [],
      "body": "The authors raise a number of concerns in the draft about the economics of proxying, and there are a number of issues opened that demonstrate certain scaling challenges, such as #19.  I would suggest that some experimenting would help understand the scaling constraints and feasibility of using this function.",
      "createdAt": "2021-06-02T11:03:11Z",
      "updatedAt": "2022-03-28T03:07:58Z",
      "closedAt": "2022-03-28T03:07:58Z",
      "comments": [
        {
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "body": "I don't think see any need for the protocol to be experimental, even if some of the deployment architectures in which it might be deployed are not understood.  We have some clear and direct deployment scenarios that have no exposure to the vagaries of discovery or economic incentives you are talking about.\r\n\r\n#19 does encroach into experimental territory by contemplating the expansion of the protocol with features that are speculative.  The issue uses to record some of the thinking, but I have no plans to expand the core protocol in the direction(s) that the issue might hint at.  As my original note there is both expansive and vague, of course there are options that are fanciful or possibly even nonsensical.\r\n\r\nThat said, some of the mechanisms in that space are purely prosaic in nature and likely candidates for inclusion in a proposed standard.  For instance, discovery of key configuration might simplify client configuration by allowing it to follow links to obtain key configurations rather than use a provisioned value.\r\n\r\nWe will, of course, need more experience with operating deployments to be able to identify these; that we're not there yet is not cause to say that the whole thing is just an experiment.  That would be premature.",
          "createdAt": "2021-06-03T00:36:53Z",
          "updatedAt": "2021-06-03T00:36:53Z"
        },
        {
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "body": "Discussed at IETF 113 and the WG concluded that this was OK as PS.",
          "createdAt": "2022-03-28T03:07:58Z",
          "updatedAt": "2022-03-28T03:07:58Z"
        }
      ]
    },
    {
      "number": 60,
      "id": "MDU6SXNzdWU5MjE5MTA2ODE=",
      "title": "Deployment considerations",
      "url": "https://github.com/ietf-wg-ohai/oblivious-http/issues/60",
      "state": "CLOSED",
      "author": "martinthomson",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Vittorio says:\r\n\r\n> [...] a new standard should include deployment recommendations to \r\n> prevent the worst scenarios from happening, or explanations of why \r\n> those scenarios are unlikely or unattractive for abusers.\r\n\r\nThis relates in particular to the potential for generic services with open destination (not a capability in the proposal) to be used for nefarious purposes (spamming, bot net command and control, hiding illegal activity, etc...).",
      "createdAt": "2021-06-15T23:46:34Z",
      "updatedAt": "2022-02-14T23:45:40Z",
      "closedAt": "2022-02-14T23:45:40Z",
      "comments": []
    },
    {
      "number": 61,
      "id": "MDU6SXNzdWU5MzEzMTM4NzI=",
      "title": "Use new method",
      "url": "https://github.com/ietf-wg-ohai/oblivious-http/issues/61",
      "state": "CLOSED",
      "author": "elear",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [],
      "body": "The draft currently makes use of POST to transit traffic through a proxy, which means that existing proxies would unwittingly allow communications they might otherwise prohibit.  The default should be for such traffic to not be permitted.  The easiest way to do that is to make use of a new method.  This would allow enterprise TLS proxies to make a determination for themselves which sites to allow obliviation.",
      "createdAt": "2021-06-28T08:30:37Z",
      "updatedAt": "2022-02-14T00:57:32Z",
      "closedAt": "2022-02-14T00:57:32Z",
      "comments": [
        {
          "author": "ekr",
          "authorAssociation": "NONE",
          "body": "This seems to be using two meanings of the word \"proxy\" in a confusing way.\r\n\r\n1. An explicit HTTP server which is serving as the oblivious proxy\r\n2. A transparent TLS intercepting proxy.\r\n\r\nWhile there are existing explicit HTTP proxies as defined in 7230, they have different behavior and different syntax than is used here. I do not believe that if you just POST to them as defined in this document, it will have the expected behavior, so I do not believe that there is a concern about abuse of such servers/proxies. If I'm wrong, it would be helpful for you to walk through what you think will happen.\r\n\r\nYour concern seems to be that there might be a transparent TLS intercepting proxy in between the client and the O-HTTP proxy, and that that TLS proxy might not be able to determine that O-HTTP is in use. That seems like a somewhat different issue. Obscuring information from those proxies isn't a primary purpose of O-HTTP, but it's not clear to me we need to go out of our way to accommodate them, either.\r\n\r\n",
          "createdAt": "2021-06-28T12:24:28Z",
          "updatedAt": "2021-06-28T12:24:28Z"
        },
        {
          "author": "elear",
          "authorAssociation": "NONE",
          "body": "Hi EKR,\r\n\r\nI am speaking of an enterprise forward HTTP/TLS proxy.  Whether the proxy is explicitly configured via a configuration option or is routed to \"transparently\" with a root cert is not material to the issue.  The question is whether POST semantics, combined with the Host: header are being observed in that forward proxy element.   I am specifically referring to Steps 3 and 9 In Section 3 of the draft.  Most proxies I have used do observe these semantics, and have done for a long time.\r\n\r\nThe issue: before this change, there is no standard that transparently obscures information from such proxies (e.g., without the use of new methods).  With this change, information can be transparently obscured (e.g., using existing POST semantics).\r\n\r\nSolution: use a different method.\r\n",
          "createdAt": "2021-06-28T14:23:28Z",
          "updatedAt": "2021-06-28T14:23:28Z"
        },
        {
          "author": "ekr",
          "authorAssociation": "NONE",
          "body": "> I am speaking of an enterprise forward HTTP/TLS proxy. \r\n\r\nAgain, it would be helpful if you would not just say \"proxy\" here. In this topology, there are two proxies:\r\n\r\n```\r\nClient -> Enterprise TLS proxy -> O-HTTP Proxy -> Server\r\n```\r\n\r\nIn the case where you have:\r\n\r\n```\r\nClient -> Legacy Proxy -> Server\r\n```\r\n\r\nO-HTTP as specified in this draft will not work correctly, so this is not about repurposing existing proxies as O-HTTP proxies but *rather* about enterprise proxies trying to enforce policies that would prevent the use of O-HTTP with O-HTTP proxies.\r\n\r\n> Whether the proxy is explicitly configured via a configuration option or is routed to \"transparently\" with a root cert is not material to the issue.\r\n\r\nI'm not sure what you mean here. To the best of my knowledge nearly all (all?) of these proxies have to terminate TLS which requires a new trust anchor on the client. For obvious reasons, clients don't intentionally do TLS connections to the proxy directly, but rather try to TLS connect directly to the origin server. There are a number of ways to arrange for the TCP connection to go through the proxy (explicit 2817 CONNECT, IP routing, etc.) but that doesn't do anything to make the client want to TLS connect to the proxy.\r\n\r\nIn any case, as I said in my previous comment, obscuring information from those proxies isn't a primary purpose of O-HTTP, but it's not clear to me we need to go out of our way to accommodate them, either.\r\n\r\n\r\n\r\n",
          "createdAt": "2021-06-28T14:38:48Z",
          "updatedAt": "2021-06-28T14:38:48Z"
        },
        {
          "author": "ekr",
          "authorAssociation": "NONE",
          "body": "Also, as @chris-wood just pointed out to me, the Content Type is message/ohttp-req, so you can just inspect based on that. ",
          "createdAt": "2021-06-28T14:45:03Z",
          "updatedAt": "2021-06-28T14:45:03Z"
        },
        {
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "body": "> Solution: use a different method.\r\n\r\nWhy can't proxies just look at the [content type](https://datatracker.ietf.org/doc/html/draft-thomson-http-oblivious-01#section-7.1)? I don't see why we'd need more than one bit that says \"this is an OHTTP request.\"",
          "createdAt": "2021-06-28T14:45:06Z",
          "updatedAt": "2021-06-28T14:45:06Z"
        },
        {
          "author": "elear",
          "authorAssociation": "NONE",
          "body": "The point is what the status quo is.  They **could** look at the content type.  You could just as easily use a new method to maintain the status quo. How will we go contact all those companies and say, \"Go update your filter lists on content-type\"?",
          "createdAt": "2021-06-28T14:59:13Z",
          "updatedAt": "2021-06-28T14:59:13Z"
        },
        {
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "body": "> The point is what the status quo is. They could look at the content type. You could just as easily use a new method to maintain the status quo. \r\n\r\nThis seems like a recipe for stifling any sort of innovation and just ossifying around software that can't (or won't) change. ",
          "createdAt": "2021-06-28T15:04:47Z",
          "updatedAt": "2021-06-28T15:04:47Z"
        },
        {
          "author": "ekr",
          "authorAssociation": "NONE",
          "body": "I would echo what Chris Wood says here. Generally speaking, if you have an enforcement device built at time T at time T+1 there will be new content that it is unable to parse (and therefore inspect). As a concrete example, consider an adult content filter which attempts to look at images traversing it. However, new image formats such as AVIF are now rolling out, which means that the filter will no longer work properly. It's the burden of being this kind of transparent device that you have to be continuously updating to match the evolution of the Internet.\r\n\r\nMore generally, any device like this -- indeed any Internet connected device -- needs to be easily updateable and regularly updated for security vulnerabilities. If the vendors of these devices wish for them to block O-HTTP by default, then they should update their devices to do so. The IETF's interest is generally in things succeeding, so why should we be deciding to make them fail.\r\n\r\n",
          "createdAt": "2021-06-28T15:11:57Z",
          "updatedAt": "2021-06-28T15:11:57Z"
        },
        {
          "author": "elear",
          "authorAssociation": "NONE",
          "body": "Please let's not get hyperbolic.\r\n\r\nYou are **already** touching the client and are **already** creating a new architectural element (an oblivious proxy).  A new method is NOT stifling anything except where those who already have permission by some dint need it to be stifled.",
          "createdAt": "2021-06-28T16:03:03Z",
          "updatedAt": "2021-06-28T16:03:03Z"
        },
        {
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "body": "Quoting from [draft-ietf-httpbis-semantics](https://httpwg.org/http-core/draft-ietf-httpbis-semantics-latest.html#considerations.for.new.methods):\r\n\r\n> Standardized methods are generic; that is, they are potentially applicable to any resource, not just one particular media type, kind of resource, or application. As such, it is preferred that new methods be registered in a document that isn't specific to a single application or data format, since orthogonal technologies deserve orthogonal specification.\r\n\r\nIt seems that the proposal in this issue goes directly against this guidance. Hence, looking at the content type seems best for this and the other stated reasons.",
          "createdAt": "2021-06-28T16:20:32Z",
          "updatedAt": "2021-06-28T16:20:32Z"
        },
        {
          "author": "elear",
          "authorAssociation": "NONE",
          "body": "It's a fair point, but that \"should\" has to be balanced against the risks it introduces.",
          "createdAt": "2021-06-28T16:33:55Z",
          "updatedAt": "2021-06-28T16:33:55Z"
        },
        {
          "author": "elear",
          "authorAssociation": "NONE",
          "body": "Just on this:\r\n\r\n> More generally, any device like this -- indeed any Internet connected device -- needs to be easily updateable and regularly updated for security vulnerabilities. If the vendors of these devices wish for them to block O-HTTP by default, then they should update their devices to do so. The IETF's interest is generally in things succeeding, so why should we be deciding to make them fail.\r\n\r\nCan you explain how/why this mechanism would be used to update software/firmware? ",
          "createdAt": "2021-06-28T16:41:16Z",
          "updatedAt": "2021-06-28T16:41:16Z"
        },
        {
          "author": "ekr",
          "authorAssociation": "NONE",
          "body": "> Can you explain how/why this mechanism would be used to update software/firmware?\r\n\r\nYou're misunderstanding me. The point is that these devices already need to have some mechanism for remote updating. If they wish for their devices to block O-HTTP by default, then they should use that mechanism to update them to do so.\r\n",
          "createdAt": "2021-06-28T17:58:16Z",
          "updatedAt": "2021-06-28T17:58:16Z"
        },
        {
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "body": "I believe that the following text adequately addresses this concern:\r\n\r\n> Oblivious HTTP might be incompatible with network interception regimes, such as those that rely on configuring clients with trust anchors and intercepting TLS connections. While TLS might be intercepted successfully, interception middleboxes devices might not receive updates that would allow Oblivious HTTP to be correctly identified using the media types defined in [Section 7](https://ietf-wg-ohai.github.io/oblivious-http/draft-ietf-ohai-ohttp.html#media-types).\r\n\r\n-- https://ietf-wg-ohai.github.io/oblivious-http/draft-ietf-ohai-ohttp.html#section-10-2\r\n\r\nThat is, it doesn't attempt to fix the problem, but it identifies the nature of the problem.  The same problem (not being able to recognize the effect of the change) applies whether we use methods or media types.  It's *possible* that middleboxes are more likely to fail closed in the presence of an unknown method, but that's ossifying behaviour, not something that I think needs to be relied upon as I think this issue implies.\r\n\r\nI'm going to close this for now as I don't see any way, short of denying people the use of the protocol entirely, to address this issue in any more detail.",
          "createdAt": "2022-02-14T00:57:32Z",
          "updatedAt": "2022-02-14T00:57:32Z"
        }
      ]
    },
    {
      "number": 64,
      "id": "MDU6SXNzdWU5NTQzNDY5MDM=",
      "title": "Document trust assumptions",
      "url": "https://github.com/ietf-wg-ohai/oblivious-http/issues/64",
      "state": "CLOSED",
      "author": "chris-wood",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "There's some minimal number of trust assumptions needed to guarantee the desired security and privacy properties. We should note them.",
      "createdAt": "2021-07-27T23:48:40Z",
      "updatedAt": "2021-08-23T15:36:59Z",
      "closedAt": "2021-08-23T15:36:59Z",
      "comments": []
    },
    {
      "number": 66,
      "id": "MDU6SXNzdWU5NTUwMjg4MDQ=",
      "title": "Abuse-relevant headers added by proxy",
      "url": "https://github.com/ietf-wg-ohai/oblivious-http/issues/66",
      "state": "CLOSED",
      "author": "ShivanKaul",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "The draft currently says \"The oblivious proxy resource MUST NOT add information about the client to this request\". While identifying information would obviously defeat the whole point of OHTTP, it would be useful for the proxy to add some headers that would help the server with abuse mitigation while not revealing identity. \r\n\r\nFor a simple example, the proxy (which is IP address-aware) could add an `isMalicious` header if it sees a request from a known abusive IP address and then forward that to the server. The server could then use that signal + the contents of the request to determine what to do with the data (if it's telemetry, then it could choose not to count it). This would also be useful for shadowbanning clients, in which case you don't want the proxy to just outright reject the request. Importantly, the server doesn't come to know anything about the client other than the fact that the proxy thinks it is abusive (which doesn't split the anonymity set by too much \ud83d\ude05).  ",
      "createdAt": "2021-07-28T16:23:32Z",
      "updatedAt": "2022-06-17T12:03:52Z",
      "closedAt": "2022-06-17T12:03:20Z",
      "comments": [
        {
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "body": "This is a reasonable thing to do.  The question is how we can best frame this.  Implementing shadow bans by flagging requests seems like a good way to manage some aspects of this, but unbounded use of similar mechanisms could partition users too finely.  We should talk about this in a working group to understand it more completely.",
          "createdAt": "2021-08-02T04:10:37Z",
          "updatedAt": "2021-08-02T04:10:37Z"
        },
        {
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "body": "@martinthomson let's throw this one on the agenda for 113. ",
          "createdAt": "2022-02-14T23:17:55Z",
          "updatedAt": "2022-02-14T23:17:55Z"
        },
        {
          "author": "enygren",
          "authorAssociation": "NONE",
          "body": "As discussed in the OHAI discussion on ohai-oblivious-proxy-feedback, the general issue seems to be dealing with abuse in a privacy-preserving manner. It seems like the approaches are proxy->request_resource (eg, a client reputation bit) and a private request_resource->proxy channels (eg, this request may want to degrade client reputation) channel. Rate-limiting on the proxy is just one way to deal with bad reputation.\r\n\r\nFor request_resource->proxy it might be reasonable to have more than one bit (such as either a few bits of badness-level, or perhaps a vector indicating nature-of-badness which might include things like \"this request was expensive\", \"this request may have been malicious (eg, triggered a WAF rule)\", etc).\r\n\r\nProxies could potentially rate-limit clients that have a high ratio of responses \"suspicious\" responses to non-suspicious responses.  Proxies might also use some mixture of reputation information to inform what they send to the request_resource.\r\n\r\nNote that at least some CDN services doing client reputation tend to have a vector of reputations, and this blurs into the \"demographic\" topic.  Having a single bit might not be good enough to make good decisions in a fair manner.\r\n\r\nIt may be worth enumerating some use-cases (rate-limiting against DDoS attacks against a target, dealing with abusive clients/bots with bad reputation, etc) and to explore the design-space before jumping to a particular implementation.\r\n",
          "createdAt": "2022-03-23T14:43:40Z",
          "updatedAt": "2022-03-23T14:48:16Z"
        },
        {
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "body": "@ShivanKaul does #113 address this?",
          "createdAt": "2022-06-15T13:20:13Z",
          "updatedAt": "2022-06-15T13:20:13Z"
        },
        {
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "body": "Closing now that #113 has been merged. @ShivanKaul, feel free to reopen if more changes are desired.",
          "createdAt": "2022-06-17T12:03:20Z",
          "updatedAt": "2022-06-17T12:03:52Z"
        }
      ]
    },
    {
      "number": 70,
      "id": "MDU6SXNzdWU5NzcyMzAzMTk=",
      "title": "Accommodate additional data during request and response encapsulation?",
      "url": "https://github.com/ietf-wg-ohai/oblivious-http/issues/70",
      "state": "CLOSED",
      "author": "chris-wood",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Currently, encapsulation uses key configuration parameters for AAD. Should encapsulation also allow clients to include additional context (as needed?) in the AAD? Not that it's the best example, but consider the following scenario. \r\n\r\nClients encapsulate requests that need to be processed in near real time. There is no value in processing requests _after_ some amount of time has passed. To achieve this, clients could throw a timestamp in the encapsulated request, possibly via a header or something. Checking this timestamp requires decapsulation. A malicious proxy could store and then later re-forward requests to a target, causing it to do a lot of wasted work. (It would decrypt each delayed request, check the timestamp, and then throw away the request because too much time has passed for it to be useful.)\r\n\r\nOne alternative would be for the wrapping request to convey the timestamp, possibly also via a header. However, since nothing in the wrapping request is bound to the encapsulated request, it's possible for the proxy to simply lie about this value. \r\n\r\nIf clients could specify additional authenticated data in the encapsulated request, they could bind something like this timestamp to the encapsulated request. This would (a) prevent the proxy from lying and changing it, and (b) give the target a quick way to check if processing the request is useful.\r\n\r\n@martinthomson, what do you think?",
      "createdAt": "2021-08-23T16:52:55Z",
      "updatedAt": "2022-02-13T21:58:12Z",
      "closedAt": "2022-02-13T21:58:12Z",
      "comments": [
        {
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "body": "So there is a whole cluster of things that we might want to work through here.\r\n\r\nWhat sort of anti-replay mechanisms might we provide generically?  It seems like time of request is a universal here as that allows the server to limit the time over which it needs to track replays.  HTTP requests do not usually include `Date`, but we could ask that they do so for this usage, see [the Date definition](https://httpwg.org/http-core/draft-ietf-httpbis-semantics-latest.html#rfc.section.6.6.1.p.10).\r\n\r\nWhat meta-information would we expose to the proxy?  I'm not sure that anything here motivates us making more information available to the proxy.\r\n\r\nWhat information might we provide in the outer envelope that a receiving server (or oblivious request resource) might use to detect replay by the proxy.  For that, I don't think we need anything new.  Well-behaved clients will generate a new key encapsulation for every request, so it should be reasonable to expect that to be unique.  That would allow for replay detection without removing encapsulation.\r\n\r\nAny information that a server might use to avoid work short of removing encapsulation can be trivially forged or rewritten by a proxy.  We should also concede the possibility that a proxy is able to act as a client.",
          "createdAt": "2021-08-24T01:43:07Z",
          "updatedAt": "2021-08-24T01:43:07Z"
        },
        {
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "body": "Closing, as this has been directed elsewhere.",
          "createdAt": "2022-02-13T21:58:12Z",
          "updatedAt": "2022-02-13T21:58:12Z"
        }
      ]
    },
    {
      "number": 71,
      "id": "MDU6SXNzdWU5NzkyMzQ2MjU=",
      "title": "binary format: field values non-empty?",
      "url": "https://github.com/ietf-wg-ohai/oblivious-http/issues/71",
      "state": "CLOSED",
      "author": "reschke",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [],
      "body": "https://unicorn-wg.github.io/oblivious-http/draft-thomson-http-binary-message.html#name-header-and-trailer-field-li\r\n\r\n> Each field line includes a name and a value. Both the name and value are non-zero length sequences of bytes.\r\n\r\nThis seems to be inconsistent with https://greenbytes.de/tech/webdav/draft-ietf-httpbis-semantics-18.html#fields.values which allows empty values.",
      "createdAt": "2021-08-25T14:44:20Z",
      "updatedAt": "2021-08-26T06:23:59Z",
      "closedAt": "2021-08-25T22:28:52Z",
      "comments": [
        {
          "author": "martinthomson",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Yeah, easy mistake to make (more so because that is a silly property of HTTP).  I'll fix that.",
          "createdAt": "2021-08-25T22:26:32Z",
          "updatedAt": "2021-08-25T22:26:32Z"
        }
      ]
    },
    {
      "number": 72,
      "id": "MDU6SXNzdWU5ODAwNzM0MTE=",
      "title": "binary: discussion venue has incorrect mailing list information",
      "url": "https://github.com/ietf-wg-ohai/oblivious-http/issues/72",
      "state": "CLOSED",
      "author": "reschke",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2021-08-26T10:14:18Z",
      "updatedAt": "2021-08-27T01:16:16Z",
      "closedAt": "2021-08-27T01:16:16Z",
      "comments": [
        {
          "author": "martinthomson",
          "authorAssociation": "CONTRIBUTOR",
          "body": "The product of automation (which has since been tuned, so that this sort of error is less likely to occur).  A little annoying to fix, but I'll do that.",
          "createdAt": "2021-08-27T01:14:37Z",
          "updatedAt": "2021-08-27T01:14:37Z"
        }
      ]
    },
    {
      "number": 75,
      "id": "I_kwDOE6fLGM49uwfU",
      "title": "Consider making requests and responses more generic",
      "url": "https://github.com/ietf-wg-ohai/oblivious-http/issues/75",
      "state": "CLOSED",
      "author": "martinthomson",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [
        "help wanted"
      ],
      "body": "The current design allows just a single message in each direction.  This is fine for a range of use cases, but it falls short of achieving the full range of things that HTTP normally allows.  We might consider making the encapsulation of messages more generic to support this.  This requires a length delineation so that individual pieces can be managed, a means of updating nonces (primarily for responses, we can just continue to use the same HPKE context for requests), plus some means of marking messages as incomplete (or complete) in order to prevent truncation attacks.\r\n\r\nA streaming design would allow for messages to be incrementally processed.  It would also allow 1xx status codes to be generated and sent independent of final status codes.\r\n\r\nThe cost of this is overhead (the length delimiter) and complexity (nonces, truncation).",
      "createdAt": "2021-10-25T23:39:03Z",
      "updatedAt": "2022-06-17T02:02:52Z",
      "closedAt": "2022-06-17T02:02:52Z",
      "comments": [
        {
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "body": "For what it's worth, I don't think we should generalize this design, for three reasons: \r\n\r\n1. I'm not aware of any known use case that requires generic HTTP support.\r\n2. If an application _does_ require generic HTTP support, then it might be better served by using CONNECT or similar.\r\n3. This could probably be added in a future draft by extending the encapsulation mechanism in a backwards compatible way, maybe by introducing a label to denote the \"type\" of encapsulation applied?\r\n\r\nI'm curious to hear what others think!",
          "createdAt": "2022-03-11T23:05:19Z",
          "updatedAt": "2022-03-11T23:05:19Z"
        },
        {
          "author": "tfpauly",
          "authorAssociation": "COLLABORATOR",
          "body": "I agree I'd prefer to leave this complexity out. The single request-response setup also has a good privacy property of not including any metadata that can be linked across messages. For example, a server cannot measure the client RTT timings to try to locate clients if the server only ever sees one message and sends a reply. Once you change that property, you change a lot more assumptions.\r\n\r\nHaving a way to do this in the future is fine, but I don't know if we need a type field in the existing struct to do that. It could use a different media type.",
          "createdAt": "2022-03-12T00:53:31Z",
          "updatedAt": "2022-03-12T00:53:31Z"
        },
        {
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "body": "> Having a way to do this in the future is fine, but I don't know if we need a type field in the existing struct to do that. It could use a different media type.\r\n\r\nYeah, in hindsight, a type wouldn't make any sense unless it expressed something like \"I support these different formats, server please pick the one that you want to use!\" It would be simpler to just use a different media type here.",
          "createdAt": "2022-03-12T01:06:31Z",
          "updatedAt": "2022-03-12T01:06:31Z"
        },
        {
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "body": "So Tommy is right that if we have to do something in future, then it will be best as a new media type.  We could build something now into the one media type, but we'd need to be comfortable with the cost.\r\n\r\nIs there a particular concern about complexity/overhead/etc... that might be assuaged by having more details of the design?  FWIW, this same concern was raised when we did web push and the resolution there was to cabin the complexity and then profile it away.  I'm happy to do a write-up of a design that I think would be very simple to produce or process if that would help.",
          "createdAt": "2022-03-12T13:20:00Z",
          "updatedAt": "2022-03-12T13:20:00Z"
        },
        {
          "author": "tfpauly",
          "authorAssociation": "COLLABORATOR",
          "body": "The main thing concerning me is that the use cases I'm currently tracking and using this for are very specifically single-request/single-response models, and that assumption is baked into the analysis of what can be done with the protocol. For these use cases, having one peer try to send more messages for a single context would be something that I'd want to prohibit. At that point, I'd rather not have the code even support doing this for this media type, so that it's very easy and minimal to have a valid implementation of the protocol and ensure that it won't do something unexpected.\r\n\r\nAre we aware of any use case and adopter that currently wants more than the single request-response?",
          "createdAt": "2022-03-12T23:10:47Z",
          "updatedAt": "2022-03-12T23:10:47Z"
        },
        {
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "body": "How would you get from streaming requests or responses to having multiple messages?  Those are very different things.\r\n\r\nMaybe we got ourselves confused, but the \"generic\" aspect here is really about being able to incrementally send the same message (though HTTP has this weird idea that 1xx responses are discrete messages, I'm ignoring that; those are just streamed).  Let me see if I can sketch something out...",
          "createdAt": "2022-03-13T22:13:17Z",
          "updatedAt": "2022-03-13T22:13:17Z"
        },
        {
          "author": "tfpauly",
          "authorAssociation": "COLLABORATOR",
          "body": "Ah if this is just about streaming messages, that\u2019s more understandable. I think I was thrown off by the original comment starting with \u201cThe current design allows just a single message in each direction.\u201d, and assuming it was trying to more requests and responses. I\u2019d be curious to see what the design would be. ",
          "createdAt": "2022-03-14T02:04:42Z",
          "updatedAt": "2022-03-14T02:04:42Z"
        },
        {
          "author": "mnot",
          "authorAssociation": "NONE",
          "body": "My .02 -- If the cost is reasonable it's probably best to pay it now. If not, that's fine, but I'd ask that we be *very* careful with the messaging that this is some form of HTTP -- perhaps including the name.",
          "createdAt": "2022-03-22T00:06:11Z",
          "updatedAt": "2022-03-22T00:06:11Z"
        },
        {
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "body": "Discussion at IETF 113 tended toward a less general form, which would be informed by seeing a more worked design for streaming of requests and responses.  Some desired to keep things simple, as you will see on #108.\r\n\r\nOne idea, which @tfpauly suggested, was that we look at splitting the general thing out into a different media type, which could be negotiated.",
          "createdAt": "2022-03-28T03:10:58Z",
          "updatedAt": "2022-03-28T03:10:58Z"
        },
        {
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "body": "Closing out; I will open an issue to discuss how we might convey information about what media types are acceptable to an oblivious request resource.",
          "createdAt": "2022-06-17T02:02:52Z",
          "updatedAt": "2022-06-17T02:02:52Z"
        }
      ]
    },
    {
      "number": 76,
      "id": "I_kwDOE6fLGM49u0pF",
      "title": "Anti-replay affordances",
      "url": "https://github.com/ietf-wg-ohai/oblivious-http/issues/76",
      "state": "CLOSED",
      "author": "martinthomson",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [
        "help wanted"
      ],
      "body": "The current design doesn't add any data to requests, so servers are only able to provide anti-replay based on what they see: the encapsulation and the content of the HTTP request.\r\n\r\nOne common factor in anti-replay designs is time.  It is easier to apply anti-replay protections for timestamped requests as any state can be bounded in time: requests are rejected as being a replay if they fall outside a small time window.  Should we include a timestamp in requests?  Or, should we merely insist on the Date header field being present?  It is somewhat [unusual](https://httpwg.org/http-core/draft-ietf-httpbis-semantics-latest.html#rfc.section.6.6.1.p.10) for Date to be present on requests, but it is permitted.\r\n\r\nThe other thing to consider is clock drift.  TLS uses an anti-replay design that uses relative times, which means that only relative clock drift over a short time needs to be accounted for.  Here, we have no prior synchronization, so we are forced to use absolute times.  That likely means a greater allowance for clock drift.\r\n\r\nIt also likely means that we need to include a new signal to clients for when their time is so badly off that their requests are being rejected.  Experience shows that client clocks are terrifically bad, but given prompting they might be able to adjust to match the server clock.  We need to be *very* careful to ensure that this sort of signal is properly authenticated, so that if clients do retry requests, they aren't subject to attacks that might cause them to be complicit in generating a replay attack.\r\n\r\nWe might also consider a nonce or other anti-replay measures, but as clients are required to perform a new encapsulation for every request, the `enc` value can be used.\r\n\r\n(This issue is split from #70.)",
      "createdAt": "2021-10-26T00:14:59Z",
      "updatedAt": "2022-03-28T01:09:34Z",
      "closedAt": "2022-03-28T01:09:34Z",
      "comments": [
        {
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "body": "The most obvious mechanism here for protecting against anti-replay is a timestamp in combination with a per-entry nonce.\r\n\r\nThere are a few things to consider when deciding on how to encode the time.\r\n\r\n### Encrypted Timestamp\r\n\r\nThe first question is whether to encrypt the timestamp or not.  An encrypted timestamp would result in servers spending the cycles necessary to decrypt a request before they can be sure if it is a replay.  Each server will maintain nonces over a certain time window and discard requests that are fall outside this span (either earlier or later).\r\n\r\nAn encrypted timestamp means that a server can still use the nonce to determine if a request is a replay before decrypting.  However, requests from outside the time window will need to be decrypted to determine that they should be discarded.  This is more work.\r\n\r\nHowever, we should assume that - under normal operation - replays will be rare.  Clock skew is the obvious cause for a request falling outside of the time window that a server is tracking.  However, that only really points to a need for having a wider time window or feedback that allows client time to be corrected.  It's only the DoS cost that might play into a choice to avoid the extra computation cost.\r\n\r\nValidation of an HPKE-encrypted message is only possible after performing lots of work.  For an attacker looking to exhaust server computation resources, it is possible to just send a server complete garbage.  The server only learns that the message was garbage after performing an expensive key exchange and decryption.  A timestamp on the outside of the message doesn't save this, as this can be set to whatever value best suits the attacker.\r\n\r\nThat all leads me to suggest that including the timestamp under encryption is probably the best choice.\r\n\r\nAlso, if we want to provide an authenticated signal for clock skew errors, it will be easier to have the timestamp under protection.  Then, when the timestamp falls outside of the server time window, the server can generate an authenticated response.\r\n\r\n### Resolution\r\n\r\nUsing `enc` for the nonce part gives us a very high entropy value with very low collision probability.  That allows us to use a timestamp that is quite coarse.  The only reason we would want to increase clock resolution is so that servers can manage narrow anti-replay windows.\r\n\r\nBecause we are operating in near-real time, anti-replay windows need to be wide enough to allow for clock skew and not a lot else.  How much tolerance for clock skew we need will depend on whether we have good correction mechanisms in place.\r\n\r\nA coarser clock forces a server to maintain state for a slightly wider window, to allow for the requests within their target window to be adjusted by the coarseness of the clock.  For instance, if the desired window is 10 minutes and the clock resolution is 1 day, then the window is expanded to 2 days.  Thus, we should not reduce resolution too much.\r\n\r\nProvided that it is not too coarse, a coarse value reveals less about the clock of the client.  Though we cannot stop some information about the client clock from leaking, less information is better.  Note that we don't have to worry so much about values crossing thresholds (e.g., from one day to the next if the resolution is 1 day), as the server cannot link requests from the same client to use information about when it crosses that threshold.\r\n\r\nThis isn't that much value as clients are able to randomize their clock to obscure the true value.  This is likely to be very effective as a privacy protection as each request is handled in isolation.\r\n\r\n### Range\r\n\r\nIt must be possible to unambiguously represent any time in the period over which a server public key is valid.\r\n\r\nIf the range of possible timestamp values is shorter than the lifetime of a key, the same timestamp value might identify multiple times in the lifetime of that key.\r\n\r\nA 32-bit value in seconds covers 136 years.  If we take the low 32-bits of the current time in seconds, then a timestamp will be valid for multiple times 136 years apart.  That's probably long enough that a server should have replaced its public key.\r\n\r\nGiven what we know about public key usage in other contexts, it's probably wise to cover a period of multiple years.\r\n\r\n### Conclusion\r\n\r\nA 32-bit value in seconds is clearly good.  Clock skew in the order of a second is extremely common, so this doesn't significantly increase the state a server needs to maintain.\r\n\r\nIf we were to reduce the size to the next threshold and choose 24 bits, seconds doesn't work as that gives a range of only half a year.\r\n\r\nWe can expand that 32 times (i.e., 17 years) by shifting by 5 bits and having a resolution of 32 seconds.  That seems like a poor trade.  That's enough for anti-replay (17 years is far too long to hold onto the same key), but the shift by 5 is annoying to implement, and the space savings are hardly significant.  It also forces servers to keep state for a minimum period of 64 seconds, which is at the point that it could be longer than some servers would otherwise need to hold anti-replay state.  The only benefit is the reduction in timer resolution from clients.\r\n\r\nThe 32-bit value seems like the best answer.  It's simple and effective.  We can pack that in ahead of the request message and encrypt it.",
          "createdAt": "2021-12-13T06:09:23Z",
          "updatedAt": "2021-12-13T06:09:23Z"
        },
        {
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "body": "I agree with the conclusion to encrypt the timestamp (proxies don't really need it and it's very little extra work) and on the resolution (clients that want to hide information can mask out the lower bits), but not quite on the range. In particular:\r\n\r\n> It must be possible to unambiguously represent any time in the period over which a server public key is valid.\r\n\r\n\ud83d\udc4d given a validity window of length broken up into two windows represented by the same timestamp range, we don't want a replay from the first window to be valid in the second window.\r\n\r\n> Given what we know about public key usage in other contexts, it's probably wise to cover a period of multiple years.\r\n\r\n\ud83d\udc4e This is where I think we diverge. This seems to encourage poor key management practices. I'd prefer the spec take a stricter stance on this, and 24 bits seems like it would be quite reasonable in this regard. \r\n\r\nServers can make sensible choices about what state their willing to store based on anticipated clock skew in honest clients, but the spec ultimately needs to be robust against malicious clients replaying messages at arbitrary points in the future within the validity window of a public key. At the end of the day, this seems to boil down to how long we want or expect keys to be valid, and I'm just not comfortable with allowances for extremely long windows. ",
          "createdAt": "2021-12-13T15:01:48Z",
          "updatedAt": "2021-12-13T15:11:20Z"
        },
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Before designing a system, I think we should start by asking the threshold question of whether we need anti-replay at all.\r\n\r\nFirst, there are a number of systems which simply don't need it: anything that's idempotent on the server doesn't need replay detection. Even systems which are not idempotent quite likely have their own anti-replay mechanisms in order to deal with application-level replay conditions. For instance suppose that you have a telemetry or crash reporting system: you want it to be robust to transport-level failures which means that you keep retrying in the face of those failures. But the HTTP anti-replay mechanisms are at the TLS layer and so you also need application layer anti-replay.\r\n\r\nFinally, even if we *do* have an anti-replay mechanism at this layer, it's not going to be effective unless we provide strict application guidance. For instance, suppose that the proxy collects the client's message and then generates a transport error to force a replay at the client. If the client generates a new transaction (not unreasonable) then this won't trigger the anti-replay defenses. And of course if the client just re-sends the same message then the proxy learns information.\r\n\r\nFor these reasons, I think we should consider punting this entirely.\r\n\r\n\r\n",
          "createdAt": "2021-12-13T15:17:04Z",
          "updatedAt": "2021-12-13T15:17:04Z"
        },
        {
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "body": "I think it's true that we can't do much about replays of the same application data, since a server can't distinguish between the scenario you describe (proxy forces client to replay data with a new transaction) and a dishonest client that's simply replaying the same application data. But I think we can do something here about replays of the encapsulated requests. Whether or not we do seems to boil down to the threat model and the relative cost of attack. \r\n\r\nHow hard is it for an attacker to trigger these client-side replays? Trivial for the proxy, as noted, and certainly easier than transparently storing and replaying client requests in the future. However, the client does have to actively generate the new transaction, so it has the opportunity to try and detect this sort of misbehavior. (Whether or not it could distinguish between a maliciously truncated transport connection by an on-path attacker, a maliciously truncated connection by the proxy, or a legitimate error seems a separable question.)\r\n\r\nOn balance, I think the added complexity here is palatable for what can be a pretty trivial attack to be carried out by malicious proxies without the client seeing anything.",
          "createdAt": "2021-12-13T15:49:52Z",
          "updatedAt": "2021-12-13T15:49:52Z"
        },
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I certainly agree that the attack is trivial. My point is just that the application layer protocol that cares about replay will need A-R defenses anyway and so won't this be redundant?",
          "createdAt": "2021-12-13T15:59:05Z",
          "updatedAt": "2021-12-13T15:59:05Z"
        },
        {
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "body": "Possibly, yeah. We should work through some use cases to see if it's truly needed at this layer. ",
          "createdAt": "2021-12-13T16:05:09Z",
          "updatedAt": "2021-12-13T16:05:09Z"
        },
        {
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "body": "There's an alternative: we suggest/recommend that clients populate the `Date` header field in requests and allow/encourage the anti-replay to occur at the next layer up.  Parsing `Date` is annoying and error prone, but it would mean that the design is kept simple at this layer.",
          "createdAt": "2021-12-13T20:08:36Z",
          "updatedAt": "2021-12-13T20:08:36Z"
        },
        {
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "body": "@martinthomson that seems like a reasonable alternative! ",
          "createdAt": "2021-12-14T00:13:16Z",
          "updatedAt": "2021-12-14T00:13:16Z"
        }
      ]
    },
    {
      "number": 77,
      "id": "I_kwDOE6fLGM4-cEq7",
      "title": "Fixed mapping at the proxy",
      "url": "https://github.com/ietf-wg-ohai/oblivious-http/issues/77",
      "state": "CLOSED",
      "author": "martinthomson",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "The proxy has a fixed mapping.  It's resource maps to just one request resource.  That's a deliberate choice that we should probably be much more up front about.",
      "createdAt": "2021-11-08T14:53:14Z",
      "updatedAt": "2022-02-14T23:45:40Z",
      "closedAt": "2022-02-14T23:45:40Z",
      "comments": [
        {
          "author": "tfpauly",
          "authorAssociation": "COLLABORATOR",
          "body": "Yes, I think this makes sense, but it took me a while to realize it when implementing. Having a section on mapping state on the proxy would be useful.",
          "createdAt": "2021-11-08T14:55:02Z",
          "updatedAt": "2021-11-08T14:55:02Z"
        }
      ]
    },
    {
      "number": 78,
      "id": "I_kwDOE6fLGM4-cFEY",
      "title": "Use of binary HTTP",
      "url": "https://github.com/ietf-wg-ohai/oblivious-http/issues/78",
      "state": "CLOSED",
      "author": "martinthomson",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "The encapsulated payload could be something other than HTTP.  We should be clear about our decision to do that and how alternative payloads might be carried if people wanted to do that.",
      "createdAt": "2021-11-08T14:54:43Z",
      "updatedAt": "2022-02-07T03:39:10Z",
      "closedAt": "2022-02-07T03:39:10Z",
      "comments": [
        {
          "author": "tfpauly",
          "authorAssociation": "COLLABORATOR",
          "body": "The clear example here would be allowing just a DNS message body. As long as the client and target agreed, they could use that without the proxy knowing. We could just loosen the restrictions on what the body is, or we could use different content types (if you want the proxy to know what it is?).",
          "createdAt": "2021-11-08T15:05:23Z",
          "updatedAt": "2021-11-08T15:05:23Z"
        },
        {
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "body": "I think that the way you would do that is to define a new media type for DNS and then just go for it.  (Of course, you need to debate whether to include a length field and a transaction ID field.)  Maybe we don't need to do that in this draft, but we could explain how that might look.",
          "createdAt": "2021-11-08T17:35:48Z",
          "updatedAt": "2021-11-08T17:35:48Z"
        },
        {
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "body": "I'd do the following here (in line with #85): Replace `\"ohttp request\"` as the HPKE info string with the content-type of the inner message, be it `\"message/bhttp\"` or `\"application/dns-message\"`. That way, both client and target must agree on the type of encapsulated payload to actually use it. Thoughts?\r\n",
          "createdAt": "2022-02-04T02:51:43Z",
          "updatedAt": "2022-02-04T02:51:43Z"
        },
        {
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "body": "That might work.  We have \"ohttp response\" as the label for HKDF expansion on the response.  What would you include there?\r\n\r\nMaybe you should just extend with \"message/bhttp request\" and \"message/bhttp response\" and then the swapping in the media type becomes trivial.",
          "createdAt": "2022-02-04T05:21:38Z",
          "updatedAt": "2022-02-04T05:21:38Z"
        },
        {
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "body": "Yeah, that's what I had in mind.",
          "createdAt": "2022-02-05T22:31:58Z",
          "updatedAt": "2022-02-05T22:31:58Z"
        }
      ]
    },
    {
      "number": 79,
      "id": "I_kwDOE6fLGM4-dfg1",
      "title": "longer list of use cases and conditions where oblivious-http would help",
      "url": "https://github.com/ietf-wg-ohai/oblivious-http/issues/79",
      "state": "CLOSED",
      "author": "npdoty",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [],
      "body": "I recognize that #42 / #44 added some conditions and use cases, but it would help readers like me to have even more. A separate explainer document/readme would be fine too.\r\n\r\nIn the meeting chat today, I heard the suggestion of requesting map tiles as another use case, which makes sense to me: asking for map tiles is itself pretty revealing if connected to the user's identity (it might reveal your current location, or a location where you're going to be) and can be pretty transactional/stateless. Maybe search queries are similar. Safe browsing lookups was also mentioned.\r\n\r\nHaving more example use cases might help in resolving other questions, like whether to support multiple HTTP requests at a time, or non-HTTP message bodies, etc. Ideally, we could explain the conditions under which adoption of ohttp will be useful -- maybe, a privacy need for reducing linkability of multiple requests or of a single request from user identity, and HTTP requests that are typically stateless or single-shot in some way, and frequent or performant-requiring at a certain level.",
      "createdAt": "2021-11-08T21:06:05Z",
      "updatedAt": "2022-02-14T22:56:14Z",
      "closedAt": "2022-02-14T22:56:14Z",
      "comments": [
        {
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "body": "@martinthomson added some more examples. @npdoty, I think we can safely close this now, so I'm going to go ahead and do that. Please reopen with concrete suggestions if you think the new text is insufficient!",
          "createdAt": "2022-02-14T22:56:11Z",
          "updatedAt": "2022-02-14T22:56:11Z"
        }
      ]
    },
    {
      "number": 85,
      "id": "I_kwDOE6fLGM5AMWTW",
      "title": "Pin encapsulation type to message/bhttp",
      "url": "https://github.com/ietf-wg-ohai/oblivious-http/issues/85",
      "state": "CLOSED",
      "author": "chris-wood",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "With #83, we're enforcing a 1:1 mapping between message/ohttp-req and message/bhttp, but we don't have any cryptographic enforcement of this pairing. If someone were to reuse the encapsulation mechanism in this document with another message type, say, to encapsulate application/dns-message values with a application/oblivious-dns-message wrapper, then we'd probably want to ensure that targets can't get confused between these two types. We could use the HPKE info string to separate these two protocols. (This is related to #54.)",
      "createdAt": "2021-12-10T15:43:16Z",
      "updatedAt": "2022-02-07T03:39:09Z",
      "closedAt": "2022-02-07T03:39:09Z",
      "comments": []
    },
    {
      "number": 89,
      "id": "I_kwDOE6fLGM5ARX75",
      "title": "Time correction for anti-replay",
      "url": "https://github.com/ietf-wg-ohai/oblivious-http/issues/89",
      "state": "CLOSED",
      "author": "martinthomson",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [
        "help wanted"
      ],
      "body": "In #76 and #88, we're talking about adding a timestamp to requests.  The problem with that is that - unlike TLS - we don't have any way to correct for gross clock errors.\r\n\r\nTLS manages this easily by leveraging a previous session to make that correction, reducing any relative clock error to the amount of drift over the week that a ticket can be used for early data.  This design has nothing like that it can use.\r\n\r\nTo correct for clock errors, we should think about whether the server should be able to signal that the request was rejected as a result of the time being too far out of synchronization.",
      "createdAt": "2021-12-13T09:43:52Z",
      "updatedAt": "2022-03-28T01:09:35Z",
      "closedAt": "2022-03-28T01:09:35Z",
      "comments": [
        {
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "body": "The problem with allowing a server to correct your time is that you might be tricked into setting a time that is useful for tracking you.  To that end, if we build a mechanism we need either to recommend that clients :\r\n\r\n1. seek an independent and trustworthy source of time rather than use any time that the server has provided; that is, the signal is an error code, without a direct means of correcting client time\r\n\r\n2. only use any server-provided time correction for an immediate retry; clients cannot remember that time for any requests that they wish to remain unlinked to the original; that is, it might be OK for a retry to be linked to the first attempt, but clients should not allow server-provided information to affect multiple requests",
          "createdAt": "2021-12-13T23:30:10Z",
          "updatedAt": "2021-12-13T23:30:10Z"
        }
      ]
    },
    {
      "number": 100,
      "id": "I_kwDOE6fLGM5GN188",
      "title": "Adding demographic metadata (e.g., geo)",
      "url": "https://github.com/ietf-wg-ohai/oblivious-http/issues/100",
      "state": "CLOSED",
      "author": "ekr",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "The text says:\r\n\r\n>  The oblivious proxy resource MUST NOT add\r\n>   information about the client to this request.\r\n\r\nThis seems perhaps too strong. One might imagine wanting to for instance indicate the geographic location of the client at some broad granularity. \r\n\r\nMore generally, the client depends on correct proxy behavior and obviously this MUST doesn't guarantee actual compliance, so perhaps we should just remove the MUST in favor of a description of the implications of various choices. See also issue #66 ",
      "createdAt": "2022-03-23T12:11:20Z",
      "updatedAt": "2022-06-17T02:01:35Z",
      "closedAt": "2022-06-17T02:01:35Z",
      "comments": []
    },
    {
      "number": 101,
      "id": "I_kwDOE6fLGM5GN2TG",
      "title": "Do we really need two protocol definition languages",
      "url": "https://github.com/ietf-wg-ohai/oblivious-http/issues/101",
      "state": "CLOSED",
      "author": "ekr",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "This document uses both TLS-style and HTTPS binary message. Could we settle on one?\r\n\r\nPerhaps the TLS-style because we are sharing PDUs with other HPKE-using stuff.",
      "createdAt": "2022-03-23T12:12:43Z",
      "updatedAt": "2022-03-28T15:06:24Z",
      "closedAt": "2022-03-28T15:06:24Z",
      "comments": [
        {
          "author": "tfpauly",
          "authorAssociation": "COLLABORATOR",
          "body": "Isn't all of the specification in this document using TLS-style for the structs? Binary HTTP is just one (default) payload content type that can be carried, it's not really a definition of OHTTP.\r\n\r\nCan you clarify more what you mean?",
          "createdAt": "2022-03-23T12:17:04Z",
          "updatedAt": "2022-03-23T12:17:04Z"
        },
        {
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I guess this isn't BINARY, but rather the QUIC format. I plead it being early morning\r\n\r\n```\r\n   Encapsulated Request {\r\n     Key Identifier (8),\r\n     KEM Identifier (16),\r\n     KDF Identifier (16),\r\n     AEAD Identifier (16),\r\n     Encapsulated KEM Shared Secret (8*Nenc),\r\n     AEAD-Protected Request (..),\r\n   }\r\n```",
          "createdAt": "2022-03-23T13:10:09Z",
          "updatedAt": "2022-03-23T13:14:01Z"
        },
        {
          "author": "tfpauly",
          "authorAssociation": "COLLABORATOR",
          "body": "Ah got it. Then aligning the styles makes sense, without changing the actual structs themselves.",
          "createdAt": "2022-03-23T13:20:59Z",
          "updatedAt": "2022-03-23T13:20:59Z"
        }
      ]
    },
    {
      "number": 102,
      "id": "I_kwDOE6fLGM5GN2r5",
      "title": "Need encryption on one side of the proxy",
      "url": "https://github.com/ietf-wg-ohai/oblivious-http/issues/102",
      "state": "CLOSED",
      "author": "ekr",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "> A proxy MUST NOT add information about the client identity when forwarding\r\nrequests. This includes the Via field, the Forwarded field\r\n{{?FORWARDED=RFC7239}}, and any similar information.  A client does not depend\r\non the proxy using an authenticated and encrypted connection to the oblivious\r\nrequest resource, only that information about the client not be attached to\r\nforwarded requests.\r\n\r\nObviously, you need encryption on one or the other side of the proxy, right? Probably this document should require it on the inbound side, but I don't see the text that requires it. Did I just miss it?\r\n",
      "createdAt": "2022-03-23T12:14:14Z",
      "updatedAt": "2022-03-28T15:21:51Z",
      "closedAt": "2022-03-28T15:21:51Z",
      "comments": [
        {
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "body": "Yeah, it's only necessary on the inbound side, per the analysis, though the document assumes it's on both sides.",
          "createdAt": "2022-03-28T15:19:54Z",
          "updatedAt": "2022-03-28T15:19:54Z"
        }
      ]
    },
    {
      "number": 103,
      "id": "I_kwDOE6fLGM5GN3Cy",
      "title": "Editorial: move the diagram up?",
      "url": "https://github.com/ietf-wg-ohai/oblivious-http/issues/103",
      "state": "CLOSED",
      "author": "ekr",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "It seems like the glossary would be easier to read if Figure 1 was shown before, thus making the terms clearer. Happier to submit a PR if that would help",
      "createdAt": "2022-03-23T12:15:34Z",
      "updatedAt": "2022-03-28T15:06:26Z",
      "closedAt": "2022-03-28T15:06:26Z",
      "comments": []
    },
    {
      "number": 105,
      "id": "I_kwDOE6fLGM5GOAZA",
      "title": "Move to flexible mappings",
      "url": "https://github.com/ietf-wg-ohai/oblivious-http/issues/105",
      "state": "CLOSED",
      "author": "ekr",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "> This protocol assumes a fixed, one-to-one mapping between the Oblivious Proxy\r\nResource and the Oblivious Request Resource. This means that any encapsulated\r\nrequest sent to the Oblivious Proxy Resource will always be forwarded to the\r\nOblivious Request Resource. This constraint was imposed to simplify proxy\r\nconfiguration and mitigate against the Oblivious Proxy Resource being used as\r\na generic proxy for unknown Oblivious Request Resources. The proxy will only\r\nforward for Oblivious Request Resources that it has explicitly configured and\r\nallowed.\r\n\r\nThis seems like it's pretty inflexible. I wonder if maybe a compromise would be some kind of URL pattern?\r\n",
      "createdAt": "2022-03-23T12:49:54Z",
      "updatedAt": "2022-03-28T15:07:15Z",
      "closedAt": "2022-03-28T15:07:15Z",
      "comments": [
        {
          "author": "tfpauly",
          "authorAssociation": "COLLABORATOR",
          "body": "I agree that it's written as very inflexible \u2014 I'd be happy to see this change for wording.\r\n\r\nI've personally interpreted this, though, to mean that the mapping *could* coincide with a URI template, but it's up to the proxy of what to do.\r\n\r\nSo, one proxy could say:\r\n\r\n`https://proxy.oblivious.net/foo` maps to `https://target.example.com/bar`\r\n\r\nBut another could say:\r\n\r\n`https://proxy.oblivious.net/target.example.com/bar` maps to `https://target.example.com/bar`\r\n\r\nBoth of these are 1:1 technically. The latter case needs to be careful that it has correct ACLs to not allow arbitrary access, but it's still a mapped resource.",
          "createdAt": "2022-03-23T13:05:45Z",
          "updatedAt": "2022-03-23T13:05:45Z"
        }
      ]
    },
    {
      "number": 106,
      "id": "I_kwDOE6fLGM5GOhU8",
      "title": "Proxies are not generic intermediaries",
      "url": "https://github.com/ietf-wg-ohai/oblivious-http/issues/106",
      "state": "CLOSED",
      "author": "chris-wood",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "From Vienna chat. A proxy is _not_ a generic HTTP intermediary, and therefore is not subject to the same rules.",
      "createdAt": "2022-03-23T14:35:15Z",
      "updatedAt": "2022-03-28T15:21:51Z",
      "closedAt": "2022-03-28T15:21:51Z",
      "comments": [
        {
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "body": "From @tfpauly: \r\nGeneric proxies would forward unknown HTTP headers between clients and targets. We should be very clear that oblivious proxies are not generic, and should not be doing things like forwarding unknown headers arbitrarily between client and target, or target and client.\r\n\r\n",
          "createdAt": "2022-03-23T14:37:29Z",
          "updatedAt": "2022-03-23T14:37:29Z"
        }
      ]
    },
    {
      "number": 107,
      "id": "I_kwDOE6fLGM5GOhoL",
      "title": "Clarify that an oblivious proxy should not be forwarding headers",
      "url": "https://github.com/ietf-wg-ohai/oblivious-http/issues/107",
      "state": "CLOSED",
      "author": "tfpauly",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Generic proxies would forward unknown HTTP headers between clients and targets. We should be very clear that oblivious proxies are not generic, and should not be doing things like forwarding unknown headers arbitrarily between client and target, or target and client.",
      "createdAt": "2022-03-23T14:36:10Z",
      "updatedAt": "2022-03-23T14:37:20Z",
      "closedAt": "2022-03-23T14:37:19Z",
      "comments": [
        {
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "body": "Dupe of #106.",
          "createdAt": "2022-03-23T14:37:19Z",
          "updatedAt": "2022-03-23T14:37:19Z"
        }
      ]
    },
    {
      "number": 114,
      "id": "I_kwDOE6fLGM5GjNzF",
      "title": "Proxies must treat target signals independently from client requests",
      "url": "https://github.com/ietf-wg-ohai/oblivious-http/issues/114",
      "state": "CLOSED",
      "author": "chris-wood",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Something that came up during Vienna during the rate limiting topic is how these signals are consumed and acted upon by proxies. We know that the proxy sending additional bits per client might allow the target to partition the anonymity set to detrimental effect. But we haven't fully explored how target->proxy signals, like rate limits, are consumed and applied. \r\n\r\nGenerally speaking, I think that proxies need to act on any target->proxy signals independently of client requests, as otherwise a target can use this signal to try and partition the anonymity set. That means, for example, that a proxy should not apply rate limits to just one bad-behaving client, but apply limits uniformly across all client requests.",
      "createdAt": "2022-03-28T15:49:40Z",
      "updatedAt": "2022-07-05T12:19:29Z",
      "closedAt": "2022-07-05T12:19:29Z",
      "comments": [
        {
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "body": "Do you mean the oblivious request resource -> oblivious proxy resource hop?  The target can't communicate with the proxy; anything it sends is encapsulated (which is why Tiru wanted a new header field that breaks out of that encapsulation).\r\n\r\nThe most obvious example (see [Erik's comment](https://github.com/ietf-wg-ohai/oblivious-http/issues/66#issuecomment-1076457765)) is that a particular request is identified as abusive somehow.  Letting the proxy know, so that it might treat that client differently, is the entire goal of that process.  And I don't think that there is any inherent risk of that being tied to an individual request.  Though I think that this is unlike the CDN reputation case where a set of attributes is forwarded along with a request; the goal here is to have the proxy do the extra work of offloading requests by blocking or slowing them.  I guess that slowing requests might have an observable effect through the timestamps.\r\n\r\nThere is a second piece, which is not request-related.  A server might become overloaded and need to tell the proxy to slow down in the aggregate.  A holistic signal makes sense there.",
          "createdAt": "2022-03-28T22:54:12Z",
          "updatedAt": "2022-03-28T22:54:12Z"
        },
        {
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "body": "> Do you mean the oblivious request resource -> oblivious proxy resource hop? The target can't communicate with the proxy; anything it sends is encapsulated (which is why Tiru wanted a new header field that breaks out of that encapsulation).\r\n\r\nSurely the target can communicate with the proxy -- it just adds a header, just like Tiru did. \r\n\r\n> The most obvious example (see https://github.com/ietf-wg-ohai/oblivious-http/issues/66#issuecomment-1076457765) is that a particular request is identified as abusive somehow. Letting the proxy know, so that it might treat that client differently, is the entire goal of that process. And I don't think that there is any inherent risk of that being tied to an individual request.\r\n\r\nYes, I understand the goal, but I'm saying that goals runs contrary to the competing privacy goal of OHTTP, which is to maintain client<>request unlinkability. \r\n\r\nAs a simple example, consider the following scenario. There are three clients C1, C2, and C3 sending requests to a target through a proxy in rounds. In each round, the target can guess which request corresponds to which client with some probability. Absent any information about the client, the target guesses correctly with probability 1/3. \r\n\r\nNow let's assume the proxy flags one request from one client Ci in round j with the shadowban bit. The target, in response, decides it's going to apply some rate limit or otherwise ask the proxy to treat the client differently. And let's say it does that by banning Ci from sending a request in round j+1.\r\n\r\nNow, in round j+1, the target sees only two requests. If all requests were unlinkable, the probability that the target could correctly guess the client for each request in j+1 _and_ j would be 1/9 (=1/3 * 1/3). But that's not the case anymore, since the target knows the requests in j+1 correspond to the unflagged requests in round j. \r\n\r\nThis is all pretty farfetched, but I think the core idea is simply that the proxy allowed the target to partition the anonymity set by applying per-client actions _at request of the target_. Balancing abuse and privacy here seems pretty challenging. ",
          "createdAt": "2022-03-28T23:04:14Z",
          "updatedAt": "2022-03-28T23:04:14Z"
        },
        {
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "body": "> it just adds a header\r\n\r\nThe response from the target will be encapsulated, so new headers will be hidden from the proxy.  What Tiru was suggesting was that we teach the response resource to recognize a header that is not encapsulated, but copied to the outer envelope instead.\r\n\r\n> the probability that the target could correctly guess the client for each request in j+1 and j would be 1/9 (=1/3 * 1/3). But that's not the case anymore\r\n\r\nIsn't this exactly the sort of thing that we're warning about when we say that every bit can split the client population in half?  That speaks to a similar restriction on per-response entropy as exists on requests.  The question whether this is orthogonal (and additive) or correlated (and therefore not able to divide the client population again).",
          "createdAt": "2022-03-29T00:02:46Z",
          "updatedAt": "2022-03-29T00:02:46Z"
        },
        {
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "body": "> The response from the target will be encapsulated, so new headers will be hidden from the proxy. What Tiru was suggesting was that we teach the response resource to recognize a header that is not encapsulated, but copied to the outer envelope instead.\r\n\r\nYes, I'm saying this header is _not_ encapsulated. \ud83d\udc4d \r\n\r\n> Isn't this exactly the sort of thing that we're warning about when we say that every bit can split the client population in half? That speaks to a similar restriction on per-response entropy as exists on requests. The question whether this is orthogonal (and additive) or correlated (and therefore not able to divide the client population again).\r\n\r\nWell, sort of. Perhaps restricting per-response entropy will help, but I think this needs more analysis. In any case, if the proxy does not treat client requests _independently_ of what information it learns from the target, then things start becoming correlated. I'd prefer we not just overlook this relationship as we reason about (a) what information proxies (and targets) can send to targets (and proxies, respectively), and (b) how the recipient of that entity uses the information.\r\n\r\nAs of now, I think applying per-client restrictions to requests upon being signaled from the target is harmful (see scenario described above).",
          "createdAt": "2022-03-29T00:08:49Z",
          "updatedAt": "2022-04-04T03:15:15Z"
        },
        {
          "author": "tireddy2",
          "authorAssociation": "NONE",
          "body": "We updated draft-rdb-ohai-feedback-to-proxy to handle both server overload and malicious clients attacking the server scenarios. The latter case is tricky as it can be potentially abused to identify a client. We proposed the following changes to address this attack: \r\n\r\n   1:  Indicates that RateLimit fields are applicable to all the clients\r\n      that are serviced by the same Oblivious proxy.\r\n\r\n   2:  Indicates that RateLimit fields are applicable only to the\r\n      offending client.  For example, this value is used if the client\r\n      is attacking the server (e.g., the client is using an abnormal\r\n      header that matches an attack pattern).  The Oblivious proxy can\r\n      shadowban requests from the offending client for a certain\r\n      duration instead of rate-limiting the requests when the client has\r\n      a high ratio of malicious requests to legitimate requests.\r\n\r\n",
          "createdAt": "2022-06-15T14:39:06Z",
          "updatedAt": "2022-06-15T14:39:06Z"
        },
        {
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "body": "The second value of the \"ohttp-target\" parameter seems to be the problematic case here, as described earlier in this issue. @tireddy2, do you think it's safe (from a client privacy perspective) for the proxy to change its behavior on a per-client basis?",
          "createdAt": "2022-06-15T16:21:02Z",
          "updatedAt": "2022-06-15T16:21:02Z"
        },
        {
          "author": "tireddy2",
          "authorAssociation": "NONE",
          "body": "Yes, the second value can be potentially abused by the target. However, the proxy does not immediately act on the second value to rate-limit the traffic from the client but starts maintaining a count of responses to the client with \"ohttp-target\" parameter set to 2 (potential malcious-requests) and responses without the parameter (legitimate-requests). If the client has a high ratio of malicous-requests to legitimate-requests, it can shadow requests from the offending client for certain duration. \r\nA typical botnet attacking the server would not send a single malicious request but multiple requests from the same client and from multiple clients to overload the server. The target has no clue if the requests are coming from the same client or different clients and the proxy is using the second value only as a hint to determine the client reputation score and act accordingly at a later time. \r\n\r\nDo you think the proposed mechanism is safe to protect the client privacy or it can possibly be abused by the target ?",
          "createdAt": "2022-06-16T05:56:32Z",
          "updatedAt": "2022-06-16T05:56:32Z"
        },
        {
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "body": "So I'm seeing some fairly positive things in the new version of the feedback draft.  What I think we should do is first take this discussion to the mailing list, but then talk about whether just providing rate limiting signals is the right approach or whether a more generic communication path needs to be established.\r\n\r\nRate limiting does allow us to address a good number of the use cases we have identified so far, but it could be constraining if we find that request resources need to be updated piecemeal to enable new use cases later.  A more generic signaling scheme might relieve some of that pressure.\r\n\r\nIt might be that all we need is a negotiation system whereby the request resource signals what it is willing to keep outside of encapsulation and the target then uses those.  Given likely deployment scenarios, that might work even without signaling in some cases, but a more explicit scheme might be better for interoperability.",
          "createdAt": "2022-06-17T04:39:08Z",
          "updatedAt": "2022-06-17T04:39:08Z"
        },
        {
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "body": "> Do you think the proposed mechanism is safe to protect the client privacy or it can possibly be abused by the target ?\r\n\r\nNo, I don't, as [demonstrated above](https://github.com/ietf-wg-ohai/oblivious-http/issues/114#issuecomment-1081235293). \r\n\r\n> So I'm seeing some fairly positive things in the new version of the feedback draft. What I think we should do is first take this discussion to the mailing list, but then talk about whether just providing rate limiting signals is the right approach or whether a more generic communication path needs to be established.\r\n> \r\n> Rate limiting does allow us to address a good number of the use cases we have identified so far, but it could be constraining if we find that request resources need to be updated piecemeal to enable new use cases later. A more generic signaling scheme might relieve some of that pressure.\r\n> \r\n> It might be that all we need is a negotiation system whereby the request resource signals what it is willing to keep outside of encapsulation and the target then uses those. Given likely deployment scenarios, that might work even without signaling in some cases, but a more explicit scheme might be better for interoperability.\r\n\r\nI don't think the question is whether rate limits are sufficient for the use cases we care about. As described [via example above](https://github.com/ietf-wg-ohai/oblivious-http/issues/114#issuecomment-1081235293), the relevant question here seems to be whether the signals from target to proxy -- whatever they may be, and however they may be sent -- can be used to further partition the client anonymity set. ",
          "createdAt": "2022-06-17T11:58:06Z",
          "updatedAt": "2022-06-17T11:58:06Z"
        },
        {
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "body": "Fair.  So what does a system that looks good look like?  Do we have to frame differential treatment in terms of things that the client accepts, just like we do for added information?  Because we might frame differential treatment as being roughly equated to adding information to requests.",
          "createdAt": "2022-06-17T12:37:15Z",
          "updatedAt": "2022-06-17T12:37:15Z"
        },
        {
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "body": "> Do we have to frame differential treatment in terms of things that the client accepts, just like we do for added information? Because we might frame differential treatment as being roughly equated to adding information to requests.\r\n\r\nThis would be a reasonable framing, yeah. Something something \"if you misuse this proxy, you run the risk of revealing information to the target\"?",
          "createdAt": "2022-06-17T12:39:45Z",
          "updatedAt": "2022-06-17T12:39:45Z"
        },
        {
          "author": "tireddy2",
          "authorAssociation": "NONE",
          "body": "> > Do you think the proposed mechanism is safe to protect the client privacy or it can possibly be abused by the target ?\r\n> \r\n> No, I don't, as [demonstrated above](https://github.com/ietf-wg-ohai/oblivious-http/issues/114#issuecomment-1081235293).\r\n\r\nIn your example of three clients, the proxy does not rate-limit the requests from client C1 based on a single feedback from proxy. The proxy will block traffic from C1 only after it sees such a feedback signal for multiple requests from C1. Assuming the threshold is 10 requests, the probability score will be (0.000016) to send successive 10 feedback signals to C1. The mechanism only works if the target sees an attack pattern or garbage data in multiple requests from C1. An legitimate client will never send requests which are linkable unlike a malicious client which will send malformed requests. ",
          "createdAt": "2022-06-19T07:35:31Z",
          "updatedAt": "2022-06-19T07:35:31Z"
        },
        {
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "body": "@tireddy2 Well, this is different from the example I proposed. Nevertheless, I'm not convinced this changes the situation in any meaningful way. I think we need to be clear about the risks here, and stating them in a way like @martinthomson proposed seems like a good way to do that.",
          "createdAt": "2022-06-20T12:03:38Z",
          "updatedAt": "2022-06-20T12:03:38Z"
        },
        {
          "author": "tireddy2",
          "authorAssociation": "NONE",
          "body": "> @tireddy2 Well, this is different from the example I proposed. Nevertheless, I'm not convinced this changes the situation in any meaningful way. I think we need to be clear about the risks here, and stating them in a way like @martinthomson proposed seems like a good way to do that.\r\n\r\nAgreed, I was trying to show the proposed mechanism does not adversely impact the privacy of legitimate clients. ",
          "createdAt": "2022-06-20T12:41:36Z",
          "updatedAt": "2022-06-20T12:41:36Z"
        },
        {
          "author": "tireddy2",
          "authorAssociation": "NONE",
          "body": "> So I'm seeing some fairly positive things in the new version of the feedback draft. What I think we should do is first take this discussion to the mailing list, but then talk about whether just providing rate limiting signals is the right approach or whether a more generic communication path needs to be established.\r\n> \r\n> Rate limiting does allow us to address a good number of the use cases we have identified so far, but it could be constraining if we find that request resources need to be updated piecemeal to enable new use cases later. A more generic signaling scheme might relieve some of that pressure.\r\n> \r\n> It might be that all we need is a negotiation system whereby the request resource signals what it is willing to keep outside of encapsulation and the target then uses those. Given likely deployment scenarios, that might work even without signaling in some cases, but a more explicit scheme might be better for interoperability.\r\n\r\nSounds good, we can introduce a new header (e.g., h=header1:header2:header3) for the request resource to signal that it will keep header1, header2 and header3 outside of the encapsulation so the target can decide to use those headers. RateLimit-Limit can be one of the headers to start with. \r\n",
          "createdAt": "2022-06-20T13:03:22Z",
          "updatedAt": "2022-06-20T13:03:22Z"
        },
        {
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "body": "> Agreed, I was trying to show the proposed mechanism does not adversely impact the privacy of legitimate clients.\r\n\r\nSorry, but I don't think this is true. I'm saying that we've _not_ demonstrated this to be the case, and the burden is on us to do so if we are to recommend it in the spec.",
          "createdAt": "2022-06-20T13:04:27Z",
          "updatedAt": "2022-06-20T13:04:27Z"
        },
        {
          "author": "tireddy2",
          "authorAssociation": "NONE",
          "body": "> > Agreed, I was trying to show the proposed mechanism does not adversely impact the privacy of legitimate clients.\r\n> \r\n> Sorry, but I don't think this is true. I'm saying that we've _not_ demonstrated this to be the case, and the burden is on us to do so if we are to recommend it in the spec.\r\n\r\nSure, the onus will anyway be on draft-rdb-ohai-feedback-to-proxy to prove it is privacy preserving.",
          "createdAt": "2022-06-21T05:54:02Z",
          "updatedAt": "2022-06-21T05:54:02Z"
        }
      ]
    },
    {
      "number": 115,
      "id": "I_kwDOE6fLGM5HTMby",
      "title": "Define the proxy resource",
      "url": "https://github.com/ietf-wg-ohai/oblivious-http/issues/115",
      "state": "CLOSED",
      "author": "bemasc",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [],
      "body": "The text currently says that clients POST to \"a target URI of the oblivious proxy resource\", but this URI is not defined anywhere, nor is there any explanation of how the proxy learns the request resource URI.  The only hint about this is in the appendix, which is also inscrutable or perhaps contradictory.",
      "createdAt": "2022-04-07T15:29:58Z",
      "updatedAt": "2022-06-16T00:49:32Z",
      "closedAt": "2022-06-16T00:49:32Z",
      "comments": [
        {
          "author": "tfpauly",
          "authorAssociation": "COLLABORATOR",
          "body": "This seems related to what was clarified with #105.\r\n\r\nThe client does a POST to the proxy, and the proxy must already have a mapping from that resource to a target resource.",
          "createdAt": "2022-04-07T17:20:30Z",
          "updatedAt": "2022-04-07T17:20:30Z"
        },
        {
          "author": "bemasc",
          "authorAssociation": "NONE",
          "body": "OK, then I would just like a clarification to Appendix A to explain what is being mapped to what.",
          "createdAt": "2022-04-07T18:25:21Z",
          "updatedAt": "2022-04-07T18:25:21Z"
        }
      ]
    },
    {
      "number": 116,
      "id": "I_kwDOE6fLGM5IbH48",
      "title": "Client or User Agent?",
      "url": "https://github.com/ietf-wg-ohai/oblivious-http/issues/116",
      "state": "CLOSED",
      "author": "ioggstream",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [],
      "body": "## Question\r\n\r\nsince there are various layers, the term \"client\" can be applicable to both the oblivious proxy/request resource. \r\n\r\nMaybe the term User agent can be appropriate when we refer to the originating client?",
      "createdAt": "2022-04-25T21:33:32Z",
      "updatedAt": "2022-04-27T23:24:23Z",
      "closedAt": "2022-04-27T23:24:23Z",
      "comments": [
        {
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "body": "Hi Roberto,\r\n\r\nDoes https://github.com/ietf-wg-ohai/oblivious-http/pull/117 clarify things?  I think that \"client\" still makes a lot of sense here, but you are right that this is not an HTTP client in the strictest sense.  (Although, now that I write this, it really is, it's just that this uses something other than a connection as a medium from getting a request to the server...)",
          "createdAt": "2022-04-26T07:30:23Z",
          "updatedAt": "2022-04-26T07:30:23Z"
        }
      ]
    },
    {
      "number": 118,
      "id": "I_kwDOE6fLGM5Iggsn",
      "title": "Do you really need to use Alt-Used as an example",
      "url": "https://github.com/ietf-wg-ohai/oblivious-http/issues/118",
      "state": "CLOSED",
      "author": "LPardue",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [],
      "body": "Alt-Used sticks out to me. So I looked for whether Alt-Svc is some prerequisite for oblivious HTTP and it doesn't seem so. \r\n\r\nI'm not sure many folks would be that familiar with Alt-Used, [why make them think ](https://en.m.wikipedia.org/wiki/Don't_Make_Me_Think) ? Is there some other, more familiar, filed that you could use as an example?",
      "createdAt": "2022-04-26T21:11:54Z",
      "updatedAt": "2022-06-17T12:02:57Z",
      "closedAt": "2022-06-17T12:02:57Z",
      "comments": []
    },
    {
      "number": 121,
      "id": "I_kwDOE6fLGM5L6cda",
      "title": "Improve terminology",
      "url": "https://github.com/ietf-wg-ohai/oblivious-http/issues/121",
      "state": "CLOSED",
      "author": "chris-wood",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "We need to improve the terminology in this draft. In particular, we need a distinguished term for the request to the proxy, which includes the encapsulated request, as well as a distinguished term for the inner request from client to target. ",
      "createdAt": "2022-06-16T14:04:24Z",
      "updatedAt": "2022-07-05T12:03:41Z",
      "closedAt": "2022-07-05T12:03:41Z",
      "comments": [
        {
          "author": "LPardue",
          "authorAssociation": "CONTRIBUTOR",
          "body": "This would IMO help. There seems to be important security properties related to demarcation between the requests and having terms that could lead to ambiguity doesn't seem good.",
          "createdAt": "2022-06-16T14:08:54Z",
          "updatedAt": "2022-06-16T14:08:54Z"
        },
        {
          "author": "tfpauly",
          "authorAssociation": "COLLABORATOR",
          "body": "I personally used the following terms when I implemented the client-side:\r\n\r\n- \"Oblivious Request\" is the encrypted message that goes from the client to the proxy\r\n- \"Oblivious Response\" is the encrypted message that goes from the proxy to the client\r\n\r\nI didn't have terms for the inner requests and responses \u2014 the response was just a \"decrypted response\". But using \"inner\" might make sense, or \"plaintext\"?",
          "createdAt": "2022-06-16T15:59:08Z",
          "updatedAt": "2022-06-16T15:59:08Z"
        },
        {
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "body": "inner = encapsulated\r\nouter = oblivious\r\n\r\nThese all work for me.",
          "createdAt": "2022-06-17T02:12:30Z",
          "updatedAt": "2022-06-17T02:12:30Z"
        },
        {
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "body": "Hrm, on reflection, I don't think \"oblivious request\" and \"oblivious response\" will work for the client<>proxy messages, since oblivious request means something else in this document (the resource that decrypts the encapsulated request for the target). I have an alternative proposal in #121 that I think better describes the different requests and resources based on what they're doing.",
          "createdAt": "2022-06-27T13:30:59Z",
          "updatedAt": "2022-06-27T13:31:12Z"
        }
      ]
    },
    {
      "number": 122,
      "id": "I_kwDOE6fLGM5L9XoM",
      "title": "What (encrypted) media types are acceptable",
      "url": "https://github.com/ietf-wg-ohai/oblivious-http/issues/122",
      "state": "CLOSED",
      "author": "martinthomson",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "We are defining a media type here that has some limitations (mostly lack of streaming, #75).  If we want to define a more capable media type, what would the system need to do to allow that to happen?\r\n\r\nAt face value, this seems simple: the oblivious request resource consumes the media type.  It already needs to make its key known to clients, so adding a set of acceptable media types to that information seems entirely reasonable.\r\n\r\nQuestions:\r\n\r\n* Should we enrich the key configuration with other meta-information?  Or is this supplementary information?\r\n* Is there any value in an in-band signaling mechanism?  We've already seen that feedback about time is ...challenging.\r\n* Supported media types convey information that might be used to distinguish clients in the same way that key selection could.  What do we need to do about ensuring consistency?",
      "createdAt": "2022-06-17T02:07:28Z",
      "updatedAt": "2022-07-11T02:51:17Z",
      "closedAt": "2022-07-11T02:51:17Z",
      "comments": [
        {
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "body": "Since OHTTP is meant for specific applications, this seems like something the client and server ought to know a priori, unlike the specific key configuration. I don't think we need to make any changes here.",
          "createdAt": "2022-06-17T12:07:24Z",
          "updatedAt": "2022-06-17T12:07:24Z"
        },
        {
          "author": "tfpauly",
          "authorAssociation": "COLLABORATOR",
          "body": "So far, the models I've seen would know the media type a priori. So, I'd agree with Chris for this.",
          "createdAt": "2022-06-17T15:51:00Z",
          "updatedAt": "2022-06-30T21:01:41Z"
        },
        {
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "body": "OK, let's put this to bed then.  I've work to do on something more sophisticated for a streaming design, but this isn't critical for that.",
          "createdAt": "2022-07-11T02:51:17Z",
          "updatedAt": "2022-07-11T02:51:17Z"
        }
      ]
    },
    {
      "number": 124,
      "id": "I_kwDOE6fLGM5MXIwP",
      "title": "Bad test vectors for client",
      "url": "https://github.com/ietf-wg-ohai/oblivious-http/issues/124",
      "state": "CLOSED",
      "author": "mingtaoy",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [],
      "body": "In \"Appendix A. Complete Example of a Request and Response\", when describing the client HPKE context setup:\r\n\r\n> This context is constructed from the following ephemeral public key:\r\n>     25845c6ed6802abfd09628b5c677842b10dd53a3aad5775aa3c20cbae1c0cb65\r\n> The corresponding private key is:\r\n>    88894d1fb4e76e215d9d9c87c44d9e0a6053c1c84c836a4106ea547344504658\r\n\r\n> Applying the Seal operation from the HPKE context produces an encrypted message, allowing the client to construct the following encapsulated request:\r\n\r\n>   010020000100012485c2eee03135aac82e572d51639b2e141102c431d544e346\r\n>   0a0784a908b41b676943ae0b3ed8eff581ee8be5f47303a314de092e2e27e3f0\r\n>   2a03b9357de1d414cadacabaa1621cf9\r\n\r\nThis test vector looks wrong. If I'm understanding the format correctly, the encapsulated request should contain the encoded ephemeral public key (`enc`) following the key configuration that the client selects.\r\n\r\nThe string given implies that the client ephemeral public key is `2485c2eee03135aac82e572d51639b2e141102c431d544e3460a0784a908b41b`, which is not equal to `25845c6ed6802abfd09628b5c677842b10dd53a3aad5775aa3c20cbae1c0cb65`.\r\n\r\nBased on the comments that these values were generated from https://github.com/martinthomson/ohttp, I can see that the `rust-hpke` version does not utilize the [keypair supplied by the test harness](https://github.com/martinthomson/ohttp/blob/11218fa089055476ac35b13a7aee66cbff886dbf/ohttp/src/rh/hpke.rs#L172-L173), whereas the [NSS version does](https://github.com/martinthomson/ohttp/blob/11218fa089055476ac35b13a7aee66cbff886dbf/ohttp/src/nss/hpke.rs#L118).\r\n\r\nThis is visible in the result:\r\n\r\n```\r\n# Running with NSS\r\n$ RUST_LOG=ohttp cargo test --features nss,client,server --no-default-features -p ohttp -\\-lib -\\- -\\-nocapture request_response\r\n   Compiling ohttp v0.1.0 (/mnt/quickcode/ohttp/ohttp)\r\n    Finished test [unoptimized + debuginfo] target(s) in 0.42s\r\n     Running unittests src/lib.rs (target/debug/deps/ohttp-06023bcac1d000ea)\r\n\r\nrunning 1 test\r\n[TRACE ohttp::nss::hpke] Generated key pair: sk=PrivateKey 53a2a4b5ab0d91ed4d873683851bd83fb3a840bb16fa983e8e7b6dd25d0ccf1d pk=PublicKey d474edfb24507d97776e5242ccbe537753d5607c2648a722e3d92973ddbcc81d\r\n[TRACE ohttp::test] Config: 010020d474edfb24507d97776e5242ccbe537753d5607c2648a722e3d92973ddbcc81d00080001000100010003\r\n[TRACE ohttp::nss::hpke] Generated key pair: sk=PrivateKey 1c46414f7b5c3ae7ba2a481b468490a5c7eebea1d6dbee49133294d348055a98 pk=PublicKey 8b56b67ec0baf962bf214b9b5c44aa96e4fe7f643dfe7c554e2a45201bbb575e\r\n[TRACE ohttp::test] Request: 00034745540568747470730b6578616d706c652e636f6d012f\r\n[TRACE ohttp::test] Encapsulated Request: 010020000100018b56b67ec0baf962bf214b9b5c44aa96e4fe7f643dfe7c554e2a45201bbb575e4773a2615b809e23b5f9935460fe71d121a5dc643bc3b30526a89b4958e3cf53120ecc5c9bc628874c\r\n[TRACE ohttp::nss::hkdf] HKDF extract: salt=8b56b67ec0baf962bf214b9b5c44aa96e4fe7f643dfe7c554e2a45201bbb575e04f905ca28bf886e232e52ef0e27a90b ikm=a1ad98ec9478dcae4800323e2447b821 prk=212b0bd56dc01db8d87786a66e27107746f3671601aeb7627416ae172a2ddb73\r\n[TRACE ohttp::nss::hkdf] HKDF expand_key: prk=212b0bd56dc01db8d87786a66e27107746f3671601aeb7627416ae172a2ddb73 info=6b6579 okm=ce80721e68af62973b2dab6d7ad57396\r\n[TRACE ohttp::nss::hkdf] HKDF expand_data: prk=212b0bd56dc01db8d87786a66e27107746f3671601aeb7627416ae172a2ddb73 info=6e6f6e6365 okm=121d389d1ba91aead6561cc9\r\n[TRACE ohttp::nss::aead] New AEAD: key=ce80721e68af62973b2dab6d7ad57396 nonce_base=121d389d1ba91aead6561cc9\r\n[TRACE ohttp::test] Encapsulated Response: 04f905ca28bf886e232e52ef0e27a90ba3ffa5d6791ff0464f43b53540996c71213917\r\n[TRACE ohttp::nss::hkdf] HKDF extract: salt=8b56b67ec0baf962bf214b9b5c44aa96e4fe7f643dfe7c554e2a45201bbb575e04f905ca28bf886e232e52ef0e27a90b ikm=a1ad98ec9478dcae4800323e2447b821 prk=212b0bd56dc01db8d87786a66e27107746f3671601aeb7627416ae172a2ddb73\r\n[TRACE ohttp::nss::hkdf] HKDF expand_key: prk=212b0bd56dc01db8d87786a66e27107746f3671601aeb7627416ae172a2ddb73 info=6b6579 okm=ce80721e68af62973b2dab6d7ad57396\r\n[TRACE ohttp::nss::hkdf] HKDF expand_data: prk=212b0bd56dc01db8d87786a66e27107746f3671601aeb7627416ae172a2ddb73 info=6e6f6e6365 okm=121d389d1ba91aead6561cc9\r\n[TRACE ohttp::nss::aead] New AEAD: key=ce80721e68af62973b2dab6d7ad57396 nonce_base=121d389d1ba91aead6561cc9\r\n[TRACE ohttp::test] Response: 0140c8\r\ntest test::request_response ... ok\r\n\r\ntest result: ok. 1 passed; 0 failed; 0 ignored; 0 measured; 19 filtered out; finished in 0.06s\r\n```\r\n(Note the presence of `8b56b67ec0baf962bf214b9b5c44aa96e4fe7f643dfe7c554e2a45201bbb575e`, the client ephemeral public key in the Encapsulated Request)\r\n\r\ncompared to the rust-hpke version:\r\n\r\n```\r\n$ RUST_LOG=ohttp cargo test --features rust-hpke,client,server --no-default-features -p ohttp -\\-lib -\\- -\\-nocapture request_response\r\n   Compiling ohttp v0.1.0 (/mnt/quickcode/ohttp/ohttp)\r\n    Finished test [unoptimized + debuginfo] target(s) in 0.58s\r\n     Running unittests src/lib.rs (target/debug/deps/ohttp-2f1c06ca734a0e41)\r\n\r\nrunning 1 test\r\n[TRACE ohttp::rh::hpke] Generated key pair: sk=PrivateKey 0847d7930831f6e3b47a224f7b6701e8c56422a96ed74469ae6c086e6558f476 pk=PublicKey fe24c796be9f91097e52984e1be6cab287c0898d17386b8ae9253bdeda3e3a76\r\n[TRACE ohttp::test] Config: 010020fe24c796be9f91097e52984e1be6cab287c0898d17386b8ae9253bdeda3e3a7600080001000100010003\r\n[TRACE ohttp::rh::hpke] Generated key pair: sk=PrivateKey 9034a8653e53df664ac266e47d5e8bcacea7bffefa051ea7f3158347e7688f5a pk=PublicKey 0b78d06a8f630a9bc2640ac8bc211b2bec516b858159ae2ea612d25c2b59dc57\r\n[TRACE ohttp::test] Request: 00034745540568747470730b6578616d706c652e636f6d012f\r\n[TRACE ohttp::test] Encapsulated Request: 01002000010001534e54c797e20ac2451f7adc64763087f90cb221a850160c52f94b14dd02086cbbb9931ccf58f65af528495905b5eaf288e11aed832610fa89a06c732d85a712bd58fc4a6dc5dac4fe\r\n[TRACE ohttp::rh::hkdf] HKDF extract: salt=534e54c797e20ac2451f7adc64763087f90cb221a850160c52f94b14dd02086cf8d785aba84e4130b74b37ff69e246f5 ikm=SymKey 23cc85bffa2c5dfd21169cb0fd61b453 prk=SymKey 8de46a943a76598aa22f300521331c2d290741bee7adb97bc8715c2789bf27e7\r\n[TRACE ohttp::rh::hkdf] HKDF expand_data: prk=SymKey 8de46a943a76598aa22f300521331c2d290741bee7adb97bc8715c2789bf27e7 info=6b6579 len=16 okm=\"f8056d2c40b034ab1dbad7f0db4de138\"\r\n[TRACE ohttp::rh::hkdf] HKDF expand_key: prk=SymKey 8de46a943a76598aa22f300521331c2d290741bee7adb97bc8715c2789bf27e7 info=6b6579 okm=SymKey f8056d2c40b034ab1dbad7f0db4de138\r\n[TRACE ohttp::rh::hkdf] HKDF expand_data: prk=SymKey 8de46a943a76598aa22f300521331c2d290741bee7adb97bc8715c2789bf27e7 info=6e6f6e6365 len=12 okm=\"36d86055e14d76a1feacd150\"\r\n[TRACE ohttp::test] Encapsulated Response: f8d785aba84e4130b74b37ff69e246f5acdb6fc42b7a1b6d504b8ef1cd26c9ce5a13bc\r\n[TRACE ohttp::rh::hkdf] HKDF extract: salt=534e54c797e20ac2451f7adc64763087f90cb221a850160c52f94b14dd02086cf8d785aba84e4130b74b37ff69e246f5 ikm=SymKey 23cc85bffa2c5dfd21169cb0fd61b453 prk=SymKey 8de46a943a76598aa22f300521331c2d290741bee7adb97bc8715c2789bf27e7\r\n[TRACE ohttp::rh::hkdf] HKDF expand_data: prk=SymKey 8de46a943a76598aa22f300521331c2d290741bee7adb97bc8715c2789bf27e7 info=6b6579 len=16 okm=\"f8056d2c40b034ab1dbad7f0db4de138\"\r\n[TRACE ohttp::rh::hkdf] HKDF expand_key: prk=SymKey 8de46a943a76598aa22f300521331c2d290741bee7adb97bc8715c2789bf27e7 info=6b6579 okm=SymKey f8056d2c40b034ab1dbad7f0db4de138\r\n[TRACE ohttp::rh::hkdf] HKDF expand_data: prk=SymKey 8de46a943a76598aa22f300521331c2d290741bee7adb97bc8715c2789bf27e7 info=6e6f6e6365 len=12 okm=\"36d86055e14d76a1feacd150\"\r\n[TRACE ohttp::test] Response: 0140c8\r\ntest test::request_response ... ok\r\n\r\ntest result: ok. 1 passed; 0 failed; 0 ignored; 0 measured; 11 filtered out; finished in 0.00s\r\n```\r\n\r\n(Note the lack of `0b78d06a8f630a9bc2640ac8bc211b2bec516b858159ae2ea612d25c2b59dc57` in the encapsulated request).",
      "createdAt": "2022-06-22T22:39:46Z",
      "updatedAt": "2022-06-27T03:02:29Z",
      "closedAt": "2022-06-27T03:02:29Z",
      "comments": [
        {
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "body": "Wow, thanks for the detailed report @mingtaoy.  I can indeed see that there is a bug of some sort with the rust-hpke version of my code.  I will look into that.\r\n\r\nAs for the draft, it's probably down to a transcription error on my part.  I'll double-check and maybe redo the example.",
          "createdAt": "2022-06-22T23:38:44Z",
          "updatedAt": "2022-06-22T23:38:44Z"
        },
        {
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "body": "OK, I can explain the apparent bug in the rust-hpke version of the code now.  See https://github.com/martinthomson/ohttp/issues/18 for details on that bit.  I'll get a patch up for that, but the upshot there is that the rust-hpke version won't be able to log client keys any more.\r\n\r\nThe rest of this is likely down to me failing to transcribe the messages properly.  I'll put up a pull request with updated values.",
          "createdAt": "2022-06-23T04:21:24Z",
          "updatedAt": "2022-06-23T04:21:24Z"
        },
        {
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "body": "> As for the draft, it's probably down to a transcription error on my part. I'll double-check and maybe redo the example.\r\n\r\nI think this one is on me, @martinthomson =)",
          "createdAt": "2022-06-24T13:07:01Z",
          "updatedAt": "2022-06-24T13:07:01Z"
        }
      ]
    },
    {
      "number": 126,
      "id": "I_kwDOE6fLGM5Mgz4G",
      "title": "intro: Without a limited ability?",
      "url": "https://github.com/ietf-wg-ohai/oblivious-http/issues/126",
      "state": "CLOSED",
      "author": "LPardue",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [],
      "body": "> This information allows the client to make a request of an oblivious target resource without that resource having only a limited ability to correlate that request with the client IP or other requests that the client might make to that server.\r\n\r\nseems like a typo",
      "createdAt": "2022-06-24T12:07:31Z",
      "updatedAt": "2022-06-24T12:13:58Z",
      "closedAt": "2022-06-24T12:13:58Z",
      "comments": [
        {
          "author": "LPardue",
          "authorAssociation": "NONE",
          "body": "nvm, I was looking at an old version, this seems fixed in the editors copy",
          "createdAt": "2022-06-24T12:13:56Z",
          "updatedAt": "2022-06-24T12:13:56Z"
        }
      ]
    },
    {
      "number": 128,
      "id": "I_kwDOE6fLGM5MpQ03",
      "title": "Incorrect size of test vector X25519 secret key",
      "url": "https://github.com/ietf-wg-ohai/oblivious-http/issues/128",
      "state": "CLOSED",
      "author": "NickR23",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [],
      "body": "Hey,\r\nI may be wrong here, but the X25519 secret listed in [the test vectors](https://github.com/ietf-wg-ohai/oblivious-http/blob/main/draft-ietf-ohai-ohttp.md#complete-example-of-a-request-and-response) is the wrong size. \r\n\r\n>To begin the process, the oblivious request resource generates a key pair. In this example the server chooses DHKEM(X25519, HKDF-SHA256) and generates an X25519 key pair {{?X25519=RFC7748}}. The X25519 secret key is:\r\n\r\n>`e7693e454a94d999836f25294518c687b6ed95c1fcf6b0b93c71202793182`\r\n\r\nThis key is 61 characters long. The correct length should be 64 chars (32 bytes).\r\n\r\nThanks! \r\n",
      "createdAt": "2022-06-27T14:22:05Z",
      "updatedAt": "2022-06-28T15:18:24Z",
      "closedAt": "2022-06-28T15:18:24Z",
      "comments": [
        {
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "body": "Thanks @NickR23 -- we'll investigate. As a followup question, I'm wondering how you caught this. Are you actually verifying the test vector? Are they in a form that's easy for you to do that, or do you think something different would be better?",
          "createdAt": "2022-06-27T17:43:46Z",
          "updatedAt": "2022-06-27T17:43:46Z"
        },
        {
          "author": "NickR23",
          "authorAssociation": "NONE",
          "body": "I'm converting the test vectors from hex strings to a buffer of raw bytes for testing my implementation, where \r\n`buffer.size() == x25519Secret.len() / 2`.\r\nSince the string has an odd number of chars, the buffer size was a byte too small so I got a buffer overflow.\r\n\r\nOther than that the format of the test vectors is perfect!\r\n\r\nThanks following up",
          "createdAt": "2022-06-27T18:48:18Z",
          "updatedAt": "2022-06-27T18:48:18Z"
        },
        {
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "body": "Once again, the copy-paste demon strikes.  That's likely my fault.  I'll make another set.",
          "createdAt": "2022-06-28T01:23:59Z",
          "updatedAt": "2022-06-28T01:23:59Z"
        }
      ]
    },
    {
      "number": 131,
      "id": "I_kwDOE6fLGM5NR9c8",
      "title": "keyID, etc., is not bound into enc_response",
      "url": "https://github.com/ietf-wg-ohai/oblivious-http/issues/131",
      "state": "CLOSED",
      "author": "davidben",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [],
      "body": "Section 4.1 seems to incorporates a bunch of information into the `enc_request` computation:\r\n\r\n```\r\nenc, context = SetupBaseS(pkR, \"message/bhttp request\")\r\naad = concat(encode(1, keyID),\r\n             encode(2, kemID),\r\n             encode(2, kdfID),\r\n             encode(2, aeadID))\r\nct = context.Seal(aad, request)\r\nenc_request = concat(aad, enc, ct)\r\n```\r\n\r\nHowever, since that context is in the `aad` parameter of `Seal`, and not the `info` parameter to `Setup`, that same information doesn't figure into `enc_response`:\r\n\r\n```\r\nsecret = context.Export(\"message/bhttp response\", Nk)\r\nresponse_nonce = random(max(Nn, Nk))\r\nsalt = concat(enc, response_nonce)\r\nprk = Extract(salt, secret)\r\naead_key = Expand(prk, \"key\", Nk)\r\naead_nonce = Expand(prk, \"nonce\", Nn)\r\nct = Seal(aead_key, aead_nonce, \"\", response)\r\nenc_response = concat(response_nonce, ct)\r\n```\r\n\r\nThis is a bit odd because `keyID`, etc., also apply to the response. Should those be moved to the `info` parameter instead?\r\n\r\n(Although, of those four fields, I think only authenticating `keyID` does anything. The three algorithm IDs already figure into the HPKE suite ID. Was the intention to authenticate the `OHTTP Key Config` instead?)",
      "createdAt": "2022-07-06T22:26:05Z",
      "updatedAt": "2022-07-11T02:51:27Z",
      "closedAt": "2022-07-11T02:51:27Z",
      "comments": [
        {
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "body": "The intent was to belt and braces this, but yeah, it seems like we missed the braces part.  A zero-length AAD is somewhat appealing when we already need to provide an info parameter, this would just make it a configurable one.\r\n\r\nI'm thinking \"message/bhttp request\" (the current info string), a 0 byte (to follow patterns elsewhere), and then the current AAD.  Then make the AAD zero length.\r\n\r\nThe only thing that gives me pause is that we already have an analysis that supports the current design.  That suggests that a tighter design might work, but @chris-wood might know how hard it would be to re-tool for a tweak.",
          "createdAt": "2022-07-07T01:51:59Z",
          "updatedAt": "2022-07-07T01:51:59Z"
        },
        {
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "body": "I don't think moving the current AAD to the info parameter has a meaningful improvement beyond aesthetics, so I would be fine with this change. Updating the models should be pretty straightforward. (There is a ProVerif one not yet on GitHub, but I hope it will be soon.)\n\nAs David points out, the HPKE parameters are already implicitly authenticated by way of agreement on the HPKE context. I would claim the keyID is also implicitly authenticated in this way, since the keyID determines the private key used to produce the shared HPKE context. \n\nThe exception here being the case where there are two distinct keyID values that correspond to the same private key. In that case, if the response was generated _without_ examining the request, then it would be possible for client and gateway to disagree on the keyID value used. Would this actually happen in practice? Doubtful, but fixing by moving the AAD around does the trick. ",
          "createdAt": "2022-07-07T02:06:04Z",
          "updatedAt": "2022-07-07T02:06:04Z"
        }
      ]
    },
    {
      "number": 135,
      "id": "I_kwDOE6fLGM5Nfoli",
      "title": "Move media type registration template to iana considerations",
      "url": "https://github.com/ietf-wg-ohai/oblivious-http/issues/135",
      "state": "CLOSED",
      "author": "martinthomson",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "In reading through this, it is really distracting to have these massive sections full of N/A in the document.  Moving them means more connective tissue (forward references, section headings), but it should make this stuff get in the way less.",
      "createdAt": "2022-07-11T02:59:40Z",
      "updatedAt": "2022-08-02T08:15:37Z",
      "closedAt": "2022-08-02T08:15:37Z",
      "comments": [
        {
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "body": "@martinthomson I suggest we do this _during_ WGLC, unless you want to do it before cutting the next version.",
          "createdAt": "2022-08-01T14:07:33Z",
          "updatedAt": "2022-08-01T14:07:33Z"
        }
      ]
    },
    {
      "number": 136,
      "id": "I_kwDOE6fLGM5NfowT",
      "title": "Request-date reference",
      "url": "https://github.com/ietf-wg-ohai/oblivious-http/issues/136",
      "state": "CLOSED",
      "author": "martinthomson",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "There is a bunch of stuff that we normatively depend on regarding the use of Date.  As it seems like request-date isn't going anywhere, we should pull in the relevant pieces instead.",
      "createdAt": "2022-07-11T03:01:16Z",
      "updatedAt": "2022-07-26T18:21:42Z",
      "closedAt": "2022-07-26T18:21:42Z",
      "comments": [
        {
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "body": "That sounds reasonable like a reasonable way to unblock us and make forward progress.",
          "createdAt": "2022-07-18T16:08:35Z",
          "updatedAt": "2022-07-18T16:08:35Z"
        },
        {
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "body": "Addressed by #137.",
          "createdAt": "2022-07-26T18:21:42Z",
          "updatedAt": "2022-07-26T18:21:42Z"
        }
      ]
    },
    {
      "number": 139,
      "id": "I_kwDOE6fLGM5ObPeI",
      "title": "Client should not buffer encrypted request messages",
      "url": "https://github.com/ietf-wg-ohai/oblivious-http/issues/139",
      "state": "CLOSED",
      "author": "ShivanKaul",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "1. Let's say HPKE public key A was valid from 2022-07-01 to 2022-07-02. The client encapsulates a request X using pubkey A, but buffers it because of network issues, in order to retry later.\r\n2. Now it rotates and public key B is valid as of 2022-07-03. \r\n3. X encapsulated using pubkey A would not be decryptable by pubkey B. So if you receive X on 2022-07-03, then you know that X was generated between 2022-07-01 and 2022-07-02.",
      "createdAt": "2022-07-23T23:14:36Z",
      "updatedAt": "2022-08-02T08:14:06Z",
      "closedAt": "2022-08-02T08:14:06Z",
      "comments": [
        {
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "body": "I'm not inclined to add this.  \"Don't do that\" seems pretty obvious to me, especially when we recommend that requests include a Date.",
          "createdAt": "2022-07-24T18:58:11Z",
          "updatedAt": "2022-07-24T18:58:11Z"
        },
        {
          "author": "tfpauly",
          "authorAssociation": "COLLABORATOR",
          "body": "While this advice seems fine, I agree that it's not really necessary. It also brings up more questions to me \u2014 what stops any layer below the OHTTP layer or an intermediary from arbitrarily buffering messages?\r\n\r\nMaybe just have a note that the key config that's used as well as explicit date markings can leak the time that the request was generated?",
          "createdAt": "2022-07-25T14:09:58Z",
          "updatedAt": "2022-07-25T14:09:58Z"
        },
        {
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "body": "> Maybe just have a note that the key config that's used as well as explicit date markings can leak the time that the request was generated?\r\n\r\nThis seems like a reasonable way to deal with the problem. Liveness information can leak in a number of places, including through noting which public key was used. It might also leak via the date. Maybe this can become part of the differential treatment section?\r\n\r\n> Differential treatment may also occur based on the time time at which requests are generated. The liveness of this information may be revealed through the public key used to encapsulate a request or through the Date header that is attached to a request in the event of a client retry. Clients should account for this risk when using a particular relay and gateway.",
          "createdAt": "2022-07-25T14:16:34Z",
          "updatedAt": "2022-07-26T18:23:02Z"
        },
        {
          "author": "ShivanKaul",
          "authorAssociation": "CONTRIBUTOR",
          "body": "That sounds good to me",
          "createdAt": "2022-07-25T14:20:13Z",
          "updatedAt": "2022-07-25T14:20:13Z"
        },
        {
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "body": "I think that while this text is true, I believe that it is also unnecessary.\r\n\r\nDiscussion of key liveness are dealt with in the key-consistency draft, so this is really about requests that are transmitted well after they are constructed.  If we start to document that, there are lots of other things that start to come up.",
          "createdAt": "2022-07-26T19:04:45Z",
          "updatedAt": "2022-07-26T19:04:45Z"
        },
        {
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "body": "> Discussion of key liveness are dealt with in the key-consistency draft, so this is really about requests that are transmitted well after they are constructed. If we start to document that, there are lots of other things that start to come up.\r\n\r\nI agree, but the content I'm proposing here relates to how liveness affects differential treatment. We've already noted a few key ways in which this can happen, so it seems pretty harmless to me to include one more. I don't think we need to say anything more about _how_ to deal with liveness or how it pertains to consistency. \r\n\r\nI'll propose some text to make this more clear. No more than one sentence.",
          "createdAt": "2022-07-27T19:03:05Z",
          "updatedAt": "2022-07-27T19:03:05Z"
        }
      ]
    },
    {
      "number": 141,
      "id": "I_kwDOE6fLGM5Ol6Zr",
      "title": "The gateway gets the whole request",
      "url": "https://github.com/ietf-wg-ohai/oblivious-http/issues/141",
      "state": "CLOSED",
      "author": "martinthomson",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "This means that the client really needs to trust that the gateway doesn't muck with it.  As a practical matter, this incentivizes clients to choose a gateway that is effectively the same entity as the target.  They don't have to, but the amount of trust required of the gateway is higher if gateway and target aren't operated by the same entity.\r\n\r\nWe touch on this, but we could be clearer about it.",
      "createdAt": "2022-07-26T17:38:39Z",
      "updatedAt": "2022-08-01T12:13:27Z",
      "closedAt": "2022-08-01T12:13:27Z",
      "comments": []
    },
    {
      "number": 144,
      "id": "I_kwDOE6fLGM5OmD-L",
      "title": "Potential Side-channel attacks...",
      "url": "https://github.com/ietf-wg-ohai/oblivious-http/issues/144",
      "state": "CLOSED",
      "author": "vparla",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [],
      "body": "Hi,\r\nSince the gateways are seeing request/response pairs, there is a potential here for a side-channel attack at the gateway itself or at a relay.\r\n(if I understood the draft correctly - if not, please clarify my misunderstanding here).   Are there mitigations planned for this type of issue that you could expand on in the Security Considerations section perhaps? ",
      "createdAt": "2022-07-26T18:19:03Z",
      "updatedAt": "2022-08-02T08:10:50Z",
      "closedAt": "2022-08-02T08:10:50Z",
      "comments": [
        {
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "body": "Does the new text in #143 address this concern?",
          "createdAt": "2022-07-26T18:21:16Z",
          "updatedAt": "2022-07-26T18:21:16Z"
        },
        {
          "author": "vparla",
          "authorAssociation": "NONE",
          "body": "I don't think so, because the claim is the gateway does not have intimate knowledge of the contents of the request/response.  If that assertion is true, the gateway shouldn't be able to ascertain information about the actual contents from those pairs (directly or indirectly, via a side-channel attack). \r\n\r\nIf the burden is on the application developer to ensure that request/response pairs traversing the gateway are to be resilient to side-channel attacks of those pairings, then it would be good to explicitly call that out in this spec (perhaps in the security considerations section?)  Thoughts?\r\n",
          "createdAt": "2022-07-26T18:33:39Z",
          "updatedAt": "2022-07-26T18:33:39Z"
        },
        {
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "body": "@vparla the gateway necessarily sees all request and response pairs, and will therefore always learn information about each transaction. This is fundamental to the design. Whether or not the gateway uses that information for malicious purposes, e.g., by providing different responses to different requests for the same target resource, depends on the trust model. And the change in #143 addresses that. I don't think further text is needed here.",
          "createdAt": "2022-07-26T19:08:36Z",
          "updatedAt": "2022-07-26T19:08:36Z"
        },
        {
          "author": "vparla",
          "authorAssociation": "NONE",
          "body": "\"Finally, a relay can also generate responses, **though it assumed to\r\n   not be able to examine the content of a request** (other than to\r\n   observe the choice of key identifier, KDF, and AEAD), so it is also\r\n   assumed that it cannot generate an Encapsulated Response.\"\r\n   I feel that a relay could certainly perform a side-channel attack here as well using R/R pairings.",
          "createdAt": "2022-07-26T19:46:19Z",
          "updatedAt": "2022-07-26T19:46:41Z"
        },
        {
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "body": "> I feel that a relay could certainly perform a side-channel attack here as well using R/R pairings.\r\n\r\nCan you please be more specific here? What type of attack could the relay do to violate client privacy that is not already documented in the draft?",
          "createdAt": "2022-07-26T19:48:36Z",
          "updatedAt": "2022-07-26T19:48:36Z"
        },
        {
          "author": "vparla",
          "authorAssociation": "NONE",
          "body": "Typically in HTTPs scenarios, it is more difficult to perform side channel attacks as a flow observer, especially if multiplexing of requests and responses are performed.   In this design, if I understand it correctly, the requests and responses are being broken out into distinct exchanges that the relay can see and therefore it makes it easier for a relay to perform these types of attacks that would be more difficult had the relay not been used in the first place.  If my understanding of the protocol is incorrect here, please feel free to point that out. ",
          "createdAt": "2022-07-26T20:00:33Z",
          "updatedAt": "2022-07-26T20:00:33Z"
        },
        {
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "body": "You seem to be describing fingerprinting attacks, wherein the observer uses features extracted from otherwise encrypted traffic to try and learn information about the underlying (unencrypted) data. Yes, the relay does have a more fine-grained view of each exchange compared to a network observer in this protocol since it can see explicit message boundaries, and that might impact the efficacy of these attacks. This is partly already addressed in the document:\r\n\r\n> As the time at which Encapsulated Request or response messages are sent can reveal information to a network observer. Though messages exchanged between the Oblivious Relay Resource and the Oblivious Gateway Resource might be sent in a single connection, traffic analysis could be used to match messages that are forwarded by the relay.\r\n\r\nWe could extend this to note the relay's view of message boundaries. I don't think any additional text is needed for the gateway.",
          "createdAt": "2022-07-26T20:05:44Z",
          "updatedAt": "2022-07-26T20:05:44Z"
        },
        {
          "author": "vparla",
          "authorAssociation": "NONE",
          "body": "Whatever you feel is best.  I think some language around the message level risks this creates vs non-relay scenarios might be helpful.   Does the client intentionally break things up in a way that crosses the underlying application message boundaries (e.g. more like packetization) with a relay?\r\n I have more questions about the gateway functionality that we can discuss separately.",
          "createdAt": "2022-07-26T20:15:45Z",
          "updatedAt": "2022-07-26T20:59:28Z"
        }
      ]
    },
    {
      "number": 145,
      "id": "I_kwDOE6fLGM5OmELz",
      "title": "Imperfect consistency doesn't mean a total loss of privacy",
      "url": "https://github.com/ietf-wg-ohai/oblivious-http/issues/145",
      "state": "CLOSED",
      "author": "martinthomson",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "...just a partial one.\r\n\r\nFrom IETF 114:\r\n\r\n> Richard Barnes: a passing thought: linkability != losing all OHTTP protection. in particular because linkability like Ben is talking about doesn't link to an IP address, which is substantially worse\r\n\r\n> Martin Thomson: @Richard Barnes yeah, that's true, there are lesser losses involved; a unique Target URL creates pseudonymity in place of anonymity, which isn't great, but it isn't a complete loss\r\n\r\nI don't know if it is worth enumerating all of the combinations is viable, but we might consider talking about the exact shape of the consistency requirements here.",
      "createdAt": "2022-07-26T18:19:58Z",
      "updatedAt": "2022-08-02T08:13:25Z",
      "closedAt": "2022-08-02T08:13:25Z",
      "comments": []
    },
    {
      "number": 149,
      "id": "I_kwDOE6fLGM5O9i_L",
      "title": "Suggestion on privacy language",
      "url": "https://github.com/ietf-wg-ohai/oblivious-http/issues/149",
      "state": "CLOSED",
      "author": "vparla",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [],
      "body": "Hi,\r\nThe specification talks about State.  Could I suggest that it explicitly mention 'or other user identifiable payloads.'  Because things like JSON documents (e.g. a JWT) and SAML assertions are not 'cookies' but can carry information that might be user identifiable.  Thoughts?",
      "createdAt": "2022-08-01T17:41:34Z",
      "updatedAt": "2022-08-03T01:44:20Z",
      "closedAt": "2022-08-03T01:44:20Z",
      "comments": [
        {
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "body": "I think we've given short shrift to the way in which the content of requests can be used to link them.  Perhaps some new text for Section 8...\r\n\r\n> The content of a requests or response, if used in forming new requests, can be used to link requests together. This includes obvious methods of linking requests, like cookies [RFC6265], but it also includes any information in either message that might affect how subsequent requests are formulated. For example, [FIELDING2000] describes how interactions that are individually stateless can be used to build a stateful system when a client acts on the content of a response.",
          "createdAt": "2022-08-02T01:09:06Z",
          "updatedAt": "2022-08-02T01:09:06Z"
        },
        {
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "body": "@martinthomson that text looks good to me \ud83d\udc4d Wanna toss up a PR?",
          "createdAt": "2022-08-02T08:16:24Z",
          "updatedAt": "2022-08-02T08:16:38Z"
        }
      ]
    },
    {
      "number": 155,
      "id": "I_kwDOE6fLGM5PbTPC",
      "title": "\"TLS connections\" and whether the use of HTTPS is a requirement ",
      "url": "https://github.com/ietf-wg-ohai/oblivious-http/issues/155",
      "state": "CLOSED",
      "author": "LPardue",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "The document uses the term TLS connection(s) in four places:\r\n\r\n> However, even when IP address tracking is mitigated using one of these techniques, each request needs to be on a completely new TLS connection to avoid the connection itself being used to correlate behavior. \r\n\r\n> An Oblivious Relay Resource terminates TLS connections from clients, so they see message boundaries. \r\n\r\n> Even if server keys are compromised, an adversary cannot access messages exchanged by the client with the Oblivious Relay Resource as messages are protected by TLS. Use of a compromised key also requires that the Oblivious Relay Resource cooperate with the attacker or that the attacker is able to compromise these TLS connections.\r\n\r\n> Oblivious HTTP might be incompatible with network interception regimes, such as those that rely on configuring clients with trust anchors and intercepting TLS connections.\r\n\r\nMy understanding is that oHTTP is not restricted to versions of HTTP that use TLS. The obvious one being QUIC (arguably TLS-like) but presumably some future protocol that satisfies the security properties of HTTPS could be used and oHTTP wouldn't really care.\r\n\r\nNow, perhaps I'm mistaken and oHTTP does mandate TLS. If so, perhaps I'm overlooking it. https://www.ietf.org/archive/id/draft-ietf-ohai-ohttp-03.html#name-client-responsibilities states many requirements but not the use of HTTPS. That seems implicit via https://www.ietf.org/archive/id/draft-ietf-ohai-ohttp-03.html#name-traffic-analysis\r\n\r\n> This document assumes that all communication between different Oblivious Client, Oblivious Relay Resource, and Oblivious Gateway Resource is protected by HTTPS.\r\n\r\nHowever, that seems in conflict with https://www.ietf.org/archive/id/draft-ietf-ohai-ohttp-03.html#name-server-responsibilities, which says \r\n\r\n> Nonsecure requests - such those with the \"http\" scheme as opposed to the \"https\" scheme - SHOULD NOT be used if the Oblivious Gateway and Target Resources are operated by different entities as that would expose both requests and response to modification or inspection by a network attacker.\r\n\r\nIn summary, there seems to be some opportunity to tighten up the consistency of expectations about the connections underpinning oHTTP interations.",
      "createdAt": "2022-08-09T00:38:52Z",
      "updatedAt": "2022-08-09T13:00:29Z",
      "closedAt": "2022-08-09T13:00:29Z",
      "comments": []
    },
    {
      "number": 156,
      "id": "I_kwDOE6fLGM5PbU1N",
      "title": "\"Request of a\" terminology",
      "url": "https://github.com/ietf-wg-ohai/oblivious-http/issues/156",
      "state": "CLOSED",
      "author": "LPardue",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "mnot recently made a PR (now merged) that replaced \"requests of a server\" with \"requests to an origin server\" and that feels both grammatically and technically more correct.\r\n\r\nHowever, there are still few cases peppered through the doc that use \"requests of a server\". I'd kindly ask the editors to revisit these and consider if they could be made more consistent with the above",
      "createdAt": "2022-08-09T00:50:00Z",
      "updatedAt": "2022-08-09T13:06:04Z",
      "closedAt": "2022-08-09T13:06:04Z",
      "comments": []
    },
    {
      "number": 157,
      "id": "I_kwDOE6fLGM5PbWSn",
      "title": "Ordering of Oblivious Gateway Resource behavior statements in Section 5",
      "url": "https://github.com/ietf-wg-ohai/oblivious-http/issues/157",
      "state": "CLOSED",
      "author": "LPardue",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Section 5 details HTTP usage. It seems it's technically correct but the section closes with a sequence of paragraphs that jump back and forth between statements about how an Oblivious Gateway Resource treats requests or responses. Perhaps these could be consolidated to present requests first consistently. I.e. swap the final two paragraphs around\r\n\r\n\r\n\r\n",
      "createdAt": "2022-08-09T01:01:30Z",
      "updatedAt": "2022-08-09T13:03:34Z",
      "closedAt": "2022-08-09T13:03:34Z",
      "comments": []
    },
    {
      "number": 158,
      "id": "I_kwDOE6fLGM5PbYIE",
      "title": "What's an HpkeKdfId?",
      "url": "https://github.com/ietf-wg-ohai/oblivious-http/issues/158",
      "state": "CLOSED",
      "author": "LPardue",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "In Section 4, there are two statements for Encapsulated Request and Encapsulate Response respectively\r\n\r\n> The Nenc parameter corresponding to the HpkeKdfId can be found in [Section 7.1](https://rfc-editor.org/rfc/rfc9180#section-7.1) of [[HPKE](https://www.ietf.org/archive/id/draft-ietf-ohai-ohttp-03.html#HPKE)].\r\n\r\n> The Nenc and Nk parameters corresponding to the HpkeKdfId can be found in [[HPKE](https://www.ietf.org/archive/id/draft-ietf-ohai-ohttp-03.html#HPKE)]\r\n\r\nThese are the only places that `HpkeKdfId` is used. The HPKE spec doesn't use the term either. Doing some digging, it seemed like an older draft defined this term (and others); see https://www.ietf.org/archive/id/draft-ietf-ohai-ohttp-01.html#name-key-configuration-encoding. But it seems like you moved away from that and this is a hangover",
      "createdAt": "2022-08-09T01:12:45Z",
      "updatedAt": "2022-08-11T00:11:58Z",
      "closedAt": "2022-08-11T00:11:58Z",
      "comments": [
        {
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "body": "So this isn't ideal.  It is also wrong.  It would be HpkeKemId in the first instance and HpkeAeadId in the second.  The second also refers to Nenc without using it.  The second also neglected to mention Nn, which was in the algorithm.  What a mess.\r\n\r\nI've cleaned it up, but would appreciate someone double-checking my work.",
          "createdAt": "2022-08-09T05:05:56Z",
          "updatedAt": "2022-08-09T05:05:56Z"
        }
      ]
    },
    {
      "number": 159,
      "id": "I_kwDOE6fLGM5PbbbV",
      "title": "Is pseudo-code for response encapsulation consistent with prose?",
      "url": "https://github.com/ietf-wg-ohai/oblivious-http/issues/159",
      "state": "CLOSED",
      "author": "LPardue",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Section 4.2, prose says\r\n\r\n> Encrypt response, passing the AEAD function Seal the values of key, nonce, empty aad, and a pt input of request, which yields ct.\r\n\r\nwhereas the pseudo-code says\r\n\r\n> ct = Seal(aead_key, aead_nonce, \"\", response)",
      "createdAt": "2022-08-09T01:34:03Z",
      "updatedAt": "2022-08-09T13:01:57Z",
      "closedAt": "2022-08-09T13:01:57Z",
      "comments": [
        {
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "body": "A few things here should improve readability: key -> aead_key, nonce -> aead_nonce, then we should be sure to pass the *response* in rather than the *request*.",
          "createdAt": "2022-08-09T05:09:58Z",
          "updatedAt": "2022-08-09T05:09:58Z"
        }
      ]
    },
    {
      "number": 160,
      "id": "I_kwDOE6fLGM5Pbc6r",
      "title": "Cookies so bad, you MUST NOT them twice",
      "url": "https://github.com/ietf-wg-ohai/oblivious-http/issues/160",
      "state": "CLOSED",
      "author": "LPardue",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "In Section 6.1, the document states twice, in the space of two paragraphs, that clients MUST NOT use cookies. That seems a little excessive.",
      "createdAt": "2022-08-09T01:45:14Z",
      "updatedAt": "2022-08-09T13:07:28Z",
      "closedAt": "2022-08-09T13:07:28Z",
      "comments": []
    },
    {
      "number": 161,
      "id": "I_kwDOE6fLGM5Pbd7q",
      "title": "Section 5 covers some HTTP usage requirements, Section 6 a lot more",
      "url": "https://github.com/ietf-wg-ohai/oblivious-http/issues/161",
      "state": "CLOSED",
      "author": "LPardue",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Sections 6.1, 6.2 and 6.3 detail normative requirements that seem to apply to the actors duties outlined in section 5. Consider forward references to each respective section to aid implementers in discovery applicable considerations.",
      "createdAt": "2022-08-09T01:52:36Z",
      "updatedAt": "2022-08-09T13:01:15Z",
      "closedAt": "2022-08-09T13:01:15Z",
      "comments": []
    },
    {
      "number": 162,
      "id": "I_kwDOE6fLGM5PbfBC",
      "title": "Traffic analysis and latency",
      "url": "https://github.com/ietf-wg-ohai/oblivious-http/issues/162",
      "state": "CLOSED",
      "author": "LPardue",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "> A relay could, as part of its function, add delays in order to increase the anonymity set into which each message is attributed. This could latency to the overall time clients take to receive a response, which might not be what some clients want.\r\n\r\nI presume the idea here is to add jitter to the system (different delays for different requests) rather than compound delays on a single request?\r\n\r\nEven if not, this paragraph could probably benefit from some language fixups. There's a missing word and \"might not be what some clients want\" could benefit from a rephrasing to make it stronger.",
      "createdAt": "2022-08-09T02:01:15Z",
      "updatedAt": "2022-08-09T13:00:56Z",
      "closedAt": "2022-08-09T13:00:56Z",
      "comments": []
    },
    {
      "number": 163,
      "id": "I_kwDOE6fLGM5PbgPn",
      "title": "HTTP/2 and HTTP/3 refs",
      "url": "https://github.com/ietf-wg-ohai/oblivious-http/issues/163",
      "state": "CLOSED",
      "author": "LPardue",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Currently, these normative references are to old document versions. We should link to RFC 9113 and 9114, and probably use the Use [HTTP/2] and [HTTP/3] labels for consistency with the HTTP style guide.",
      "createdAt": "2022-08-09T02:09:04Z",
      "updatedAt": "2022-08-09T12:58:23Z",
      "closedAt": "2022-08-09T12:58:23Z",
      "comments": []
    },
    {
      "number": 164,
      "id": "I_kwDOE6fLGM5Pbi7h",
      "title": "Ref to draft-ietf-httpapi-rfc7807bis",
      "url": "https://github.com/ietf-wg-ohai/oblivious-http/issues/164",
      "state": "CLOSED",
      "author": "LPardue",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Does this ref need to be normative?",
      "createdAt": "2022-08-09T02:26:07Z",
      "updatedAt": "2022-08-09T12:58:23Z",
      "closedAt": "2022-08-09T12:58:23Z",
      "comments": [
        {
          "author": "LPardue",
          "authorAssociation": "CONTRIBUTOR",
          "body": "oh, it seems this relates to a the registration of `Date Not Acceptable` buried down in Section 10.2. Is this still valid?",
          "createdAt": "2022-08-09T02:29:14Z",
          "updatedAt": "2022-08-09T02:29:14Z"
        },
        {
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "body": "Yes it is, though I realize that we also buried the IANA considerations a little too deep.",
          "createdAt": "2022-08-09T05:47:08Z",
          "updatedAt": "2022-08-09T05:47:08Z"
        }
      ]
    },
    {
      "number": 179,
      "id": "I_kwDOE6fLGM5PulLX",
      "title": "Are empty encapsulated responses allowed?",
      "url": "https://github.com/ietf-wg-ohai/oblivious-http/issues/179",
      "state": "CLOSED",
      "author": "rillian",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [],
      "body": "The draft says\r\n\r\n    An Oblivious Gateway Resource, if it receives any response from the\r\n    Target Resource, sends a single 200 response containing the\r\n    encapsulated response.\r\n\r\nWhat happens if that encapsulated response is zero-length? The section seems ambiguous on this point.\r\n\r\nTo encapsulate a response the gateway resource needs to hold the private hpke key for every endpoint it services, even if that response is a simple status code with no body content, as is common with POST requests.\r\n\r\nFor security, it would be nice if it were possible to restrict the private key to an offline process. That is, instead of the gateway performing decapsulation itself, it writes the *encapsulated* request directly to the target and returns success unconditionally. Then a separate process, running in a more restricted environment, performs decapsulation and analysis of the client requests. The attack surface is reduced, and vulnerabilities in the gateway implementation are less serious because it cannot leak the keys.\r\n\r\nOne way to do this is to have the gateway return `200 OK` to the relay with *no* response body, and have the relay forward that back to the client. The client would have to assume success in this case. For some applications, this \"best effort\" submission could be an acceptable trade off for better data path integrity.",
      "createdAt": "2022-08-12T19:00:23Z",
      "updatedAt": "2022-08-22T23:42:04Z",
      "closedAt": "2022-08-22T23:42:04Z",
      "comments": [
        {
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "body": "> What happens if that encapsulated response is zero-length? The section seems ambiguous on this point.\r\n\r\nThe Encapsulated Response encoding currently does not admit a zero-length (empty) response. It includes at least max(Nn, Nk)+Nt (ciphertext tag size) bytes.\r\n\r\n> One way to do this is to have the gateway return 200 OK to the relay with no response body, and have the relay forward that back to the client. The client would have to assume success in this case. For some applications, this \"best effort\" submission could be an acceptable trade off for better data path integrity.\r\n\r\nThis is an interesting use case. I can imagine changing the Encapsulated Response type to admit successful zero-length responses to signal \"I received your request and will process it later.\" This isn't authenticated any differently from non-2xx responses from the gateway, so I don't think it's a problem that the HPKE context is not used to generate the response here. I suppose the main question (to me) is whether or not clients should be configured to expect this behavior. What happens if a client gets an empty 200 response when it expected a non-empty response? Should it retry? Should it only accept this if the client is configured this way? The latter is probably doable.\r\n\r\n@martinthomson, @tfpauly: thoughts?",
          "createdAt": "2022-08-12T19:08:17Z",
          "updatedAt": "2022-08-12T19:08:17Z"
        },
        {
          "author": "tfpauly",
          "authorAssociation": "COLLABORATOR",
          "body": "I could see allowing it the client has a configuration to handle it specially, but in general, I think that a client wouldn't expect an empty response that is still a 200, since it doesn't have any expected content type, etc. ",
          "createdAt": "2022-08-12T19:26:54Z",
          "updatedAt": "2022-08-12T19:26:54Z"
        },
        {
          "author": "LPardue",
          "authorAssociation": "CONTRIBUTOR",
          "body": "The encapsulated request and response is effectively just HTTP. IIUC  this is a proposal to change the HTTP interaction model to fire-and-forget. I.e. infer that when something on the path claims it delivered something, the client should accept that. \r\n\r\nWhy do we want to change HTTP?\r\n\r\nA way to emulate this, without changing HTTP semantics, is to have the Gateway synthesize an encapsulated response itself. Then the client doesn't need to handle an empty response. If you cared for signalling, the Gateway could include a field in the synthesized response that indicted this had happened.",
          "createdAt": "2022-08-12T19:30:53Z",
          "updatedAt": "2022-08-12T19:31:10Z"
        },
        {
          "author": "tfpauly",
          "authorAssociation": "COLLABORATOR",
          "body": "Agreed with Lucas on this",
          "createdAt": "2022-08-12T19:48:53Z",
          "updatedAt": "2022-08-12T19:48:53Z"
        },
        {
          "author": "rillian",
          "authorAssociation": "NONE",
          "body": "> A way to emulate this, without changing HTTP semantics, is to have the Gateway synthesize an encapsulated response itself.\r\n\r\nThe use case is to hide the private key from the Gateway. Is this possible without access to the key?",
          "createdAt": "2022-08-12T20:13:47Z",
          "updatedAt": "2022-08-12T20:13:47Z"
        },
        {
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "body": "@LPardue I don't think this is a change to HTTP at all. It's just a change to the HTTP usage here. It is totally feasible for the relay to return a 200 response to the client that means \"I accepted your relay request and will forward it later.\" This seems totally valid and indeed something we might want for applications that don't need a response to the client and want the relay to do some sort of batching. \n\nIf we wanted to support this, maybe we could use a separate content type for the response that is along the lines of an acknowledgement, rather than a response with actual content. ",
          "createdAt": "2022-08-12T20:21:55Z",
          "updatedAt": "2022-08-12T20:21:55Z"
        },
        {
          "author": "LPardue",
          "authorAssociation": "CONTRIBUTOR",
          "body": "That's fair. But then we should not be overloading the OHTTP interaction model. Rather, when the Gateway responds with a 200, it always contains an enclosed response as today. And if you want a different interaction, then return a different status code like [202 Accepted](https://www.rfc-editor.org/rfc/rfc9110.html#name-202-accepted):\r\n\r\n> The representation sent with this response ought to describe the request's current status and point to (or embed) a status monitor that can provide the user with an estimate of when the request will be fulfilled.\r\n\r\nThis 202 representation is not the enclosed request - it could be empty.\r\n\r\n",
          "createdAt": "2022-08-12T20:27:55Z",
          "updatedAt": "2022-08-12T20:29:05Z"
        },
        {
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "body": "Oh, perfect! I didn't know 202 existed. That sounds like it would work here without any sort of change, beyond maybe a note saying that it's possible to use?",
          "createdAt": "2022-08-12T20:30:13Z",
          "updatedAt": "2022-08-12T20:30:13Z"
        },
        {
          "author": "LPardue",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Personally I'd lean more towards being explicit that this could happen, and is effectively a conditional terminal branch of the sequence at step 6 https://ietf-wg-ohai.github.io/oblivious-http/draft-ietf-ohai-ohttp.html#section-2-6.6\r\n\r\nBut that's just my 2c",
          "createdAt": "2022-08-12T20:38:24Z",
          "updatedAt": "2022-08-12T20:38:24Z"
        },
        {
          "author": "rillian",
          "authorAssociation": "NONE",
          "body": "Being explicit makes it more likely this path will be implemented uniformly.",
          "createdAt": "2022-08-12T22:08:41Z",
          "updatedAt": "2022-08-12T22:08:41Z"
        },
        {
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "body": "Specifying the operation of the protocol for a 202 is possible, but I doubt we could do that trivially.\r\n\r\nA relay can send 202.  This introduces some interesting consequences for end-to-end reliability.  A gateway might also send 202 (it takes the request, stores it, responds).  The gateway concerns are approximately the same.  As @rillian observes, this might allow the gateway to operate without the private key, which is a very useful feature for something like STAR.\r\n\r\nIf we deal with this case in this document, we'll have to cover all bases.  I see three options:\r\n\r\n1. We specify the necessary behaviour here, in full.  We describe the general sort of circumstance in which it might be advantageous to have the client not wait around for a full end-to-end response.  We explain that the relay/gateway needs to understand the application for which it is forwarding requests and that 202 responses are generally not acceptable.  We explain that by responding with 202 the relay/gateway takes responsibility for the forwarding of the request and any necessary actions that might be needed to improve reliability, including retries.  We explain that clients that use such a relay/gateway need to be aware of what the relay/gateway might do and that this means that they will not get any end-to-end signal that provides them with a reliable indication that their request was processed.\r\n2. We specify a separate extension, with all of the above.\r\n3. We leave this extension to each application of the protocol, which can address each of the above points as it chooses.  That application can do less about addressing those concerns as it might specify the use of 202 at only one of the nodes.\r\n\r\nI'm guessing that this is for STAR, so it does make a degree of sense to have the gateway to store requests and respond with 202.  As a telemetry system, the loss of reliability is essentially zero (you don't get an end-to-end confirmation that the key you chose worked, so it's not perfect, but that's deliberate and more of a feature than a bug in that case).  So I'm inclined to suggest that STAR deal with describing this.",
          "createdAt": "2022-08-15T00:17:16Z",
          "updatedAt": "2022-08-15T00:17:16Z"
        },
        {
          "author": "LPardue",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Yeah, my concern is that this could be feature creep and delay this document further, when it's already achieved the starting goals. Punting to another document seems fair to me.\r\n\r\nWhat I might expect here is some brief service about how a gateway responds when there is *no* response from the target. This thread started with the draft excerpt:\r\n\r\n> An Oblivious Gateway Resource, if it receives any response from the Target Resource, sends a single 200 response containing the encapsulated response. Like the request from the client, this response MUST only contain those fields necessary to carry the encapsulated response: a 200 status code, a header field indicating the content type, and the encapsulated response as the response content.\r\n\r\nIgnoring fancy usecases, there are failure cases for the the Gateway: fail to resolve the target, or fail to connect to it, or fail receive a complete response. In other HTTP intermediation, returning a 5xx (e.g. 502, 504) is common for such cases. If the gateway did that here, I'm not clear what  expectations there on the response -  the MUST requirement for the 200 case can't apply right?\r\n\r\n",
          "createdAt": "2022-08-15T14:20:06Z",
          "updatedAt": "2022-08-15T14:20:06Z"
        },
        {
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "body": "The MUST there is implicitly conditional on the gateway receiving a response.  We can add a sentence saying that if the gateway doesn't receive a response it can encapsulate an appropriate error response (like 504).",
          "createdAt": "2022-08-15T23:52:12Z",
          "updatedAt": "2022-08-15T23:52:12Z"
        },
        {
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "body": "I've opened #180.  It doesn't address this specific concern, but it will deal with the problem Lucas identified.",
          "createdAt": "2022-08-16T01:10:01Z",
          "updatedAt": "2022-08-16T01:36:48Z"
        },
        {
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "body": "I threw together [a small draft](https://github.com/chris-wood/draft-unreliable-ohttp) describing an unreliable variant of OHTTP that satisfies the use case motivating this issue. @rillian (and others), please have a look! Contributions from everyone are welcome. ",
          "createdAt": "2022-08-17T13:44:57Z",
          "updatedAt": "2022-08-17T13:44:57Z"
        },
        {
          "author": "rillian",
          "authorAssociation": "NONE",
          "body": "The unreliable-ohttp draft addresses my motivating use case, and there's at least some clarifying text about error handling for the Relay, so I'm satisfied this is addressed.",
          "createdAt": "2022-08-22T23:42:03Z",
          "updatedAt": "2022-08-22T23:42:03Z"
        }
      ]
    },
    {
      "number": 184,
      "id": "I_kwDOE6fLGM5P6cZo",
      "title": "Editorial: Missing noun in Section 8.1",
      "url": "https://github.com/ietf-wg-ohai/oblivious-http/issues/184",
      "state": "CLOSED",
      "author": "ericorth",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [],
      "body": "In Deployment Considerations / Performance Overhead...\r\n\r\n> Using Oblivious HTTP adds both cryptographic and latency to requests relative to a simple HTTP request-response exchange.\r\n\r\nShould that be \"cryptographic\" -> \"cryptographic complexity\" or something like that?",
      "createdAt": "2022-08-16T18:24:48Z",
      "updatedAt": "2022-08-17T12:54:47Z",
      "closedAt": "2022-08-17T12:54:47Z",
      "comments": [
        {
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "body": "It should probably be \"cryptographic overhead.\" Nice catch!",
          "createdAt": "2022-08-16T21:08:37Z",
          "updatedAt": "2022-08-16T21:08:37Z"
        }
      ]
    },
    {
      "number": 194,
      "id": "I_kwDOE6fLGM5QIDbz",
      "title": "Configuration mismatch signal",
      "url": "https://github.com/ietf-wg-ohai/oblivious-http/issues/194",
      "state": "CLOSED",
      "author": "chris-wood",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "(_Originally posted by @martinthomson in https://github.com/ietf-wg-ohai/oblivious-http/issues/187#issuecomment-1220187028_):\r\n\r\n> I had assumed that configs would be published with some information about how the client is expected to refresh them.  Like an Expires or max-age in HTTP.\r\n> \r\n> You could treat anything older than the usual refresh cycle as potentially outdated, which means that you might retry with a fresh config if you got any sort of non-encapsulated response.\r\n> \r\n> I'm not opposed to defining a problem type (RFC 7807) or something like that for this.  I'm just objecting to the scope creep.\r\n\r\nAny lifetime information that comes with a key is helpful, but in practice is insufficient for clients to drive key updates. Key rotation may not occur on a fixed schedule and it may not occur synchronously (some gateway instances might not get the key at the right time. This means that clients cannot distinguish between failures due to configuration mismatch or request tampering (or whatever else might cause the gateway to reply without an encapsulated response). If the client can't distinguish then the client's recovery implementation is a lot more complicated. Does it always try to forcibly update its configuration? Does it implement some sort of backoff? Can a relay abuse the client's recovery implementation to somehow put the client into a state where it is stuck with an old configuration?\r\n\r\nIt seems vastly simpler to just be clear that the configuration is wrong as a signal to the client that it's time to update. This was done in ODoH with a 401 response code. #187 proposed a new problem statement, which I think is the right way to deal with this. \r\n\r\nYes, there are potential privacy problems based on automated updates, but those depend on the client's consistency story and is therefore not something new a signal would introduce.",
      "createdAt": "2022-08-19T11:02:55Z",
      "updatedAt": "2022-09-01T23:58:28Z",
      "closedAt": "2022-09-01T23:58:28Z",
      "comments": []
    },
    {
      "number": 195,
      "id": "I_kwDOE6fLGM5QS6x3",
      "title": "message/ohttp vs message/bhttp",
      "url": "https://github.com/ietf-wg-ohai/oblivious-http/issues/195",
      "state": "CLOSED",
      "author": "rillian",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [],
      "body": "I spent some time being confused because `message/ohttp-req` (content type) and `message/bhttp request` (the hpke info tag) are so similar.\r\n\r\nIs it possible to align these two?\r\n\r\nSection 9, *Repurposing the Encapsulation Format*, mentions changing the hpke info for other protocols, so I suppose `message/bhttp` is re-using the content-type from the binary http draft at this layer, while the outer Content-Type is specific to this draft's application?\r\n\r\nI can see the logic there, but some clarifying text about the two being different would have been helpful.",
      "createdAt": "2022-08-22T23:53:46Z",
      "updatedAt": "2022-09-01T23:58:17Z",
      "closedAt": "2022-09-01T23:58:17Z",
      "comments": [
        {
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "body": "> Is it possible to align these two?\r\n\r\nWe kept them separate because they refer to different things. The \"message/ohttp-req\" content type refers to the type of HTTP request sent from client to gateway, whereas the \"message/bhttp request\" content type refers to the type of content that's encapsulated to the gateway. \r\n\r\nWe can probably improve this distinction in the text. Thanks for flagging this.",
          "createdAt": "2022-08-24T11:07:29Z",
          "updatedAt": "2022-08-24T11:07:29Z"
        },
        {
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "body": "I did a little rewriting of some of the key framing text for another issue, does the following help at all?\r\n\r\nhttps://github.com/ietf-wg-ohai/oblivious-http/blob/1eee92130c266179916e54bcaa7f12d62e12da43/draft-ietf-ohai-ohttp.md?plain=1#L415-L421\r\n\r\n",
          "createdAt": "2022-08-25T01:58:23Z",
          "updatedAt": "2022-08-25T01:58:23Z"
        },
        {
          "author": "rillian",
          "authorAssociation": "NONE",
          "body": "The new references to the repurposing section in that commit are helpful. The extra wording you linked doesn't help much I think.\r\n\r\nIt's confusing that the `message/ohttp-re[qs]` both *encapsulates* a `message/bhttp` and is *called* an 'encapsulated request/response'. So when you say,\r\n\r\n> The content of \"`message/ohttp-req`\" request encapsulation contains only a binary HTTP message\r\n\r\nthe word 'contains' is ambiguous: is it that the `message/ohttp-req` directly contains the binary HTTP message, or is that the HPKE AEAD contains the binary HTTP message? I understand it's the second one, but on first reading this kind of layer confusion was hard to keep track of.\r\n\r\nMaybe something about the media type containing the encrypted message along with the necessary parameters to convey the encapsulation would help?",
          "createdAt": "2022-08-26T22:24:36Z",
          "updatedAt": "2022-08-26T22:24:36Z"
        },
        {
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "body": "I took a swing at this in #198.  Am I getting closer?",
          "createdAt": "2022-08-31T05:59:47Z",
          "updatedAt": "2022-08-31T05:59:47Z"
        }
      ]
    },
    {
      "number": 201,
      "id": "I_kwDOE6fLGM5RCiNG",
      "title": "I-D Nits: Duplicate References",
      "url": "https://github.com/ietf-wg-ohai/oblivious-http/issues/201",
      "state": "CLOSED",
      "author": "seanturner",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [],
      "body": "    Duplicate reference: RFC6265, mentioned in 'RFC6265', was also mentioned\r\n    in 'COOKIES'.\r\n\r\n    Duplicate reference: RFC9110, mentioned in 'SEMANTICS', was also\r\n    mentioned in 'HTTP'.",
      "createdAt": "2022-09-02T02:09:52Z",
      "updatedAt": "2022-09-02T09:11:59Z",
      "closedAt": "2022-09-02T09:11:59Z",
      "comments": []
    },
    {
      "number": 203,
      "id": "I_kwDOE6fLGM5Rj94c",
      "title": "Definition of \"Client\" is circular",
      "url": "https://github.com/ietf-wg-ohai/oblivious-http/issues/203",
      "state": "CLOSED",
      "author": "DavidSchinazi",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [],
      "body": "The draft [currently defines](https://www.ietf.org/archive/id/draft-ietf-ohai-ohttp-04.html#dfn-client) the term \"client\" as follows:\r\n\r\n> Client: This document uses its own definition of Client.\r\n\r\nWhere \"Client\" is a link to itself.\r\n\r\nThis isn't a helpful definition. Adding a sentence explaining the role of the client would be helpful.",
      "createdAt": "2022-09-09T22:29:45Z",
      "updatedAt": "2022-09-15T00:51:58Z",
      "closedAt": "2022-09-15T00:32:14Z",
      "comments": [
        {
          "author": "DavidSchinazi",
          "authorAssociation": "NONE",
          "body": "#205 fully addresses my concern here",
          "createdAt": "2022-09-15T00:51:58Z",
          "updatedAt": "2022-09-15T00:51:58Z"
        }
      ]
    },
    {
      "number": 207,
      "id": "I_kwDOE6fLGM5XQRbv",
      "title": "Reference to HPKE Registries",
      "url": "https://github.com/ietf-wg-ohai/oblivious-http/issues/207",
      "state": "CLOSED",
      "author": "martinthomson",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "From @fpalombini:\r\n \r\n>   The Nenc parameter corresponding to the KEM used in HPKE can be found\r\n>   in Section 7.1 of [HPKE].  Nenc refers to the size of the\r\n \r\nCan we (additionally or in replacement) point to the \"HPKE KEM Identifiers\" IANA registry created from this table instead?\r\n \r\n>   The Nn and Nk values correspond to parameters of the AEAD used in\r\n>   HPKE, which is defined in Section 7.3 of [HPKE].  Nn and Nk refer to\r\n \r\nSame for this and \"HPKE AEAD Identifiers\" registry.",
      "createdAt": "2022-11-24T23:20:50Z",
      "updatedAt": "2022-11-29T01:50:45Z",
      "closedAt": "2022-11-29T01:50:45Z",
      "comments": []
    },
    {
      "number": 208,
      "id": "I_kwDOE6fLGM5XQRjM",
      "title": "the server returns an error",
      "url": "https://github.com/ietf-wg-ohai/oblivious-http/issues/208",
      "state": "CLOSED",
      "author": "martinthomson",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "From @fpalombini:\r\n\r\nSection 5.3:\r\n>   Errors in the encapsulation of requests mean that responses cannot be\r\n>   encapsulated.  This includes cases where the key configuration is\r\n>   incorrect or outdated.  The Oblivious Gateway Resource can generate\r\n>   and send a response with an error status to the Oblivious Relay\r\n>   Resource.  \r\n \r\nShould there be any indication that such errors in processing should be considered as bad requests (and hence return an appropriate error status code) or is this obvious?",
      "createdAt": "2022-11-24T23:21:56Z",
      "updatedAt": "2022-11-29T07:14:56Z",
      "closedAt": "2022-11-29T07:14:56Z",
      "comments": []
    },
    {
      "number": 209,
      "id": "I_kwDOE6fLGM5XQRk-",
      "title": "Export a secret from context",
      "url": "https://github.com/ietf-wg-ohai/oblivious-http/issues/209",
      "state": "CLOSED",
      "author": "martinthomson",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "From @fpalombini:\r\n\r\n>   1.  Export a secret secret from context, using the string \"message/\r\n>       bhttp response\" as context.  The length of this secret is max(Nn,\r\n \r\nPlease add a reference to section 5.3 of \\[HPKE\\]; it could be confusing at a first glance to have both the context from the exporter function in 5.3 of \\[HPKE\\] and the HPKE context here named \"context\".",
      "createdAt": "2022-11-24T23:22:22Z",
      "updatedAt": "2022-11-29T07:15:26Z",
      "closedAt": "2022-11-29T07:15:26Z",
      "comments": []
    },
    {
      "number": 210,
      "id": "I_kwDOE6fLGM5XQRmx",
      "title": "OHTTP",
      "url": "https://github.com/ietf-wg-ohai/oblivious-http/issues/210",
      "state": "CLOSED",
      "author": "martinthomson",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "From @fpalombini:\r\n\r\n>   The encrypted payload of an OHTTP request and response is a binary\r\n \r\nInteresting that this is the first time OHTTP appear in the text, excluding pseudocode and mediatype - please expand (or define somewhere else, for example in terminology).",
      "createdAt": "2022-11-24T23:22:42Z",
      "updatedAt": "2022-11-29T07:15:38Z",
      "closedAt": "2022-11-29T07:15:38Z",
      "comments": []
    },
    {
      "number": 211,
      "id": "I_kwDOE6fLGM5XQRpM",
      "title": "MUST or MAY?",
      "url": "https://github.com/ietf-wg-ohai/oblivious-http/issues/211",
      "state": "CLOSED",
      "author": "martinthomson",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "From @fpalombini:\r\n \r\n>   the content of a POST request to the Oblivious Relay Resource.  This\r\n>   request MUST only contain those fields necessary to carry the\r\n>   Encapsulated Request: a method of POST, a target URI of the Oblivious\r\n>   Relay Resource, a header field containing the content type (see\r\n>   (Section 9.2), and the Encapsulated Request as the request content.\r\n>   In the request to the Oblivious Relay Resource, Clients MAY include\r\n>   additional fields.  However, those fields MUST be independent of the\r\n \r\nIt seems to me these two sentences contraddict each other: MUST only contain these fields, and MAY include additional fields. Do I read this wrong? (and same for the response later in the section)",
      "createdAt": "2022-11-24T23:23:03Z",
      "updatedAt": "2022-11-29T01:51:31Z",
      "closedAt": "2022-11-29T01:51:31Z",
      "comments": []
    },
    {
      "number": 212,
      "id": "I_kwDOE6fLGM5XQRrY",
      "title": "SHOULD",
      "url": "https://github.com/ietf-wg-ohai/oblivious-http/issues/212",
      "state": "CLOSED",
      "author": "martinthomson",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "From @fpalombini:\r\n \r\n>   Oblivious Gateway Resources SHOULD allow for the time it takes requests to arrive from the Client, with a time window that is large enough to allow for differences in clocks.\r\n \r\nI understand the goal of the sentence above, but I am not sure the SHOULD is appropriate here - in particular if I think about the above as an interoperability requirement, I don't think it gives enough information to the implementer of what is recommended here. If this was to give for example a default time window, it would be a different story. Can we rephrase? (You can also leave as is, but I think it will come up again in IESG review with no change)",
      "createdAt": "2022-11-24T23:23:28Z",
      "updatedAt": "2022-11-29T07:15:57Z",
      "closedAt": "2022-11-29T07:15:57Z",
      "comments": []
    },
    {
      "number": 213,
      "id": "I_kwDOE6fLGM5XQRvl",
      "title": "Nits",
      "url": "https://github.com/ietf-wg-ohai/oblivious-http/issues/213",
      "state": "CLOSED",
      "author": "martinthomson",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "From @fpalombini:\r\n \r\n### KeyConfig\r\n \r\n>   Oblivious Gateway key configuration (KeyConfig), and Oblivious\r\n \r\nFirst and only time KeyConfig appear in the text.\r\n \r\n### Editorial nits\r\n \r\nSection 6.7:\r\n>   A Client only needs to retain keying material that might be used\r\n>   compromise the confidentiality and integrity of a response until that\r\n \r\nMissing \"to\" after \"used\"\r\n \r\nSection 6.7:\r\n>   The total number of affected messages affected by server key\r\n>   compromise can be limited by regular rotation of server keys.\r\n \r\nRemove the first \"affected\"\r\n \r\nSection 7:\r\n>   other Clients.  It is critical prevent the use of unique Client\r\n>   configurations, which might be used to track of individual Clients,\r\n \r\nMissing \"to\" before prevent, remove \"of\"",
      "createdAt": "2022-11-24T23:24:11Z",
      "updatedAt": "2022-11-29T01:17:06Z",
      "closedAt": "2022-11-29T01:17:06Z",
      "comments": []
    },
    {
      "number": 242,
      "id": "I_kwDOE6fLGM5bnqgJ",
      "title": "Clarification of DNS lookup",
      "url": "https://github.com/ietf-wg-ohai/oblivious-http/issues/242",
      "state": "CLOSED",
      "author": "martinthomson",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [
        "discuss",
        "review"
      ],
      "body": "_Comment by @paulwouters_\n\nI think it would be good to add a section on how DNS works with ohttp. Eg to clarify whether the lookup is performed by the Client (and hopefully uses DoH or oDoH on its own) or whether it is looked up by the Oblivious Gateway Resource. Eg is the encrypted request using an IP address or a URI.\n\n",
      "createdAt": "2023-01-17T22:37:04Z",
      "updatedAt": "2023-02-21T21:24:15Z",
      "closedAt": "2023-02-21T21:24:08Z",
      "comments": [
        {
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "body": "Copying my response to the email thread:\r\n\r\nI don't think that a section like this would be a good idea.  There are a great many things that we could explain in more detail, but we need to stick to relevant topics, lest we overburden readers with irrelevant and distracting details.\r\n\r\nI should probably explain a bit about why this is not relevant.  Typical HTTP usage takes inputs, usually: a method (GET/POST/...), a URL (https://example.com/whatever), maybe some fields that shape that request (Cache-Control say), and maybe a body.  The HTTP library you engage with does a bunch of stuff with networking and TLS and whatnot and you get a response.  At some point, down in the guts of that library, it might invoke `gethostbyname()`, but that's a number of layers of abstraction away.\r\n\r\nThis is the level of interaction that applies here as well.  The addition of the relay means that the user has two URLs and two sets of fields to consider, but it is still engaged at that same high level.  Importantly, all interactions in the protocol occur at this level, for all actors.\r\n\r\nNow, if this were a CONNECT tunnel (see MASQUE), then DNS details are very relevant, because the processing of the request involves establishing transport-level sessions.  The choice of who performs DNS queries - and how they do that - has a direct effect on the outcome.  But that doesn't apply here.",
          "createdAt": "2023-01-17T23:20:32Z",
          "updatedAt": "2023-01-17T23:20:32Z"
        },
        {
          "author": "paulwouters",
          "authorAssociation": "NONE",
          "body": "ok that's fine",
          "createdAt": "2023-02-21T20:03:53Z",
          "updatedAt": "2023-02-21T20:03:53Z"
        },
        {
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "body": "Closing as resolved. Thanks @paulwouters and @martinthomson.",
          "createdAt": "2023-02-21T21:24:08Z",
          "updatedAt": "2023-02-21T21:24:15Z"
        }
      ]
    },
    {
      "number": 243,
      "id": "I_kwDOE6fLGM5bnqgk",
      "title": "Media type registrations",
      "url": "https://github.com/ietf-wg-ohai/oblivious-http/issues/243",
      "state": "CLOSED",
      "author": "martinthomson",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [
        "discuss",
        "review"
      ],
      "body": "_Comment by @paulwouters_\n\nPlease address the media type registration issues raised in the secdir review raised by Alexey Melnikov :\n\nhttps://datatracker.ietf.org/doc/review-ietf-ohai-ohttp-05-secdir-lc-melnikov-2022-12-08/\n\nAdditionally, the registrations instruct IANA to use the authors email. Should this instead point to the OHAI WG, the IESG or IETF instead?\n\n",
      "createdAt": "2023-01-17T22:37:06Z",
      "updatedAt": "2023-02-21T20:10:30Z",
      "closedAt": "2023-01-19T15:05:33Z",
      "comments": [
        {
          "author": "paulwouters",
          "authorAssociation": "NONE",
          "body": "the commit referenced doesn't really address the issue raised, but other commits seemed to have addressed this",
          "createdAt": "2023-02-21T20:10:29Z",
          "updatedAt": "2023-02-21T20:10:29Z"
        }
      ]
    },
    {
      "number": 244,
      "id": "I_kwDOE6fLGM5bnqhQ",
      "title": "link fest",
      "url": "https://github.com/ietf-wg-ohai/oblivious-http/issues/244",
      "state": "CLOSED",
      "author": "martinthomson",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [
        "discuss",
        "review"
      ],
      "body": "_Comment by @paulwouters_\n\nIt seems some automated tooling was used to creating links within the document, eg for \"key configuration\": 7 times in [Section 3](https://www.ietf.org/archive/id/draft-ietf-ohai-ohttp-06.html#section-3), pointing to a few lines below in [section 3.1](https://www.ietf.org/archive/id/draft-ietf-ohai-ohttp-06.html#section-3.1), and even one time within [section 3.1](https://www.ietf.org/archive/id/draft-ietf-ohai-ohttp-06.html#section-3.1) itself pointing recursively back to itself, and 3 more times in [section 3.2](https://www.ietf.org/archive/id/draft-ietf-ohai-ohttp-06.html#section-3.2), and then I stopped counting.\n\nThe same for things like \"client\", Oblivious Gateway Resource\", etc etc culminating in [Section 5](https://www.ietf.org/archive/id/draft-ietf-ohai-ohttp-06.html#section-5) that's more blue than black, making the blue links, uhm, oblivious :P\n\n",
      "createdAt": "2023-01-17T22:37:08Z",
      "updatedAt": "2023-03-15T20:58:13Z",
      "closedAt": "2023-03-15T20:58:13Z",
      "comments": [
        {
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "body": "There are a few tooling changes that might be worth pursuing here, but I don't intend to make any changes in response to this issue.",
          "createdAt": "2023-01-17T23:21:27Z",
          "updatedAt": "2023-01-17T23:21:27Z"
        },
        {
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "body": "For reference: https://github.com/ietf-tools/datatracker/pull/5071 and https://github.com/ietf-tools/xml2rfc/pull/963 and https://github.com/cabo/kramdown-rfc/pull/185",
          "createdAt": "2023-02-02T06:31:59Z",
          "updatedAt": "2023-02-02T06:31:59Z"
        },
        {
          "author": "paulwouters",
          "authorAssociation": "NONE",
          "body": "I believe the tooling used still creates a large number of useless and distracting links in the document. I've created an agenda item to this weeks IESG's Informal meeting to discuss this.",
          "createdAt": "2023-02-21T20:11:51Z",
          "updatedAt": "2023-02-21T20:11:51Z"
        },
        {
          "author": "cabo",
          "authorAssociation": "NONE",
          "body": "Was there any outcome of the IESG discussion?\r\n\r\n(The tooling does what it is told to do.  Auto-creating links obviously needs to be applied sparingly...\r\nWe did have some discussion about making auto-created links less visible/inviting than manually created ones, but RFCXML is not very flexible here.)",
          "createdAt": "2023-03-14T12:59:59Z",
          "updatedAt": "2023-03-14T12:59:59Z"
        },
        {
          "author": "cabo",
          "authorAssociation": "NONE",
          "body": "Oh, that change actually happened:\r\n\r\nhttps://github.com/ietf-tools/xml2rfc/commit/dbdda51a16083da0762355ebe0902c3bc2a78a39\r\n\r\nIn xml2rfc 3.17.0.",
          "createdAt": "2023-03-14T22:26:55Z",
          "updatedAt": "2023-03-14T22:26:55Z"
        },
        {
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "body": "Steps have been taken.  The index remains problematic, but that's (again) on xml2rfc.",
          "createdAt": "2023-03-15T20:58:13Z",
          "updatedAt": "2023-03-15T20:58:13Z"
        }
      ]
    },
    {
      "number": 245,
      "id": "I_kwDOE6fLGM5bnqh3",
      "title": "Foreknowledge",
      "url": "https://github.com/ietf-wg-ohai/oblivious-http/issues/245",
      "state": "CLOSED",
      "author": "martinthomson",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [
        "discuss",
        "review"
      ],
      "body": "_Comment by @paulwouters_\n\nA number of items (see below comments) seem to require foreknowledge of things. Is this currently envisioned as part of a provisioning step that is not (yet?) standardized? Is it expected to be discoverable ? eg via DNS? Or is an actual provisioning protocol being worked on?\n\n",
      "createdAt": "2023-01-17T22:37:10Z",
      "updatedAt": "2023-03-15T20:58:27Z",
      "closedAt": "2023-03-15T20:58:26Z",
      "comments": [
        {
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "body": "Resolved over email.",
          "createdAt": "2023-03-15T20:58:26Z",
          "updatedAt": "2023-03-15T20:58:26Z"
        }
      ]
    },
    {
      "number": 246,
      "id": "I_kwDOE6fLGM5bnqiU",
      "title": "Dingledine2004",
      "url": "https://github.com/ietf-wg-ohai/oblivious-http/issues/246",
      "state": "CLOSED",
      "author": "martinthomson",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [
        "comment",
        "review"
      ],
      "body": "_Comment by @paulwouters_\n\nUsing \"[Dingledine2004]\" as description identifier for TOR is a bit weird :P\n\n",
      "createdAt": "2023-01-17T22:37:12Z",
      "updatedAt": "2023-02-21T20:15:00Z",
      "closedAt": "2023-01-23T01:27:32Z",
      "comments": [
        {
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "body": "This is entirely appropriate given the nature of the reference.  This is a reference to a paper, not a specification for Tor, so using \"[TOR]\" could be misleading.\r\n\r\nIt's possible that we could cite a specification, but it's really hard to pin that down properly.  https://torproject.gitlab.io/torspec/tor-spec.html seems right, but it doesn't bear a date and appears to be a rendering from https://gitweb.torproject.org/torspec.git/plain/tor-spec.txt which is in turn just a snapshot (currently https://gitweb.torproject.org/torspec.git/tree/tor-spec.txt?id=f16803f6f93680f41f72bae29cf9dbef3962f94d).  Aside from referential stability, the specification is less of a useful reference as it says less about what Tor is and gets buried in detail.\r\n\r\nI'm inclined to leave as-is, or switch to \"[DMS2004]\" to reference all author's names.",
          "createdAt": "2023-01-22T23:25:41Z",
          "updatedAt": "2023-01-22T23:25:41Z"
        },
        {
          "author": "paulwouters",
          "authorAssociation": "NONE",
          "body": "ok",
          "createdAt": "2023-02-21T20:14:59Z",
          "updatedAt": "2023-02-21T20:14:59Z"
        }
      ]
    },
    {
      "number": 247,
      "id": "I_kwDOE6fLGM5bnqix",
      "title": "links without [brackets]",
      "url": "https://github.com/ietf-wg-ohai/oblivious-http/issues/247",
      "state": "CLOSED",
      "author": "martinthomson",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [
        "comment",
        "review"
      ],
      "body": "_Comment by @paulwouters_\n\nLinks like  Oblivious Gateway Resource and clients don't have [brackets] making it appear (to me) that these are links leaving this document, when in fact these are links within the documents. Use [brackets] to denote that, or use eg: Clients [Section X]  ?\n\n",
      "createdAt": "2023-01-17T22:37:14Z",
      "updatedAt": "2023-03-15T20:58:42Z",
      "closedAt": "2023-03-15T20:58:42Z",
      "comments": [
        {
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "body": "See #244.  I don't think that would improve readability.\r\n\r\nThe new version of kramdown-rfc will allow for restyling of these links so that they are less prominent.",
          "createdAt": "2023-01-22T23:26:56Z",
          "updatedAt": "2023-01-22T23:26:56Z"
        },
        {
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "body": "See #244.",
          "createdAt": "2023-03-15T20:58:42Z",
          "updatedAt": "2023-03-15T20:58:42Z"
        }
      ]
    },
    {
      "number": 248,
      "id": "I_kwDOE6fLGM5bnqjJ",
      "title": "Figure 3",
      "url": "https://github.com/ietf-wg-ohai/oblivious-http/issues/248",
      "state": "CLOSED",
      "author": "martinthomson",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [
        "comment",
        "review"
      ],
      "body": "_Comment by @paulwouters_\n\n\"See Figure 3\" points to the immediately following figure 3. I think the text can be removed to prevent the user from going to look elsewhere :P\n\n",
      "createdAt": "2023-01-17T22:37:16Z",
      "updatedAt": "2023-02-21T21:22:28Z",
      "closedAt": "2023-02-21T21:22:28Z",
      "comments": [
        {
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "body": "I was taught to always refer to figures from prose.  We could s/./:/, I guess.",
          "createdAt": "2023-01-22T23:28:31Z",
          "updatedAt": "2023-01-22T23:28:31Z"
        },
        {
          "author": "paulwouters",
          "authorAssociation": "NONE",
          "body": "whatever you do or don't is fine here. I just found it a little confusing.",
          "createdAt": "2023-02-21T20:17:42Z",
          "updatedAt": "2023-02-21T20:17:42Z"
        },
        {
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "body": "Let's keep this as-is for now.",
          "createdAt": "2023-02-21T21:22:28Z",
          "updatedAt": "2023-02-21T21:22:28Z"
        }
      ]
    },
    {
      "number": 249,
      "id": "I_kwDOE6fLGM5bnqjt",
      "title": "Section 6.1",
      "url": "https://github.com/ietf-wg-ohai/oblivious-http/issues/249",
      "state": "CLOSED",
      "author": "martinthomson",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [
        "comment",
        "review"
      ],
      "body": "_Comment by @paulwouters_\r\n\r\n```\r\nThe request that carries the Encapsulated Request and is sent to the Oblivious\r\nRelay Resource MUST NOT include identifying information unless the Client\r\nensures that this information is removed by the relay.\r\n```\r\n\r\nHow could a client\r\n\"ensure\" that? Couldn't this at best be \"unless the Client can trust that [...]\"",
      "createdAt": "2023-01-17T22:37:18Z",
      "updatedAt": "2023-02-21T20:18:40Z",
      "closedAt": "2023-01-23T04:53:42Z",
      "comments": [
        {
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "body": "(OK, edited this so that it only includes one comment, not two mangled together.)\r\n\r\nThe answer here is down to trust, so this comment is right.  Will fix.",
          "createdAt": "2023-01-22T23:32:45Z",
          "updatedAt": "2023-01-22T23:32:45Z"
        },
        {
          "author": "paulwouters",
          "authorAssociation": "NONE",
          "body": "looks good.",
          "createdAt": "2023-02-21T20:18:39Z",
          "updatedAt": "2023-02-21T20:18:39Z"
        }
      ]
    },
    {
      "number": 250,
      "id": "I_kwDOE6fLGM5bnqkH",
      "title": "Section 6.3",
      "url": "https://github.com/ietf-wg-ohai/oblivious-http/issues/250",
      "state": "CLOSED",
      "author": "martinthomson",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [
        "question",
        "comment",
        "review"
      ],
      "body": "_Comment by @paulwouters_\r\n\r\n```\r\nNonsecure requests - such as those with the \"http\" scheme as opposed to the\r\n\"https\" scheme - SHOULD NOT be used if the Oblivious Gateway and Target\r\nResources are not on the same origin.\r\n``` \r\n\r\nWhy is this not MUST NOT? And why the\r\nloosening on same origin? Wouldn't it be best to always cause it to fail ASAP,\r\nso that the client doesn't cause plaintext data to go between oblivious relay\r\nand target host?\r\n\r\n(Edited to remove extra issues)",
      "createdAt": "2023-01-17T22:37:20Z",
      "updatedAt": "2023-04-24T06:44:56Z",
      "closedAt": "2023-04-24T06:44:56Z",
      "comments": [
        {
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "body": "@chris-wood has a better answer than I.  I'll let him expand.\r\n\r\nFrom the analysis that was provided, this is not critical to the guarantees that the system we're describing here provides.  The most common expected deployment here is where the gateway also hosts the target resource, where a \"MUST NOT\" is unnecessary.\r\n\r\nUltimately, the fundamental basis by which we ensure that requests do not get forwarded in the clear is trust in the gateway.  For clients, we trust that the gateway does not send the contents of the request to those who we don't expect.  The scheme provides a pretty strong hint, but we cannot ensure that the gateway use HTTPS properly.\r\n\r\nThis isn't dissimilar to old-style HTTP reverse proxies (like CDNs), where we trust that if we make a request over HTTPS, the CDN doesn't broadcast that request to all and sundry.  That includes using HTTPS if the request is forwarded to a remote origin server. Historically, this trust was not always well-placed, but as a general rule, it holds pretty well.",
          "createdAt": "2023-01-25T00:19:48Z",
          "updatedAt": "2023-01-25T00:19:48Z"
        },
        {
          "author": "paulwouters",
          "authorAssociation": "NONE",
          "body": "This does not answer my question of ShOULD NOT vs MUST NOT ?",
          "createdAt": "2023-02-21T20:23:47Z",
          "updatedAt": "2023-02-21T20:23:47Z"
        },
        {
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "body": "First, as a clarifying comment, the text in the document speaks about use of HTTP between client and target, i.e., what messages are sent over the wire from the gateway after decapsulation towards the target. It does not refer to use of HTTPS between relay and gateway. The latter is in fact required per the spec (but as I note below not actually needed to give the guarantees OHTTP aims to provide).\r\n\r\nNow, to try and rephrase @martinthomson's reply, use of HTTPS vs HTTP for the request to the target is entirely orthogonal to the use of OHTTP. To give a very concrete example, it would be totally reasonable for one to use OHTTP when interacting with an OCSP responder, which typically uses nonsecure HTTP instead of HTTPS.\r\n\r\nThe properties that OHTTP aims to provide are to ensure (1) that the target learns nothing about the client's IP address (and related fingerprinting information) and (2) attackers between client and relay cannot learn information about the client's query. As Martin already noted, the formal analysis does not require use of encryption between gateway and target to satisfy these requirements. It doesn't even require use of encryption between the relay and gateway!\r\n\r\nSo, at the end of the day, mandating HTTPS-only requests to targets would rule out some very real use cases for this protocol without really any benefit given the threat model.\r\n\r\n@paulwouters, please confirm if this answers your question or not. If it does not, can you please be more specific about what you think is incorrect or missing?",
          "createdAt": "2023-02-21T21:21:28Z",
          "updatedAt": "2023-02-21T21:21:28Z"
        }
      ]
    },
    {
      "number": 251,
      "id": "I_kwDOE6fLGM5bnqkg",
      "title": "similar reference names",
      "url": "https://github.com/ietf-wg-ohai/oblivious-http/issues/251",
      "state": "CLOSED",
      "author": "martinthomson",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [
        "comment",
        "review"
      ],
      "body": "_Comment by @paulwouters_\n\nODOH and ODoH seems very similar and likely to cause confusion. Rename one?\n\n",
      "createdAt": "2023-01-17T22:37:22Z",
      "updatedAt": "2023-02-21T20:24:17Z",
      "closedAt": "2023-01-23T01:27:32Z",
      "comments": [
        {
          "author": "paulwouters",
          "authorAssociation": "NONE",
          "body": "thanks",
          "createdAt": "2023-02-21T20:24:16Z",
          "updatedAt": "2023-02-21T20:24:16Z"
        }
      ]
    },
    {
      "number": 255,
      "id": "I_kwDOE6fLGM5chrHS",
      "title": "Section 6.2",
      "url": "https://github.com/ietf-wg-ohai/oblivious-http/issues/255",
      "state": "CLOSED",
      "author": "martinthomson",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [
        "comment",
        "review"
      ],
      "body": "_Comment by @paulwouters_\r\n\r\n```\r\nso delays SHOULD only be added with the consent - or at least awareness - of Clients\r\n```\r\nHow would that work? How would the client consent? Or show awareness? Or become aware ?\r\n\r\n~~~ \r\nClients can use padding\r\n~~~\r\nCan't the Target Resource also not use padding in the response? But I guess they wouldn't know about being connected to obliviously or regularly, unless the Client tells the server within its encrypted payload request? Eg if a regular https server sees a certain field, it would/could know to do some padding?  (one would assume ohttp relays are fairly well known on static IPs anyway, so the Client wouldn't be revealing much if it could ask the http server itself for random padding",
      "createdAt": "2023-01-22T23:31:36Z",
      "updatedAt": "2023-02-21T20:29:22Z",
      "closedAt": "2023-01-24T23:16:58Z",
      "comments": [
        {
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "body": "There are two questions here, delays and padding.  Both are areas in which the specification is not prescriptive.  This is deliberate, mostly because these are areas where a single strategy would be inadvisable.  Application needs vary.\r\n\r\n> How would [delays] work?\r\n\r\nWell, in any number of ways.\r\n\r\nA telemetry submission service (see also STAR) might provide greater privacy benefit from batching requests that are forwarded from the client to gateway.  In that model, the client might tolerate arbitrary delay (see https://datatracker.ietf.org/doc/draft-wood-ohai-unreliable-ohttp/ for example).  In other cases, the client still cares about a response, but it might be willing to hang around for some time (10s, 30s) for an answer.\r\n\r\n> How would the client consent? Or show awareness?  Or become aware ?\r\n\r\nHow the client consents to delays can also vary. It could be part of terms of service that are negotiated when the use of the relay is arranged.  That sort of arrangement might cover all these points.\r\n\r\nIf you are looking for protocol mechanisms, we've discussed explicit signaling as an extension.  A client could use something like `Prefer: wait=10` (see [RFC 7240](https://www.rfc-editor.org/rfc/rfc7240#section-4.3)) to indicate that within the protocol[^1].  An explicit signal demonstrates awareness for those cases where the delay might be conditional.\r\n\r\n[^1]: Note also that this sort of signaling might imply a need for the relay to remove that field, though perhaps all clients add it and so it doesn't reveal anything if forwarded.\r\n\r\n> Can't the Target Resource also not use padding in the response? \r\n\r\nYes.  Section 6.3 references back to this text, but it's worth mentioning the gateway too.\r\n\r\nThere are many things that might feed into a padding strategy.  Sometimes this is something the gateway will know because they are configured for a particular application and can look at the payload to determine how to best pad.  Clients can probably signal (within encapsulation) what they might prefer, if that would help.  Again, it's too application-specific to say much of use.\r\n\r\n",
          "createdAt": "2023-01-22T23:50:14Z",
          "updatedAt": "2023-01-22T23:50:14Z"
        },
        {
          "author": "pwouters",
          "authorAssociation": "NONE",
          "body": "Martin,\r\n\r\nThe comment it isn\u2019t my comment.\r\n\r\nMaybe there  is another Pwouters in github\r\n\r\nKind regards \r\n\r\nPaul\r\n\r\nVerstuurd vanaf mijn iPad",
          "createdAt": "2023-01-23T07:17:58Z",
          "updatedAt": "2023-01-24T00:19:26Z"
        },
        {
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "body": "My apologies.  I definitely got the wrong person there.",
          "createdAt": "2023-01-24T00:19:16Z",
          "updatedAt": "2023-01-24T00:19:33Z"
        },
        {
          "author": "paulwouters",
          "authorAssociation": "NONE",
          "body": "thanks",
          "createdAt": "2023-02-21T20:29:22Z",
          "updatedAt": "2023-02-21T20:29:22Z"
        }
      ]
    },
    {
      "number": 261,
      "id": "I_kwDOE6fLGM5cvCr4",
      "title": "Section 6.4",
      "url": "https://github.com/ietf-wg-ohai/oblivious-http/issues/261",
      "state": "CLOSED",
      "author": "martinthomson",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "_Comment by @paulwouters_\r\n\r\nIn [Section 6.4](https://www.ietf.org/archive/id/draft-ietf-ohai-ohttp-06.html#section-6.4)\r\n```\r\nClients SHOULD include a Date header field in Encapsulated Requests, unless the Oblivious Gateway Resource does not use Date for anti-replay purposes. \r\n```\r\n\r\nHow does a client know this? Preconfiguration ?\r\n\r\n``` \r\nOblivious Gateway Resources might need to allow for the time it takes requests\r\nto arrive from the Client, with a time window that is large enough to allow for\r\ndifferences in clocks.\r\n```\r\n\r\nAre we talking ms? sec? minutes? Any advise to implementers ?\r\n\r\n",
      "createdAt": "2023-01-24T23:53:42Z",
      "updatedAt": "2023-01-30T01:44:14Z",
      "closedAt": "2023-01-25T00:20:00Z",
      "comments": [
        {
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "body": "> Are we talking ms? sec? minutes? Any advise to implementers ?\r\n\r\nIt can't be less than 2s, because the granularity of the `Date` field doesn't permit detecting anything finer than 1s.\r\n\r\nI've done what I can.",
          "createdAt": "2023-01-25T00:12:11Z",
          "updatedAt": "2023-01-25T00:12:11Z"
        },
        {
          "author": "paulwouters",
          "authorAssociation": "NONE",
          "body": "This still does not seem to address:\r\n> Clients SHOULD include a Date header field in Encapsulated Requests, unless the Oblivious Gateway Resource does not use Date for anti-replay purposes.\r\n\r\nMaybe just cut off the \u201cunless\u201d part if there is no signal for this?\r\n\r\nPaul",
          "createdAt": "2023-01-26T00:43:46Z",
          "updatedAt": "2023-01-30T01:44:14Z"
        },
        {
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "body": "@paulwouters, #263 also included https://github.com/ietf-wg-ohai/oblivious-http/pull/263/commits/1529f5dc5be22fceb94b07942fcf724c95406f5e which I think should address your concern:\r\n\r\n```diff\r\n Clients SHOULD include a `Date` header field in Encapsulated Requests, unless\r\n-the Oblivious Gateway Resource does not use `Date` for anti-replay purposes.\r\n+the Client has prior knowledge that indicates that the Oblivious Gateway\r\n+Resource does not use `Date` for anti-replay purposes.\r\n```",
          "createdAt": "2023-01-26T23:39:01Z",
          "updatedAt": "2023-01-26T23:39:01Z"
        },
        {
          "author": "paulwouters",
          "authorAssociation": "NONE",
          "body": "Thanks. That commit does address the issue, mostly. I guess it moves it do\r\nan unspecified\r\nprovisioning layer :P\r\n\r\nPaul",
          "createdAt": "2023-01-27T14:07:49Z",
          "updatedAt": "2023-01-30T01:43:44Z"
        }
      ]
    },
    {
      "number": 262,
      "id": "I_kwDOE6fLGM5cvC62",
      "title": "Section 6.5",
      "url": "https://github.com/ietf-wg-ohai/oblivious-http/issues/262",
      "state": "CLOSED",
      "author": "martinthomson",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [
        "question",
        "comment"
      ],
      "body": "_Comment by @paulwouters_\r\n\r\nIn [Section 6.5](https://www.ietf.org/archive/id/draft-ietf-ohai-ohttp-06.html#section-6.5)\r\n> Therefore, Clients MUST NOT retry a request with an adjusted date more than once. \r\n\r\nHow does a client know the date was adjusted by an intermediary?",
      "createdAt": "2023-01-24T23:54:19Z",
      "updatedAt": "2023-02-21T21:13:04Z",
      "closedAt": "2023-02-21T21:13:03Z",
      "comments": [
        {
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "body": "The client adjusts the date:\r\n\r\n> Including a Date header field in the response allows the [Client](https://ietf-wg-ohai.github.io/oblivious-http/draft-ietf-ohai-ohttp.html#dfn-client) to correct clock errors by retrying the same request using the value of the Date field provided by the [Oblivious Gateway Resource](https://ietf-wg-ohai.github.io/oblivious-http/draft-ietf-ohai-ohttp.html#dfn-gateway).",
          "createdAt": "2023-01-24T23:55:08Z",
          "updatedAt": "2023-01-24T23:55:08Z"
        },
        {
          "author": "paulwouters",
          "authorAssociation": "NONE",
          "body": "Right, I understand now.",
          "createdAt": "2023-02-21T20:33:48Z",
          "updatedAt": "2023-02-21T20:33:48Z"
        },
        {
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "body": "Closing as resolved.",
          "createdAt": "2023-02-21T21:13:03Z",
          "updatedAt": "2023-02-21T21:13:03Z"
        }
      ]
    },
    {
      "number": 270,
      "id": "I_kwDOE6fLGM5e-3Ho",
      "title": "Unclear that a Key Config includes multiple HPKE Symmetric Algorithmses",
      "url": "https://github.com/ietf-wg-ohai/oblivious-http/issues/270",
      "state": "CLOSED",
      "author": "davidben",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [],
      "body": "Section 3.1 defines the following structure:\r\n```\r\nHPKE Symmetric Algorithms {\r\n  HPKE KDF ID (16),\r\n  HPKE AEAD ID (16),\r\n}\r\n\r\nKey Config {\r\n  Key Identifier (8),\r\n  HPKE KEM ID (16),\r\n  HPKE Public Key (Npk * 8),\r\n  HPKE Symmetric Algorithms Length (16),\r\n  HPKE Symmetric Algorithms (32..262140),\r\n}\r\n```\r\nhttps://www.ietf.org/archive/id/draft-ietf-ohai-ohttp-06.html#section-3.1\r\n\r\nFirst, a nit pick: \"and a set HPKE symmetric algorithms\" should say \"and a set _of_ HPKE symmetric algorithms\".\r\n\r\nMore importantly, it's unclear that there is meant to be a sequence of HPKE Symmetric Algorithms in the last field.\r\n\r\nI'm not as familiar with the RFC 9000 syntax. From https://www.rfc-editor.org/rfc/rfc9000#section-1.3, I see there is a `x (L) ...` syntax, so perhaps `HPKE Symmetric Algorithms (32) ...,`. But then we there probably needs to be prose to link the overall length to `HPKE Symmetric Algorithms Length`.",
      "createdAt": "2023-02-21T13:59:33Z",
      "updatedAt": "2023-02-27T01:19:59Z",
      "closedAt": "2023-02-27T01:19:59Z",
      "comments": [
        {
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "body": "Does the [updated Section 3.1](https://ietf-wg-ohai.github.io/oblivious-http/draft-ietf-ohai-ohttp.html#name-key-configuration-encoding) work for you?  We realized this shortcoming ourselves and made some changes.",
          "createdAt": "2023-02-21T21:03:53Z",
          "updatedAt": "2023-02-21T21:03:53Z"
        },
        {
          "author": "davidben",
          "authorAssociation": "NONE",
          "body": "Ah whoops, I forgot to check the editor's draft! That does indeed look much clearer! I'm not as familiar with the QUIC syntax... is it common to just handle this style of repeated field in prose?\r\n\r\nMy read of https://www.rfc-editor.org/rfc/rfc9000#section-1.3 is that `HPKE Symmetric Algorithms (32..524256)` still implies a single `HPKE Symmetric Algorithms`, but I could just be misunderstanding. Either way, the prose clears it up, but should it perhaps be:\r\n\r\n```\r\nKey Config {\r\n  Key Identifier (8),\r\n  HPKE KEM ID (16),\r\n  HPKE Public Key (Npk * 8),\r\n  HPKE Symmetric Algorithms Length (16) = 32..524256,\r\n  HPKE Symmetric Algorithms (32) ...,\r\n}\r\n```\r\n(Where does 524256 come from?)\r\n\r\nhttps://www.rfc-editor.org/rfc/rfc9000#section-18 seems to do something similar.",
          "createdAt": "2023-02-22T15:59:47Z",
          "updatedAt": "2023-02-22T15:59:47Z"
        },
        {
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "body": "There is not any real correspondence between the test in the diagram and the prose, except convention.  The diagram is illustrative, not normative.\r\n\r\n~~You are right about the 32..524256, the value is in bytes (not bits!) and so should just be 4..65532.~~\r\n\r\nEdit: Sorry, should have said instead that the form you describe is right, though the value for the length field will be a big-endian number in bytes (524256 is a length in bits and wouldn't fit).",
          "createdAt": "2023-02-23T00:34:03Z",
          "updatedAt": "2023-02-23T00:38:06Z"
        }
      ]
    },
    {
      "number": 271,
      "id": "I_kwDOE6fLGM5e--dw",
      "title": "Unclear that the client can choose from a list of HPKE algorithms",
      "url": "https://github.com/ietf-wg-ohai/oblivious-http/issues/271",
      "state": "CLOSED",
      "author": "Nikhar",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [],
      "body": "Following up from https://github.com/ietf-wg-ohai/oblivious-http/issues/270\r\n\r\nIt seems like the key configuration lists a set of potential HPKE algorithms that the client can use.\r\n\r\nThe section https://www.ietf.org/archive/id/draft-ietf-ohai-ohttp-06.html#section-4.3 does say \"a _selected_ combination of KDF, identified by kdf_id, and AEAD, identified by aead_id\", but it's easy to miss the _selected_ word and even then its not apparent as to what the selection is from.\r\n\r\nI think it could be made clearer that the client can choose from a list of HPKE algorithms specified in the Key Configuration.",
      "createdAt": "2023-02-21T14:18:29Z",
      "updatedAt": "2023-02-21T21:46:08Z",
      "closedAt": "2023-02-21T21:46:07Z",
      "comments": []
    },
    {
      "number": 273,
      "id": "I_kwDOE6fLGM5fE8a6",
      "title": "'Exporting' a secret in the Complete example instead of 'Extracting'?",
      "url": "https://github.com/ietf-wg-ohai/oblivious-http/issues/273",
      "state": "CLOSED",
      "author": "Nikhar",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [],
      "body": "In the [Appendix](https://www.ietf.org/archive/id/draft-ietf-ohai-ohttp-06.html#appendix-A-22) where we have a complete example request and response, it states:\r\n\r\n> The response is constructed by extracting a secret from the HPKE context:\r\n> \r\n> > 62d87a6ba569ee81014c2641f52bea36\r\n\r\nShouldn't it be response is constructed by 'exporting' a secret?\r\n\r\nGiven that in Section [4.4-3](https://www.ietf.org/archive/id/draft-ietf-ohai-ohttp-06.html#section-4.4-3), the algorithm says:\r\n\r\n> secret = context.Export(\"message/bhttp response\", Nk)\r\n\r\n\r\n\r\n",
      "createdAt": "2023-02-22T13:44:19Z",
      "updatedAt": "2023-02-23T01:13:00Z",
      "closedAt": "2023-02-23T01:13:00Z",
      "comments": []
    },
    {
      "number": 277,
      "id": "I_kwDOE6fLGM5fXVXq",
      "title": "Questions on Key Configuration Encoding",
      "url": "https://github.com/ietf-wg-ohai/oblivious-http/issues/277",
      "state": "CLOSED",
      "author": "dajiaji",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [],
      "body": "Hi folks,\r\n\r\nI'm helping @chris-wood a bit with his [ohttp implementation](https://github.com/chris-wood/ohttp-js), and I've been reading the latest spec (draft-06) closely again, in order to contribute to the ohttp implementation by improving the CI/CD process and test implementation. I found some points of concern and would like to provide feedback. I am very sorry for the feedback on the spec, which is almost finished.\r\n\r\nI am going to make several Issues, but first:\r\n\r\n1. Is the HPKE Symmetric Algorithms structure necessary?\r\n \r\nSince KDF and AEAD are inherently independent of each other, the following structure seems more reasonable. If a gateway supports multiple KDFs and AEADs, this structure can keep the size of the KeyConfig much smaller than the current one. Even if a gateway accepts only one specific KDF and AEAD, the size of the KeyConfig will be the same as the current one.\r\n\r\n```\r\nKey Config {\r\n  Key Identifier (8),\r\n  HPKE KEM ID (16),\r\n  HPKE Public Key (Npk * 8),\r\n  Supported HPKE KDF IDs Length (8), // Nkdfs\r\n  Supported HPKE KDF IDs (16 * Nkdfs), // <= 512 bytes\r\n  Supported HPKE AEAD IDs Length (8), // Naeads\r\n  Supported HPKE AEAD IDs (16 * Naeads) // <= 512 bytes\r\n}\r\n```\r\n\r\n2. Are there any OHTTP-specific attributes in Key Config?\r\n\r\nIf there is no OHTTP-specific attribute, I think it might be better to rename \"application/ohttp-keys\" to \"application/hpke-kem-keys\" or something like that.\r\n\r\n\r\n3. Do we really need to define the format of KeyConfig in this spec?\r\n\r\nThe above comments are based on the assumption that the KeyConfig definition will remain in this spec, but is it necessary to define KeyConfig in this spec at all?\r\n\r\nI think that KeyConfig is basically used by front-end applications running on web browsers, and I think that this information could be allowed to be represented in JWK as well. This would make implementation easier and allow reuse of existing library including caching mechanisms. Defining the format of KeyConfig in this spec might limit future extensibility and options. In particular, it seems to me that a 1-byte key identifier is too strict.",
      "createdAt": "2023-02-26T06:57:04Z",
      "updatedAt": "2023-03-15T20:59:02Z",
      "closedAt": "2023-03-15T20:59:02Z",
      "comments": [
        {
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "body": "The structure here matches [the same one in ECH](https://tlswg.org/draft-ietf-tls-esni/draft-ietf-tls-esni.html#section-4-2).  I agree that the structure you describe could be better, but if we intend to maintain some amount of consistency, we should look at a parallel change in ECH.  More seriously, we have active deployments of OHTTP, so any change would require some sort of coordination.  (I think that partly answers all of your questions, albeit in conflicting directions.)\r\n\r\n> it seems to me that a 1-byte key identifier is too strict\r\n\r\nGiven the nature of the systems involved, where [consistency](https://datatracker.ietf.org/doc/draft-ietf-privacypass-key-consistency/) is a requirement for privacy reasons, a small key identifier provides the right sort of constraint.  It also keeps overheads low.\r\n\r\nYour larger point, that maybe HPKE itself could have defined something akin to this, is a good one.  Maybe HPKE could have defined something like this format.  Perhaps without the key identifier part would be left off so using applications would have the ability to choose based on their own constraints.\r\n\r\nThe advantage of the approach we've taken is that if (or when) a newer and better key configuration is defined, we can just move over to using it.  That is, imperfections here are fixable by defining a replacement that is identified differently.",
          "createdAt": "2023-02-27T00:28:36Z",
          "updatedAt": "2023-02-27T00:28:36Z"
        },
        {
          "author": "dajiaji",
          "authorAssociation": "NONE",
          "body": "> The structure here matches [the same one in ECH](https://tlswg.org/draft-ietf-tls-esni/draft-ietf-tls-esni.html#section-4-2).\r\n\r\nYes, I know. But I dare to suggest it because I think we don't need to care about ECH, which is for the different layer protocol and have already been released.\r\n\r\n> More seriously, we have active deployments of OHTTP, so any change would require some sort of coordination. (I think that partly answers all of your questions, albeit in conflicting directions.)\r\n\r\nI can understand this situation well.\r\n\r\n> Given the nature of the systems involved, where [consistency](https://datatracker.ietf.org/doc/draft-ietf-privacypass-key-consistency/) is a requirement for privacy reasons, a small key identifier provides the right sort of constraint. It also keeps overheads low.\r\n\r\nI see, so the number of keys available to the gateway can be limited to a maximum of 256, which reduces the possibility that the gateway can be used to identify the client. \r\n\r\nAlthough this seems to be merely a mitigation and not a fundamental solution,  anyway I understand that the 1-byte key identifier is an OHTTP-specific feature.\r\n\r\n> Your larger point, that maybe HPKE itself could have defined something akin to this, is a good one. Maybe HPKE could have defined something like this format. Perhaps without the key identifier part would be left off so using applications would have the ability to choose based on their own constraints.\r\n\r\nStrictly speaking, rather than including the key representation specification in \u201dHPKE itself\", I mean that it might be better to have a generic KeyConfig spec for using HPKE in web applications. Another point I wanted to make is that the format spec of KeyConfig should be essentially separable from the OHTTP specification itself.\r\n\r\n> The advantage of the approach we've taken is that if (or when) a newer and better key configuration is defined, we can just move over to using it. That is, imperfections here are fixable by defining a replacement that is identified differently.\r\n\r\nIf we do not define the format itself in this specification and only describe the essential requirements, we can use various formats without revising this OHTTP specification. Whether it is application/ohttp-keys or application/json (JWK, which is one of the candidates and it can express the 1-byte key identifier with 'kid' attribute as base64 encoded 1-byte identifier).\r\n\r\nAnyway, I understand that it's difficult to revise the specification at this point. Thank you for your response.",
          "createdAt": "2023-02-27T13:05:26Z",
          "updatedAt": "2023-02-27T13:05:26Z"
        }
      ]
    },
    {
      "number": 278,
      "id": "I_kwDOE6fLGM5fXXQG",
      "title": "Reusability Considerations for Web Applications using HPKE",
      "url": "https://github.com/ietf-wg-ohai/oblivious-http/issues/278",
      "state": "CLOSED",
      "author": "dajiaji",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [],
      "body": "In addition to KeyConfig, the current OHTTP spec includes some OHTTP-independent components that can be reused by all applications using HPKE. For example, the following information in the Request Format (Section 4.1) must be defined by all of the applications acting as HPKE senders.\r\n\r\n```\r\n  Key Identifier (8),\r\n  KEM Identifier (16),\r\n  KDF Identifier (16),\r\n  AEAD Identifier (16),\r\n  Encapsulated KEM Shared Secret (8 * Nenc),\r\n```\r\nI'm thinking that the above information is very versatile and it would not be efficient to reinvent this kind of definition for every application that will do the HPKE transaction over HTTP in the future.\r\n\r\nThe same is true for the `Nonce` in Response Format (Section 4.2).\r\n\r\nIsn't there any option to use an HTTP header (e.g., the new **HPKE-Sender-Info** header) to send the above information?\r\n\r\nThis idea introducing new HTTP headers for generic HPKE purpose would allow `message/ohttp-req` and `message/ohttp-res` to be merged into `message/ohttp` representing BHTTP encrypted data with HPKE, and would also have the side benefit of allowing the gateway to reject invalid HPKE sender information (invalid key identifier, etc.) without reading the request body.\r\n\r\nI think it's not a bad idea to separate the application(OHTTP)-specific stuff in the payload and the generic HPKE parameters in the header. I would appreciate your comments on this opinion.",
      "createdAt": "2023-02-26T07:34:38Z",
      "updatedAt": "2023-03-09T05:41:52Z",
      "closedAt": "2023-03-09T05:41:52Z",
      "comments": [
        {
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "body": "In defense of the current design:\r\n\r\n* Efficiency is better this way.  A header takes a lot more space when you consider the overhead of the field name and encoding.\r\n\r\n* Reuse takes many forms.  Repurposing the design is already possible.  Your proposed field might seem to be reusable without additional work, but any application that reuses this design needs to define new constant strings for its interactions with HPKE.  That means that you can't just plug the value in without also changing the content of those strings.  If you failed to do so, then it is possible that you created a cross-protocol confusion attack.  Keeping the configuration parts in the media type-specific part means that there is a better chance of avoiding copy-paste style errors like that.",
          "createdAt": "2023-02-27T00:48:24Z",
          "updatedAt": "2023-02-27T00:48:24Z"
        },
        {
          "author": "dajiaji",
          "authorAssociation": "NONE",
          "body": "> - Efficiency is better this way. A header takes a lot more space when you consider the overhead of the field name and encoding.\r\n\r\nCertainly, it is true that using the HTTP headers is less efficient, but like not optimizing Cookie or Authorization header value by putting it into the payload, I think the overhead is acceptable.\r\n\r\n> - Reuse takes many forms. Repurposing the design is already possible. Your proposed field might seem to be reusable without additional work, but any application that reuses this design needs to define new constant strings for its interactions with HPKE. That means that you can't just plug the value in without also changing the content of those strings. If you failed to do so, then it is possible that you created a cross-protocol confusion attack. Keeping the configuration parts in the media type-specific part means that there is a better chance of avoiding copy-paste style errors like that.\r\n\r\nEach application using HPKE is responsible for defining the constant strings to be set in \"info\" and \"aad\", and the agreement on \"info\" and \"aad\" between the sender and the recipient of the application does not need to be implied in the communication protocol. Specifically, I think that the constant strings decided at the application layer does not need to be implied by the Content-Type header value (media type) because it has already been determined by the application (URL). For instance, I believe that when accessing the URL of OGR, it is already determined to be \"message/bhttp request.\" (...why not \"ohttp request\"? If there were an application other than OHTTP that encrypts message/bhttp data, would there be any problems?)\r\n\r\nI think the constant string discussion is not related to the discussion of using HTTP headers for the common parts of HPKE transactions. Did I misunderstand something?",
          "createdAt": "2023-02-27T14:19:08Z",
          "updatedAt": "2023-02-27T14:19:08Z"
        },
        {
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "body": "My point was that - while the encoding and name of your proposed header field might be the same across different usages - the semantics and use of the information is not.  That is, for OHTTP you would provide some information and for another payload type you would provide different information.  That makes it less safe to use than would be ideal.  A mistake in application would allow for confusion attacks.\r\n\r\nAlso, I don't believe that it is safe to condition behaviour on the URL.  Though a resource might expect a certain type of content and be configured to accept only that content, that URL could be provided by the attacker in another context.  If a client believes the URL accepts X, but it expects Y, the two will disagree and that tends to lead to confusion attacks.\r\n\r\n> \"message/bhttp request.\" (...why not \"ohttp request\"? [...])\r\n\r\nThe idea is that OHTTP is generic.  The formats could be replaced over time by different or better encodings.  For instance, the HTTP working group is discussing options for header encoding that might not be simple text (note: HTTP fields are not simple text anyway, if you want to get really pedantic).  OHTTP continues to work if you define a new message type, but it is important to tightly bind the message type into the encryption or we are back at the confusion attack thing.",
          "createdAt": "2023-02-28T01:03:18Z",
          "updatedAt": "2023-02-28T01:03:18Z"
        },
        {
          "author": "dajiaji",
          "authorAssociation": "NONE",
          "body": "(I couldn't have time  to reply this workdays.)\r\n\r\n> That makes it less safe to use than would be ideal. A mistake in application would allow for confusion attacks.\r\n\r\nHmm, I don't think that defining a dedicated media type for an HPKE application is helpful to make the application use an unique `info` parameter value. They are different. In fact, in the current OHTTP spec, the `info` value and the payload data of 'application/ohttp-{req,res}' media type are different.\r\n\r\nFurthermore, It does not seem practical that a web application that wants to use HPKE must define its own media type for every single one.\r\n\r\nRepeatedly, each application is responsible for populating an application-specific `info` to the HPKE context and I believe it has nothing to do with the data container format used by the app. It means that defining a dedicated media type for an HPKE app is not helpful to mitigate the cross-protocol confusion attacks. At least, the measures introducing a dedicated media type for each HPKE app appears to be less effective than the complexity introduced. Am I wrong?\r\n\r\n> Also, I don't believe that it is safe to condition behaviour on the URL. Though a resource might expect a certain type of content and be configured to accept only that content, that URL could be provided by the attacker in another context. If a client believes the URL accepts X, but it expects Y, the two will disagree and that tends to lead to confusion attacks.\r\n\r\nForget about the URL stuff. What I wanted to say is that a typical way to protect against the cross-protocol confusion attack is for each app to take care of populating an app-specific `info` value to the HPKE context (or an app-specific `aad` value to each HPKE AEAD process), and this protection method is not related to the communication protocol or data format used at the application-layer.\r\n\r\nMy proposal (introducing the `HPKE-Sender-Info` header) is based on the idea that info/aad-related information (media type?) does not need to be exchanged between the sender and recipient of the HPKE application, but encapsulated_key, key ID for KEM and selected HPKE cipher suite information (KEM, KDF and AEAD) need to be exchanged on all HPKE applications, and it is reasonable to transmit this mandatory information in a common HTTP header.\r\n\r\nIn addition, I believe that the introduction of the HPKE-Sender-Info header would be helpful not only for other HPKE applications using HTTP, but also for ORRs to guarantee the key consistency of OGRs to their clients. By observing this header, the ORRs would be able to easily detect the key consistency violations of the OGRs.",
          "createdAt": "2023-03-04T10:23:35Z",
          "updatedAt": "2023-03-04T10:23:35Z"
        },
        {
          "author": "dajiaji",
          "authorAssociation": "NONE",
          "body": "> In addition, I believe that the introduction of the HPKE-Sender-Info header would be helpful not only for other HPKE applications using HTTP, but also for ORRs to guarantee the key consistency of OGRs to their clients. By observing this header, the ORRs would be able to easily detect the key consistency violations of the OGRs.\r\n\r\nSorry, this is not true. I retract it.\r\n\r\nIf the key identifier could be a hash value of the public key like the typical `kid` of JWK, the HPKE-Sender-Info header would be useful for ORRs to detect the key consistency violation at OGRs though.",
          "createdAt": "2023-03-04T10:50:46Z",
          "updatedAt": "2023-03-04T10:50:46Z"
        },
        {
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "body": "> It does not seem practical that a web application that wants to use HPKE must define its own media type for every single one.\r\n\r\nThis is really what HTTP expects to have happen.  Distinct media types for distinct formats.  We can define a parameterized media type to ease the passage somewhat, but the vnd+ prefix should make it easy to define a proprietary media type.",
          "createdAt": "2023-03-06T00:04:24Z",
          "updatedAt": "2023-03-06T00:04:24Z"
        },
        {
          "author": "dajiaji",
          "authorAssociation": "NONE",
          "body": "Hmm, my point is that whether or not to use HPKE and whether or not to define an application-specific media type are essentially orthogonal and the HPKE stuff can be separated from the media-type by the HTTP header for HPKE.\r\n\r\nIn any case, your explanation helped me understand the current OHTTP design philosophy. Thank you very much.",
          "createdAt": "2023-03-06T22:41:13Z",
          "updatedAt": "2023-03-06T22:41:13Z"
        },
        {
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "body": "Marking as resolved.",
          "createdAt": "2023-03-09T05:41:52Z",
          "updatedAt": "2023-03-09T05:41:52Z"
        }
      ]
    },
    {
      "number": 279,
      "id": "I_kwDOE6fLGM5fXXeJ",
      "title": "Need to clarify how to handle the HPKE version",
      "url": "https://github.com/ietf-wg-ohai/oblivious-http/issues/279",
      "state": "CLOSED",
      "author": "dajiaji",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [],
      "body": "This is the last comment on draft-06.\r\n\r\nAlthough HPKE seems to be designed with an emphasis on ciphersuite agility, the HPKE spec defines a version label (\"HPKE-v1\") somehow. While it's unclear to me what is the trigger of defining v2 and what v2 will look like, I think some mention of how versions are handled in this OHTTP spec would be necessary.\r\n\r\nAlso, it's clear that OHTTP only uses the HPKE Base mode, but that fact is only implied by the pseudo-function name. I think it would be better to state this explicitly in the spec.\r\n\r\nAgain, I am very sorry for the feedback on the spec, which is almost finished.",
      "createdAt": "2023-02-26T07:39:17Z",
      "updatedAt": "2023-03-09T05:41:34Z",
      "closedAt": "2023-03-09T05:41:34Z",
      "comments": [
        {
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "body": "(Don't apologize for good feedback.)\r\n\r\nAny incompatible HPKE revision would not be usable until a revised version of this document is published.  That update would need to define new media type and whatnot.\r\n\r\nI don't know whether this needs to be explicit in the draft.  I think that the \"v1\" in HPKE is less of a commitment to the idea that HPKE might be revised than it is reflection on the process of its authorship.  The unadorned string \"HPKE\" could have turned into \"HPKE-v2\" just as easily as \"HPKE-v1\" can, but \"HPKE-v1\" is the same length as the \"HPKE-08\" string used in draft versions.  None of that really implies that there is any need to revise HPKE.  Also, a revision to HPKE would be very disruptive, so I don't think we need to spend too much time contemplating the possibility, other than to have the above answer handy.",
          "createdAt": "2023-02-27T00:47:05Z",
          "updatedAt": "2023-02-27T00:47:05Z"
        },
        {
          "author": "dajiaji",
          "authorAssociation": "NONE",
          "body": "Thanks. I understand the reason why HPKE has the version label. It's unfortunate that \"-v1\" wasn't removed in the final stage of specification development, but\r\n\r\n> Also, a revision to HPKE would be very disruptive, so I don't think we need to spend too much time contemplating the possibility, other than to have the above answer handy.\r\n\r\nIt makes sense.",
          "createdAt": "2023-02-27T12:53:14Z",
          "updatedAt": "2023-02-27T12:53:14Z"
        },
        {
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "body": "Marking this as resolved.",
          "createdAt": "2023-03-09T05:41:34Z",
          "updatedAt": "2023-03-09T05:41:34Z"
        }
      ]
    },
    {
      "number": 285,
      "id": "I_kwDOE6fLGM5kK20F",
      "title": "An unknown KEM can render other key configurations unreachable",
      "url": "https://github.com/ietf-wg-ohai/oblivious-http/issues/285",
      "state": "OPEN",
      "author": "martinthomson",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Processing a key configuration encoding requires that you know the KEM.  This is OK for a key configuration in isolation, but not if you have concatenated multiple.  If a configuration with an unknown KEM precedes a configuration with a known KEM in the list of encoded key configurations, you can't reach the configuration - at least not without a lot of error-prone guessing.",
      "createdAt": "2023-04-24T06:47:24Z",
      "updatedAt": "2023-04-27T14:55:16Z",
      "closedAt": null,
      "comments": [
        {
          "author": "ericorth",
          "authorAssociation": "NONE",
          "body": "How confident are you that this is an essential usecase to fix? For me, because so much of OHAI is focused around cases where there is significant out-of-band coordination and agreements between the key provider and consumer, it doesn't seem completely unworkable to just say they should coordinate on what the recognized KEMs are.  So that would seem to put this issue in the category of something we could have fixed if we realized it sooner but maybe not worth it after WGLC.  But I haven't fully though through all the usecases and it could easily be the case that so far I've only dealt with cases with closer coordination than you have.",
          "createdAt": "2023-04-26T20:58:59Z",
          "updatedAt": "2023-04-26T20:58:59Z"
        },
        {
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "body": "We're currently running an experiment where we are using something like this.  And we're doing so in order to open up to more permissive arrangements than we currently have.  OHTTP is potentially a way for an ISP DNS resolver to be used despite having an alternative that is known to be trustworthy (i.e., a resolver from our TRR program).  All they have to do is use [DDR](https://datatracker.ietf.org/doc/html/draft-ietf-add-ddr)/[DNR](https://datatracker.ietf.org/doc/html/draft-ietf-add-dnr) and the [oblivious tag](https://datatracker.ietf.org/doc/draft-ietf-ohai-svcb-config/).",
          "createdAt": "2023-04-26T23:45:44Z",
          "updatedAt": "2023-04-26T23:45:44Z"
        },
        {
          "author": "ericorth",
          "authorAssociation": "NONE",
          "body": "Ah.  Don't know why I forgot ohai-svcb-config includes application/ohttp-keys distribution.  But that makes sense, so I agree that this fix seems necessary.",
          "createdAt": "2023-04-27T14:55:16Z",
          "updatedAt": "2023-04-27T14:55:16Z"
        }
      ]
    }
  ],
  "pulls": [
    {
      "number": 1,
      "id": "MDExOlB1bGxSZXF1ZXN0NTU1MzI5NjA4",
      "title": "Overview",
      "url": "https://github.com/ietf-wg-ohai/oblivious-http/pull/1",
      "state": "MERGED",
      "author": "martinthomson",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2021-01-15T01:38:01Z",
      "updatedAt": "2021-01-18T22:15:16Z",
      "baseRepository": "ietf-wg-ohai/oblivious-http",
      "baseRefName": "main",
      "baseRefOid": "501f54803ff2879722decce1041bac235bf74dcd",
      "headRepository": "ietf-wg-ohai/oblivious-http",
      "headRefName": "overview",
      "headRefOid": "3ffe08d009791ae96e719ba6c14cdb2161ae49e4",
      "closedAt": "2021-01-15T17:15:52Z",
      "mergedAt": "2021-01-15T17:15:52Z",
      "mergedBy": "chris-wood",
      "mergeCommit": {
        "oid": "fab065c185f6dcb9d11965556a2a71d668a4e365"
      },
      "comments": [],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTY5NDQ4Mjk4",
          "commit": {
            "abbreviatedOid": "3ffe08d"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2021-01-15T17:15:43Z",
          "updatedAt": "2021-01-15T17:15:43Z",
          "comments": []
        }
      ]
    },
    {
      "number": 3,
      "id": "MDExOlB1bGxSZXF1ZXN0NTU1NDI2NTA2",
      "title": "Message format",
      "url": "https://github.com/ietf-wg-ohai/oblivious-http/pull/3",
      "state": "MERGED",
      "author": "martinthomson",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "This is fully-featured, which is a little awkward.  We can probably trim this down a little once we have a better handle on the requirements.",
      "createdAt": "2021-01-15T06:01:46Z",
      "updatedAt": "2021-01-23T01:50:20Z",
      "baseRepository": "ietf-wg-ohai/oblivious-http",
      "baseRefName": "main",
      "baseRefOid": "095341dc8acf1af51f423957ccb3cb6e45f40c8c",
      "headRepository": "ietf-wg-ohai/oblivious-http",
      "headRefName": "message-format",
      "headRefOid": "96004ecd61b917a5a36b0c9444afb3ec754b1218",
      "closedAt": "2021-01-23T01:50:19Z",
      "mergedAt": "2021-01-23T01:50:19Z",
      "mergedBy": "martinthomson",
      "mergeCommit": {
        "oid": "6e86e49665a5d42364180ffde2c83919d4201e50"
      },
      "comments": [
        {
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "body": "@martinthomson is the idea here that padding might just be a separate field for each (un)known-length message?",
          "createdAt": "2021-01-18T00:19:46Z",
          "updatedAt": "2021-01-18T00:19:46Z"
        },
        {
          "author": "martinthomson",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Not sure if you meant to ask this on #4 instead.  The idea I had for padding is that the format as described is self-delimiting.  (Actually, it was accidental, and I only realized that it worked that way after coming back and thinking about padding.)\r\n\r\nTherefore, you can just add padding at the end.  We can mandate the use of zero bytes, which works for the truncated message syntax I suggest here.",
          "createdAt": "2021-01-18T00:39:57Z",
          "updatedAt": "2021-01-18T00:39:57Z"
        }
      ],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTczNTA2NDIz",
          "commit": {
            "abbreviatedOid": "2cdb3b9"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "Initial pass complete. I think I grok this, but I need to implement it to make sure. (Feel free to merge anyhow.)",
          "createdAt": "2021-01-21T16:25:17Z",
          "updatedAt": "2021-01-21T16:43:38Z",
          "comments": [
            {
              "originalPosition": 9,
              "body": "```suggestion\r\nincluding the application of authenticated encryption.\r\n```\r\n\r\n... to not encourage folks to authenticate without encrypting. :) ",
              "createdAt": "2021-01-21T16:25:17Z",
              "updatedAt": "2021-01-23T01:49:09Z"
            },
            {
              "originalPosition": 25,
              "body": "```suggestion\r\nThis document uses terminology from HTTP ({{!HTTP}}) and notation from QUIC ({{!QUIC=I-D.ietf-quic-transport}}).\r\n```",
              "createdAt": "2021-01-21T16:26:28Z",
              "updatedAt": "2021-01-23T01:49:09Z"
            },
            {
              "originalPosition": 221,
              "body": "```suggestion\r\nthe final status code is encoded.\r\n```",
              "createdAt": "2021-01-21T16:40:39Z",
              "updatedAt": "2021-01-23T01:49:09Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTc0NzA2NTE2",
          "commit": {
            "abbreviatedOid": "7e9bc64"
          },
          "author": "tfpauly",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2021-01-23T00:18:13Z",
          "updatedAt": "2021-01-23T00:32:00Z",
          "comments": [
            {
              "originalPosition": 8,
              "body": "```suggestion\r\nprotocol. This enables the transformation of entire messages,\r\n```",
              "createdAt": "2021-01-23T00:18:13Z",
              "updatedAt": "2021-01-23T01:49:09Z"
            },
            {
              "originalPosition": 27,
              "body": "```suggestion\r\n  lengths are not known when encoding starts.\r\n```",
              "createdAt": "2021-01-23T00:19:11Z",
              "updatedAt": "2021-01-23T01:49:09Z"
            },
            {
              "originalPosition": 72,
              "body": "What's the meaning of the extra `...` on this line? That it is optional?",
              "createdAt": "2021-01-23T00:22:41Z",
              "updatedAt": "2021-01-23T01:49:09Z"
            },
            {
              "originalPosition": 194,
              "body": "```suggestion\r\napply to the construction of these values. However, where the `:authority`\r\n```",
              "createdAt": "2021-01-23T00:28:01Z",
              "updatedAt": "2021-01-23T01:49:09Z"
            },
            {
              "originalPosition": 195,
              "body": "I like this solution \ud83d\udc4d ",
              "createdAt": "2021-01-23T00:28:19Z",
              "updatedAt": "2021-01-23T01:49:09Z"
            },
            {
              "originalPosition": 268,
              "body": "Do we see a way forward to have a binary encoding of structured fields? While we don't need to specify that here, it'd be nice to leave it open.",
              "createdAt": "2021-01-23T00:31:15Z",
              "updatedAt": "2021-01-23T01:49:09Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTc0NzA5ODY0",
          "commit": {
            "abbreviatedOid": "7e9bc64"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2021-01-23T00:33:03Z",
          "updatedAt": "2021-01-23T00:33:03Z",
          "comments": [
            {
              "originalPosition": 72,
              "body": "It means the field is repeated one or more times (I stumbled across this myself).",
              "createdAt": "2021-01-23T00:33:03Z",
              "updatedAt": "2021-01-23T01:49:09Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTc0NzEwMDg5",
          "commit": {
            "abbreviatedOid": "7e9bc64"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2021-01-23T00:34:04Z",
          "updatedAt": "2021-01-23T00:34:04Z",
          "comments": [
            {
              "originalPosition": 268,
              "body": "Does anything need to change to accommodate them here? I figured they'd just be values with a different encoding.",
              "createdAt": "2021-01-23T00:34:04Z",
              "updatedAt": "2021-01-23T01:49:09Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTc0NzIyMjc0",
          "commit": {
            "abbreviatedOid": "7e9bc64"
          },
          "author": "martinthomson",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2021-01-23T01:48:01Z",
          "updatedAt": "2021-01-23T01:49:17Z",
          "comments": [
            {
              "originalPosition": 72,
              "body": "zero or more, yeah.",
              "createdAt": "2021-01-23T01:48:01Z",
              "updatedAt": "2021-01-23T01:49:17Z"
            },
            {
              "originalPosition": 268,
              "body": "A new format is what I was thinking, or maybe use the next bit in the framing indicator.  The latter has some risks though.",
              "createdAt": "2021-01-23T01:48:36Z",
              "updatedAt": "2021-01-23T01:49:17Z"
            }
          ]
        }
      ]
    },
    {
      "number": 7,
      "id": "MDExOlB1bGxSZXF1ZXN0NTU1ODcwMDUw",
      "title": "Port and modify ODoH encapsulation details.",
      "url": "https://github.com/ietf-wg-ohai/oblivious-http/pull/7",
      "state": "MERGED",
      "author": "chris-wood",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "This is mostly a port from ODoH to start. We can modify/tweak as needed going forward.",
      "createdAt": "2021-01-15T18:21:04Z",
      "updatedAt": "2021-01-18T22:15:14Z",
      "baseRepository": "ietf-wg-ohai/oblivious-http",
      "baseRefName": "main",
      "baseRefOid": "fab065c185f6dcb9d11965556a2a71d668a4e365",
      "headRepository": "ietf-wg-ohai/oblivious-http",
      "headRefName": "caw/first-hpke",
      "headRefOid": "008247cf1dfca4e413bc03ce33c1081e716c8055",
      "closedAt": "2021-01-18T00:04:32Z",
      "mergedAt": "2021-01-18T00:04:32Z",
      "mergedBy": "martinthomson",
      "mergeCommit": {
        "oid": "8bda1a4db04a3b407e2ddfa9674d7b4a458db048"
      },
      "comments": [],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTY5NTY2Mzg5",
          "commit": {
            "abbreviatedOid": "008247c"
          },
          "author": "tfpauly",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2021-01-15T19:38:51Z",
          "updatedAt": "2021-01-15T19:38:51Z",
          "comments": [
            {
              "originalPosition": 106,
              "body": "Why not describe this above where the struct with padding is defined?",
              "createdAt": "2021-01-15T19:38:51Z",
              "updatedAt": "2021-01-15T19:38:51Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTY5NTY2NTA2",
          "commit": {
            "abbreviatedOid": "008247c"
          },
          "author": "tfpauly",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2021-01-15T19:39:03Z",
          "updatedAt": "2021-01-15T19:39:03Z",
          "comments": []
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTY5NTY5Mzgz",
          "commit": {
            "abbreviatedOid": "008247c"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2021-01-15T19:43:28Z",
          "updatedAt": "2021-01-15T19:43:28Z",
          "comments": [
            {
              "originalPosition": 106,
              "body": "I left it here in case we wanted more details (recommended padding policy a la ECH?). We can move it around, though.",
              "createdAt": "2021-01-15T19:43:28Z",
              "updatedAt": "2021-01-15T19:43:28Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTcwMTA4Mzgy",
          "commit": {
            "abbreviatedOid": "008247c"
          },
          "author": "martinthomson",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "Lots of things to follow up on here, but I'm going to merge and we can iron those out later.  We need a starting point and this is a good starting point.",
          "createdAt": "2021-01-17T23:43:48Z",
          "updatedAt": "2021-01-18T00:04:14Z",
          "comments": [
            {
              "originalPosition": 19,
              "body": "See #4 here. :)",
              "createdAt": "2021-01-17T23:43:48Z",
              "updatedAt": "2021-01-18T00:04:14Z"
            },
            {
              "originalPosition": 7,
              "body": "I'll look after that soon.",
              "createdAt": "2021-01-17T23:44:01Z",
              "updatedAt": "2021-01-18T00:04:14Z"
            },
            {
              "originalPosition": 31,
              "body": "```suggestion\r\n  Key Identifier (..),\r\n```\r\n\r\nI'm so glad you included a key identifier.  There wasn't one in the ODoH draft I was reading and it was bothering me.\r\n\r\nHowever, I don't think that you need to include a key identifier in responses.  The request/response thing will ensure that there is no possibility for confusion.  That means that the response can just be the output of aead.Seal.",
              "createdAt": "2021-01-17T23:44:59Z",
              "updatedAt": "2021-01-18T00:04:14Z"
            },
            {
              "originalPosition": 53,
              "body": "To be clear, this does not include the length field, right?",
              "createdAt": "2021-01-17T23:46:07Z",
              "updatedAt": "2021-01-18T00:04:14Z"
            },
            {
              "originalPosition": 32,
              "body": "I think that we can drop the length prefix for the encrypted blob.",
              "createdAt": "2021-01-17T23:48:21Z",
              "updatedAt": "2021-01-18T00:04:14Z"
            },
            {
              "originalPosition": 57,
              "body": "I think that you are missing `enc` here.  Isn't the message:\r\n\r\n```\r\nkeyID.length || keyID || enc || encrypted_msg\r\n```\r\n\r\nReading the -07 HPKE draft, it doesn't include `enc` in the output of `context.Seal`.  Should it?",
              "createdAt": "2021-01-17T23:49:04Z",
              "updatedAt": "2021-01-18T00:04:14Z"
            },
            {
              "originalPosition": 65,
              "body": "The AAD  is `0x1 || keyID`.",
              "createdAt": "2021-01-17T23:52:44Z",
              "updatedAt": "2021-01-18T00:04:14Z"
            },
            {
              "originalPosition": 45,
              "body": "This needs to mention the string \"request\".",
              "createdAt": "2021-01-17T23:54:03Z",
              "updatedAt": "2021-01-18T00:04:14Z"
            },
            {
              "originalPosition": 54,
              "body": "```suggestion\r\nct = context.Seal(aad, msg)\r\nencrypted_msg = enc || ct\r\n```",
              "createdAt": "2021-01-17T23:54:48Z",
              "updatedAt": "2021-01-18T00:04:14Z"
            },
            {
              "originalPosition": 46,
              "body": "If you want to match the pseudocode, add a step 2:\r\n\r\n```suggestion\r\n2. Construct additional associated data, `aad`, by prepending a single byte with a value 0x01 to the key identifier. The key identifier length is not included in the AAD.\r\n3. Encrypt (seal) `msg` with `aad` as associated data using `context`, yielding ciphertext `ct`\r\n```",
              "createdAt": "2021-01-17T23:56:22Z",
              "updatedAt": "2021-01-18T00:04:14Z"
            },
            {
              "originalPosition": 83,
              "body": "This step needs more substance.  The pseudocode is far more complete.",
              "createdAt": "2021-01-17T23:59:15Z",
              "updatedAt": "2021-01-18T00:04:14Z"
            },
            {
              "originalPosition": 84,
              "body": "Not sure about using an empty key identifier.  The construction of the context does not include the key identifier, so we aren't binding the response to the entire request in any way.  Including the key ID as AAD might do the job.  We don't have to send it.",
              "createdAt": "2021-01-18T00:00:53Z",
              "updatedAt": "2021-01-18T00:04:14Z"
            },
            {
              "originalPosition": 94,
              "body": "```suggestion\r\nkey = context.Export(\"response key\", Nk)\r\nnonce = context.Export(\"response nonce\", Nn)\r\naad = ???\r\nencrypted_msg = Seal(key, nonce, aad, resp)\r\n```\r\n\r\nMy preference would be to export two values for this.",
              "createdAt": "2021-01-18T00:02:12Z",
              "updatedAt": "2021-01-18T00:04:14Z"
            },
            {
              "originalPosition": 106,
              "body": "I think that we can defer padding to the binary message structure, ultimately.  See #4.",
              "createdAt": "2021-01-18T00:03:17Z",
              "updatedAt": "2021-01-18T00:04:14Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTcwMTExMTUz",
          "commit": {
            "abbreviatedOid": "008247c"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2021-01-18T00:10:09Z",
          "updatedAt": "2021-01-18T00:10:09Z",
          "comments": [
            {
              "originalPosition": 94,
              "body": "We considered this for ODoH too, but this removes binding between the response encryption key material and the request. So, in theory, I think it would be possible for an application to mistakenly send the same `enc` to the server, forcing it to derive the same key and nonce, and possibly reuse them for encrypting the response. I think we should bake key/nonce re-use into the encapsulation mechanism, if possible.",
              "createdAt": "2021-01-18T00:10:09Z",
              "updatedAt": "2021-01-18T00:10:35Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTcwMTExNDg1",
          "commit": {
            "abbreviatedOid": "008247c"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2021-01-18T00:13:38Z",
          "updatedAt": "2021-01-18T00:13:38Z",
          "comments": [
            {
              "originalPosition": 57,
              "body": "Yeah, I was going for brevity in the textual descriptions, but we make it more complete to match the pseudocode. \r\n\r\n> Reading the -07 HPKE draft, it doesn't include enc in the output of context.Seal. Should it?\r\n\r\nI don't think so, since you might want to use the same context for multiple seals but don't want to send `enc` alongside each ciphertext.",
              "createdAt": "2021-01-18T00:13:38Z",
              "updatedAt": "2021-01-18T00:13:38Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTcwMTExNTYy",
          "commit": {
            "abbreviatedOid": "008247c"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2021-01-18T00:14:19Z",
          "updatedAt": "2021-01-18T00:14:20Z",
          "comments": [
            {
              "originalPosition": 32,
              "body": "Would the length just be inferred as \"rest of message\"? (If we're confident that it's always unambiguous, I'm fine omitting it)",
              "createdAt": "2021-01-18T00:14:19Z",
              "updatedAt": "2021-01-18T00:14:20Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTcwMTExNTk5",
          "commit": {
            "abbreviatedOid": "008247c"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2021-01-18T00:14:43Z",
          "updatedAt": "2021-01-18T00:14:43Z",
          "comments": [
            {
              "originalPosition": 53,
              "body": "The intention was for it to include the length and value --`keyID` is a Key Identifier message, which includes the length. ",
              "createdAt": "2021-01-18T00:14:43Z",
              "updatedAt": "2021-01-18T00:14:53Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTcwMTExODY0",
          "commit": {
            "abbreviatedOid": "008247c"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2021-01-18T00:16:55Z",
          "updatedAt": "2021-01-18T00:16:55Z",
          "comments": [
            {
              "originalPosition": 31,
              "body": "Admittedly it's a bit of YAGNI, so I'm fine dropping it, but there were prior discussions about the response using something other than symmetric encryption, and the key ID \"would help\" there. (No concrete use case now, so let's just drop it.)",
              "createdAt": "2021-01-18T00:16:55Z",
              "updatedAt": "2021-01-18T00:16:55Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTcwMTExODcz",
          "commit": {
            "abbreviatedOid": "008247c"
          },
          "author": "martinthomson",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2021-01-18T00:16:59Z",
          "updatedAt": "2021-01-18T00:16:59Z",
          "comments": [
            {
              "originalPosition": 94,
              "body": "Oh, I missed the fact that you are including the entire request (?) in the key schedule.  That seems like something that is worth documenting.  I missed it completely.\r\n\r\nHowever, it might be enough to include `enc`, so that you don't have to remember the entire message.",
              "createdAt": "2021-01-18T00:16:59Z",
              "updatedAt": "2021-01-18T00:16:59Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTcwMTExOTEx",
          "commit": {
            "abbreviatedOid": "008247c"
          },
          "author": "martinthomson",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2021-01-18T00:17:20Z",
          "updatedAt": "2021-01-18T00:17:21Z",
          "comments": [
            {
              "originalPosition": 32,
              "body": "Right, rest of message should do.",
              "createdAt": "2021-01-18T00:17:20Z",
              "updatedAt": "2021-01-18T00:17:21Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTcwMTEyNjAw",
          "commit": {
            "abbreviatedOid": "008247c"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2021-01-18T00:23:20Z",
          "updatedAt": "2021-01-18T00:23:20Z",
          "comments": [
            {
              "originalPosition": 94,
              "body": "Even `enc` might not be enough, since a client could mistakenly re-use `enc` for more than one request, leading to the nonce/key reuse issue, I think.",
              "createdAt": "2021-01-18T00:23:20Z",
              "updatedAt": "2021-01-18T00:23:20Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTcwMTE0MzE0",
          "commit": {
            "abbreviatedOid": "008247c"
          },
          "author": "martinthomson",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2021-01-18T00:36:34Z",
          "updatedAt": "2021-01-18T00:36:35Z",
          "comments": [
            {
              "originalPosition": 94,
              "body": "At that point you have nonce reuse for the request, so any protection you have for the response is far less valuable.",
              "createdAt": "2021-01-18T00:36:35Z",
              "updatedAt": "2021-01-18T00:36:35Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTcwMTIxNDEy",
          "commit": {
            "abbreviatedOid": "008247c"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2021-01-18T01:21:01Z",
          "updatedAt": "2021-01-18T01:21:02Z",
          "comments": [
            {
              "originalPosition": 94,
              "body": "Hmm, true, though only if the request contents are different, right? Either way, if enc is reused across requests, it seems:\r\n\r\n1. If the request is different, then we have reuse on the request\r\n2. If the request is the same, and the response is different, then we have reuse on the response. \r\n3. If the request and responses are the same, then no reuse\r\n\r\nUnless I'm missing something, (1) seems something we may have to just acknowledge. I don't see a way to prevent it. One might try to include a nonce in the `context` derivation, but if the client reuses `enc`, then it might just reuse that nonce. (ODoH avoided this since the requests always had some entropy in them, and should therefore be different with high probability.)\r\n\r\nSo if we want to focus on (2) and (3), where the requests are the same, then it seems (2) should be the assumed case. (Relying on content to never change seems silly.) And the only way to seemingly prevent that is for the server to contribute randomness to the key derivation. \r\n\r\nGiven that, I see a number of options:\r\n\r\n1. Include request in the key derivation: this doesn't address case (2) above.\r\n2. Include server nonce in the key derivation: this addresses (2), but makes the server entirely responsible for preventing nonce reuse. (Do we trust their randomness?)\r\n3. Include both request and a server nonce in key derivation: this addresses (2), and hedges against bad randomness\r\n\r\nWhat do you think?",
              "createdAt": "2021-01-18T01:21:02Z",
              "updatedAt": "2021-01-18T01:21:02Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTcwMTI1NzQ0",
          "commit": {
            "abbreviatedOid": "008247c"
          },
          "author": "martinthomson",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2021-01-18T01:44:13Z",
          "updatedAt": "2021-01-18T01:44:13Z",
          "comments": [
            {
              "originalPosition": 94,
              "body": "I think that there is no really good answer here.  Given 0-RTT, the risk of request replay seems like we might want to have some sort of nonce.  Having a nonce in both places makes some sense.  Let's open an issue on this rather than continue here though.",
              "createdAt": "2021-01-18T01:44:13Z",
              "updatedAt": "2021-01-18T01:44:13Z"
            }
          ]
        }
      ]
    },
    {
      "number": 9,
      "id": "MDExOlB1bGxSZXF1ZXN0NTU2NDY3Mzc3",
      "title": "Do some basic cleanup for encapsulation",
      "url": "https://github.com/ietf-wg-ohai/oblivious-http/pull/9",
      "state": "MERGED",
      "author": "martinthomson",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "This just expands the text and tries to be explicit about everything.\r\n\r\nThe one change I've included here is a change from 32 to Nsk for the\r\nexported secret.  I think that's in line with the HPKE intent.\r\nConstants make me nervous.",
      "createdAt": "2021-01-18T02:24:29Z",
      "updatedAt": "2021-01-18T22:15:14Z",
      "baseRepository": "ietf-wg-ohai/oblivious-http",
      "baseRefName": "main",
      "baseRefOid": "8bda1a4db04a3b407e2ddfa9674d7b4a458db048",
      "headRepository": "ietf-wg-ohai/oblivious-http",
      "headRefName": "cleanup-encapsulation",
      "headRefOid": "9b18c9243821a9e5f6b1804316e140f7d7ee3fd0",
      "closedAt": "2021-01-18T15:23:57Z",
      "mergedAt": "2021-01-18T15:23:57Z",
      "mergedBy": "chris-wood",
      "mergeCommit": {
        "oid": "fd90f306ae8d62cd9a4803bc3837ed40772c36e2"
      },
      "comments": [
        {
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "body": "I'm going to merge, and then apply my suggestions and the nonce change in a followup PR.",
          "createdAt": "2021-01-18T15:23:53Z",
          "updatedAt": "2021-01-18T15:23:53Z"
        }
      ],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTcwNTc1MTUw",
          "commit": {
            "abbreviatedOid": "9b18c92"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2021-01-18T15:10:08Z",
          "updatedAt": "2021-01-18T15:23:05Z",
          "comments": [
            {
              "originalPosition": 74,
              "body": "Hmm, I think the keyID as sent on the wire, which includes the length, should be the AAD. \r\n\r\n```suggestion\r\n   with a value of 0x01 to the key identifier. The key identifier length is\r\n   included in the AAD.\r\n```",
              "createdAt": "2021-01-18T15:10:08Z",
              "updatedAt": "2021-01-18T15:23:05Z"
            },
            {
              "originalPosition": 83,
              "body": "```suggestion\r\n   `enc` and `ct`, yielding an Encapsulated Request `enc_request`. Note that `enc` is of \r\n    fixed-length, so there is no ambiguity in parsing `enc` and `ct`.\r\n```",
              "createdAt": "2021-01-18T15:12:16Z",
              "updatedAt": "2021-01-18T15:23:05Z"
            },
            {
              "originalPosition": 93,
              "body": "Where is `vencode` defined?",
              "createdAt": "2021-01-18T15:12:39Z",
              "updatedAt": "2021-01-18T15:23:05Z"
            },
            {
              "originalPosition": 93,
              "body": "```suggestion\r\nkeyID_length = vencode(len(keyID)\r\naad = concat(0x01, keyID_length, keyID)\r\nct = context.Seal(aad, request)\r\nenc_request = concat(keyID_length, keyID, enc, ct)\r\n```",
              "createdAt": "2021-01-18T15:14:17Z",
              "updatedAt": "2021-01-18T15:23:05Z"
            },
            {
              "originalPosition": 102,
              "body": "```suggestion\r\n   private key, `skR`, corresponding to `keyID`. If no such key exists, the server MUST return\r\n   an error with HTTP status code 401.\r\n```",
              "createdAt": "2021-01-18T15:15:47Z",
              "updatedAt": "2021-01-18T15:23:05Z"
            },
            {
              "originalPosition": 114,
              "body": "```suggestion\r\n   with a value of 0x01 to the key identifier, which includes its length.\r\n```",
              "createdAt": "2021-01-18T15:16:43Z",
              "updatedAt": "2021-01-18T15:23:05Z"
            },
            {
              "originalPosition": 117,
              "body": "```suggestion\r\n   on failure. If decryption fails, the server MUST return an error with HTTP status code 400.\r\n```",
              "createdAt": "2021-01-18T15:17:20Z",
              "updatedAt": "2021-01-18T15:23:06Z"
            },
            {
              "originalPosition": 126,
              "body": "```suggestion\r\naad = concat(0x01, vencode(len(keyID), keyID)\r\n```",
              "createdAt": "2021-01-18T15:17:59Z",
              "updatedAt": "2021-01-18T15:23:06Z"
            }
          ]
        }
      ]
    },
    {
      "number": 10,
      "id": "MDExOlB1bGxSZXF1ZXN0NTU2NDg5NDcx",
      "title": "Add a bunch of words",
      "url": "https://github.com/ietf-wg-ohai/oblivious-http/pull/10",
      "state": "MERGED",
      "author": "martinthomson",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "A first cut at the intro and the text describing how different entities\r\nmight think about each other.\r\n\r\nAfter all this, I'm running short on stuff that might go in security\r\nconsiderations.  Maybe we should move this new text there so that the\r\nsecurity people can find what they need under a familiar heading.",
      "createdAt": "2021-01-18T03:50:19Z",
      "updatedAt": "2021-01-18T22:15:13Z",
      "baseRepository": "ietf-wg-ohai/oblivious-http",
      "baseRefName": "main",
      "baseRefOid": "8bda1a4db04a3b407e2ddfa9674d7b4a458db048",
      "headRepository": "ietf-wg-ohai/oblivious-http",
      "headRefName": "words",
      "headRefOid": "909d6c5d20da1d247a3cd75882816d583e1aec73",
      "closedAt": "2021-01-18T21:43:07Z",
      "mergedAt": "2021-01-18T21:43:07Z",
      "mergedBy": "martinthomson",
      "mergeCommit": {
        "oid": "33d57777b41a2bff8be5f4e86e0ae503c3b1d2e1"
      },
      "comments": [],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTcwNjAyOTEx",
          "commit": {
            "abbreviatedOid": "58decd7"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "This looks good! The security analysis we did for ODoH can be modified and moved over here, in the security considerations, after this change lands. (That change can go into the different attacks that are possible for malicious or HbC proxies or targets.)\r\n\r\nFeel free to merge when ready.",
          "createdAt": "2021-01-18T15:42:20Z",
          "updatedAt": "2021-01-18T15:59:32Z",
          "comments": [
            {
              "originalPosition": 41,
              "body": "```suggestion\r\nis significant. Preventing request linkability requires that each request\r\nuse a completely new TLS connection to the server. At a minimum,\r\n```",
              "createdAt": "2021-01-18T15:42:20Z",
              "updatedAt": "2021-01-18T21:42:48Z"
            },
            {
              "originalPosition": 120,
              "body": "Since contexts aren't re-used, I don't think we need to say this.\r\n\r\n```suggestion\r\nto the proxy. \r\n```\r\n",
              "createdAt": "2021-01-18T15:44:54Z",
              "updatedAt": "2021-01-18T21:42:48Z"
            },
            {
              "originalPosition": 133,
              "body": "```suggestion\r\nrequest resource, and forwards responses from the oblivious request resource\r\nback to clients. The proxy MUST forward response status codes without\r\nmodification.\r\n```",
              "createdAt": "2021-01-18T15:48:05Z",
              "updatedAt": "2021-01-18T21:42:48Z"
            },
            {
              "originalPosition": 171,
              "body": "Noting transport-layer since it can't modify the binary messages.\r\n\r\n```suggestion\r\nA proxy can use transport-layer padding to reduce the effectiveness of\r\ntraffic analysis.\r\n```",
              "createdAt": "2021-01-18T15:53:20Z",
              "updatedAt": "2021-01-18T21:42:48Z"
            },
            {
              "originalPosition": 177,
              "body": "I'm not sure we should include this. Clients can't really verify that proxies apply traffic analysis mitigations, so I'm not sure clients would meaningfully take this into account when choosing a proxy.\r\n\r\n```suggestion\r\n```",
              "createdAt": "2021-01-18T15:54:25Z",
              "updatedAt": "2021-01-18T21:42:48Z"
            },
            {
              "originalPosition": 188,
              "body": "Is this enough? What if the response is leaked not via size but via response time? (Victim makes a request whose response is cached, and then attacker sends the same request and tries to observe cache hit/miss.) \r\n\r\n(I really don't love the timing delay stuff, but it seems better to mention the possible risk than not.)\r\n\r\n```suggestion\r\nServers should account for traffic analysis based on response size or generation time.\r\nTechniques such as padding or timing delays can help protect against such attacks;\r\nsee {{ta}}.\r\n```",
              "createdAt": "2021-01-18T15:57:51Z",
              "updatedAt": "2021-01-18T21:42:48Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTcwNjE4MDQx",
          "commit": {
            "abbreviatedOid": "58decd7"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2021-01-18T15:59:42Z",
          "updatedAt": "2021-01-18T15:59:42Z",
          "comments": []
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTcwNzg5NDI3",
          "commit": {
            "abbreviatedOid": "58decd7"
          },
          "author": "martinthomson",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2021-01-18T21:40:33Z",
          "updatedAt": "2021-01-18T21:42:53Z",
          "comments": [
            {
              "originalPosition": 120,
              "body": "I was thinking that this was something we could say because it explains that reuse of a context doesn't necessarily lead to this problem.",
              "createdAt": "2021-01-18T21:40:34Z",
              "updatedAt": "2021-01-18T21:42:53Z"
            }
          ]
        }
      ]
    },
    {
      "number": 11,
      "id": "MDExOlB1bGxSZXF1ZXN0NTU2ODkyMTE0",
      "title": "Encapsulate the server response with a nonce.",
      "url": "https://github.com/ietf-wg-ohai/oblivious-http/pull/11",
      "state": "MERGED",
      "author": "chris-wood",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Makes some of my suggestions from #9, and addresses #8 in the process.\r\n\r\nFor context, I consider the `keyID` variable to be the wire-encoded (length prefixed) thing, and I tried to clarify that here. I don't feel strongly about the way that's written, but I do think it's important that everything sent on the wire is authenticated, including the keyID length.",
      "createdAt": "2021-01-18T15:40:38Z",
      "updatedAt": "2021-01-18T22:15:12Z",
      "baseRepository": "ietf-wg-ohai/oblivious-http",
      "baseRefName": "main",
      "baseRefOid": "33d57777b41a2bff8be5f4e86e0ae503c3b1d2e1",
      "headRepository": "ietf-wg-ohai/oblivious-http",
      "headRefName": "caw/nonces",
      "headRefOid": "a21cda7591a70ffc101b0694077fbdaf507f94bf",
      "closedAt": "2021-01-18T22:02:51Z",
      "mergedAt": "2021-01-18T22:02:51Z",
      "mergedBy": "martinthomson",
      "mergeCommit": {
        "oid": "5c44c6dc243fe06314bbcc2be62a06e205a844b4"
      },
      "comments": [],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTcwNzg2MjAw",
          "commit": {
            "abbreviatedOid": "e5a1bde"
          },
          "author": "martinthomson",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "The addition of the nonce is good.\r\n\r\nNote sure about the length prefix on `keyID` and equally unsure about Nsk -> Nk.",
          "createdAt": "2021-01-18T21:30:58Z",
          "updatedAt": "2021-01-18T21:38:52Z",
          "comments": [
            {
              "originalPosition": 26,
              "body": "So I'm not so sure about this one.  One problem is that the varint encoding is only injective, not bijective.  That means that you can varint encode the length differently for encoding and the AAD if you aren't careful to also keep the length of the length.  That breaks things if implemented as described.\r\n\r\nMy understanding was that an AEAD was required to authenticate the length of the AAD in addition to its content.  GCM does: `S = GHASH_H (A || 0^v || C || 0^u || [len(A)]_64 || [len(C)]_64).`  Can't we rely on that?",
              "createdAt": "2021-01-18T21:30:58Z",
              "updatedAt": "2021-01-18T22:01:08Z"
            },
            {
              "originalPosition": 45,
              "body": "I'm OK with this, but it loses the length-encoding thing (and the lines don't match the numbered list any more).",
              "createdAt": "2021-01-18T21:32:22Z",
              "updatedAt": "2021-01-18T22:01:08Z"
            },
            {
              "originalPosition": 56,
              "body": "I'd like to keep the HTTP-layer stuff to its own section.\r\n\r\n```suggestion\r\n   private key, `skR`, corresponding to `keyID`. If no key exists, the \r\n   server returns an error.\r\n```",
              "createdAt": "2021-01-18T21:33:24Z",
              "updatedAt": "2021-01-18T22:01:08Z"
            },
            {
              "originalPosition": 87,
              "body": "I don't think that this is right.  Can you explain your reasoning?",
              "createdAt": "2021-01-18T21:34:10Z",
              "updatedAt": "2021-01-18T22:01:08Z"
            },
            {
              "originalPosition": 90,
              "body": "I think that we need a separate step to generate the nonce here.",
              "createdAt": "2021-01-18T21:34:57Z",
              "updatedAt": "2021-01-18T22:01:08Z"
            },
            {
              "originalPosition": 106,
              "body": "You need to say here that the AAD is an empty string.",
              "createdAt": "2021-01-18T21:37:39Z",
              "updatedAt": "2021-01-18T22:01:08Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTcwNzg5MzM1",
          "commit": {
            "abbreviatedOid": "b13d8d4"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2021-01-18T21:40:18Z",
          "updatedAt": "2021-01-18T21:40:19Z",
          "comments": [
            {
              "originalPosition": 26,
              "body": "Maybe? But including the length is cheap, so why *not* do it?",
              "createdAt": "2021-01-18T21:40:19Z",
              "updatedAt": "2021-01-18T22:01:08Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTcwNzg5NDg1",
          "commit": {
            "abbreviatedOid": "b13d8d4"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2021-01-18T21:40:41Z",
          "updatedAt": "2021-01-18T21:40:42Z",
          "comments": [
            {
              "originalPosition": 56,
              "body": "That's fine -- separate issue?",
              "createdAt": "2021-01-18T21:40:41Z",
              "updatedAt": "2021-01-18T22:01:08Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTcwNzkwNDEz",
          "commit": {
            "abbreviatedOid": "b13d8d4"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2021-01-18T21:43:05Z",
          "updatedAt": "2021-01-18T21:43:06Z",
          "comments": [
            {
              "originalPosition": 87,
              "body": "Sure: Nsk is the size of the KEM shared secret, not the AEAD encryption key. IIUC there's no difference between extracting the necessary amount and then stretching it (as we do here) or extracting something much larger and stretching.",
              "createdAt": "2021-01-18T21:43:06Z",
              "updatedAt": "2021-01-18T22:01:08Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTcwNzkzNTMy",
          "commit": {
            "abbreviatedOid": "2c2fcf3"
          },
          "author": "martinthomson",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2021-01-18T21:52:09Z",
          "updatedAt": "2021-01-18T21:52:09Z",
          "comments": [
            {
              "originalPosition": 87,
              "body": "Oh, right.  I considered that, but didn't want to use that as encapsulation can make the value much larger than we might need.  X25519 is ok (32 bytes), but a P-256 share is larger, if only so that it can distinguish between compress and uncompressed.  Nsk might be larger in the sense that it contains wasted bits, but at least it is representative of the entropy level we are looking to maintain.",
              "createdAt": "2021-01-18T21:52:09Z",
              "updatedAt": "2021-01-18T22:01:08Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTcwNzkzNjQ3",
          "commit": {
            "abbreviatedOid": "2c2fcf3"
          },
          "author": "martinthomson",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2021-01-18T21:52:33Z",
          "updatedAt": "2021-01-18T21:52:33Z",
          "comments": [
            {
              "originalPosition": 26,
              "body": "I just explained why: it makes it difficult to implement.",
              "createdAt": "2021-01-18T21:52:33Z",
              "updatedAt": "2021-01-18T22:01:08Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTcwNzk0MDc1",
          "commit": {
            "abbreviatedOid": "2c2fcf3"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2021-01-18T21:53:50Z",
          "updatedAt": "2021-01-18T21:53:50Z",
          "comments": [
            {
              "originalPosition": 87,
              "body": "My point is that the entropy we need is max(|key|, |nonce|), and Nk is exactly that for all AEADs I know of.",
              "createdAt": "2021-01-18T21:53:50Z",
              "updatedAt": "2021-01-18T22:01:08Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTcwNzk0ODI4",
          "commit": {
            "abbreviatedOid": "2c2fcf3"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2021-01-18T21:56:06Z",
          "updatedAt": "2021-01-18T21:56:07Z",
          "comments": [
            {
              "originalPosition": 26,
              "body": "Yeah, I hear you, I'm just worried about what might happen if you don't authenticate the length explicitly. (I don't see any immediate problem, but I'd prefer we just explicitly authenticate every bit sent on the wire. I'm fine moving this to a separate issue.)",
              "createdAt": "2021-01-18T21:56:06Z",
              "updatedAt": "2021-01-18T22:01:08Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTcwNzk1MTIz",
          "commit": {
            "abbreviatedOid": "2c2fcf3"
          },
          "author": "martinthomson",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2021-01-18T21:56:52Z",
          "updatedAt": "2021-01-18T21:56:52Z",
          "comments": [
            {
              "originalPosition": 87,
              "body": "OK, fair enough.  In TLS we never reduced the entropy of a secret below that of the KDF, which this would do.  \r\n\r\nAnyway, could we say `max(Nk, Nn)` instead?",
              "createdAt": "2021-01-18T21:56:52Z",
              "updatedAt": "2021-01-18T22:01:08Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTcwNzk1OTUy",
          "commit": {
            "abbreviatedOid": "e92b4f7"
          },
          "author": "martinthomson",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2021-01-18T21:59:00Z",
          "updatedAt": "2021-01-18T21:59:01Z",
          "comments": [
            {
              "originalPosition": 26,
              "body": "If this were input to key schedule, sure.  But I'm not even sure we need to include the keyID in AAD at all.  It's convenient, so sure, but it isn't *necessary*.",
              "createdAt": "2021-01-18T21:59:01Z",
              "updatedAt": "2021-01-18T22:01:08Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTcwNzk2MDYy",
          "commit": {
            "abbreviatedOid": "e92b4f7"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2021-01-18T21:59:22Z",
          "updatedAt": "2021-01-18T21:59:22Z",
          "comments": [
            {
              "originalPosition": 26,
              "body": "Reverted -- we can discussed separately in #12.",
              "createdAt": "2021-01-18T21:59:22Z",
              "updatedAt": "2021-01-18T22:01:08Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTcwNzk2Njg4",
          "commit": {
            "abbreviatedOid": "a21cda7"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2021-01-18T22:01:11Z",
          "updatedAt": "2021-01-18T22:01:11Z",
          "comments": [
            {
              "originalPosition": 87,
              "body": "Yep, done.",
              "createdAt": "2021-01-18T22:01:11Z",
              "updatedAt": "2021-01-18T22:01:12Z"
            }
          ]
        }
      ]
    },
    {
      "number": 14,
      "id": "MDExOlB1bGxSZXF1ZXN0NTU3MDU4OTMy",
      "title": "Add Chris as author",
      "url": "https://github.com/ietf-wg-ohai/oblivious-http/pull/14",
      "state": "MERGED",
      "author": "martinthomson",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2021-01-18T22:06:04Z",
      "updatedAt": "2021-01-18T22:14:45Z",
      "baseRepository": "ietf-wg-ohai/oblivious-http",
      "baseRefName": "main",
      "baseRefOid": "5c44c6dc243fe06314bbcc2be62a06e205a844b4",
      "headRepository": "ietf-wg-ohai/oblivious-http",
      "headRefName": "mt/caw",
      "headRefOid": "702c781abb8d79066cd1f2403a62e82146b6b1c3",
      "closedAt": "2021-01-18T22:08:10Z",
      "mergedAt": "2021-01-18T22:08:10Z",
      "mergedBy": "chris-wood",
      "mergeCommit": {
        "oid": "825f3f77549b69f62a3f5661c0b8b2d1e9151101"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 15,
      "id": "MDExOlB1bGxSZXF1ZXN0NTU3MDk1NjY2",
      "title": "Define some HTTP usage",
      "url": "https://github.com/ietf-wg-ohai/oblivious-http/pull/15",
      "state": "MERGED",
      "author": "martinthomson",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "This is more or less implied already, but it is better to write it down.\r\n\r\nI've added stubs for some content types as well.",
      "createdAt": "2021-01-19T00:25:51Z",
      "updatedAt": "2021-01-22T02:35:35Z",
      "baseRepository": "ietf-wg-ohai/oblivious-http",
      "baseRefName": "main",
      "baseRefOid": "825f3f77549b69f62a3f5661c0b8b2d1e9151101",
      "headRepository": "ietf-wg-ohai/oblivious-http",
      "headRefName": "http-usage",
      "headRefOid": "e645418316a3e4e6b80d520f8db125e8d171c704",
      "closedAt": "2021-01-22T02:35:34Z",
      "mergedAt": "2021-01-22T02:35:34Z",
      "mergedBy": "martinthomson",
      "mergeCommit": {
        "oid": "9abd4d3696e88c8b866bac2868d2fae5882b8be7"
      },
      "comments": [],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTczNDkyMTYw",
          "commit": {
            "abbreviatedOid": "ad66a04"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2021-01-21T16:11:18Z",
          "updatedAt": "2021-01-21T16:23:13Z",
          "comments": [
            {
              "originalPosition": 19,
              "body": "```suggestion\r\ntarget URI of the oblivious proxy resource, a header field containing\r\n```",
              "createdAt": "2021-01-21T16:11:18Z",
              "updatedAt": "2021-01-22T02:25:49Z"
            },
            {
              "originalPosition": 19,
              "body": "Shouldn't the client also indicate the oblivious request resource URI (in a header or elsewhere)? If not, how does the proxy know where to forward the message?",
              "createdAt": "2021-01-21T16:14:29Z",
              "updatedAt": "2021-01-22T02:25:49Z"
            },
            {
              "originalPosition": 71,
              "body": "```suggestion\r\nwithout protection in response to the POST request made to that resource.\r\nOblivious request resources MUST use distinct status codes to distinguish \r\nHPKE key mismatch from other errors, such as decapsulation failure. This is\r\nneeded to inform clients of stale or otherwise incorrect HPKE keying material.\r\n```",
              "createdAt": "2021-01-21T16:22:21Z",
              "updatedAt": "2021-01-22T02:25:49Z"
            },
            {
              "originalPosition": 71,
              "body": "Feel free to include this in some other way, but I think it's important to note. Without a clear \"your key is out of date\" signal, clients don't know if and when they should fetch a fresh set of keys for encapsulation.",
              "createdAt": "2021-01-21T16:22:57Z",
              "updatedAt": "2021-01-22T02:25:49Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTczNTI2OTE4",
          "commit": {
            "abbreviatedOid": "ad66a04"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2021-01-21T16:45:41Z",
          "updatedAt": "2021-01-21T16:45:41Z",
          "comments": [
            {
              "originalPosition": 19,
              "body": "Oh, I see in #19 that it's assumed the proxy forwards to a fixed request resource, rather than letting the client choose (source routing style). Perhaps that can be the default if the request resource is omitted, allowing clients to control the path if desired? (That has security and policy implications though...)",
              "createdAt": "2021-01-21T16:45:41Z",
              "updatedAt": "2021-01-22T02:25:49Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTczOTA0ODI5",
          "commit": {
            "abbreviatedOid": "ad66a04"
          },
          "author": "martinthomson",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2021-01-22T02:21:48Z",
          "updatedAt": "2021-01-22T02:21:48Z",
          "comments": [
            {
              "originalPosition": 71,
              "body": "Let's open an issue for this.  I think we want to recommend a status code for this, but it is possible that there isn't something easy we can use here (other than to maybe suggest that clients re-fetch key configuration when they get a non-encapsulated error response).",
              "createdAt": "2021-01-22T02:21:48Z",
              "updatedAt": "2021-01-22T02:25:49Z"
            }
          ]
        }
      ]
    },
    {
      "number": 17,
      "id": "MDExOlB1bGxSZXF1ZXN0NTU4MDg1NTgw",
      "title": "Make the label match the text",
      "url": "https://github.com/ietf-wg-ohai/oblivious-http/pull/17",
      "state": "MERGED",
      "author": "martinthomson",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "I think that \"response\" for the exporter is better than \"secret\".\r\nSymmetry.",
      "createdAt": "2021-01-20T09:17:12Z",
      "updatedAt": "2021-01-20T21:37:37Z",
      "baseRepository": "ietf-wg-ohai/oblivious-http",
      "baseRefName": "main",
      "baseRefOid": "825f3f77549b69f62a3f5661c0b8b2d1e9151101",
      "headRepository": "ietf-wg-ohai/oblivious-http",
      "headRefName": "request-label",
      "headRefOid": "962643586678f84e58a14c62349126f5f71cd6da",
      "closedAt": "2021-01-20T21:37:36Z",
      "mergedAt": "2021-01-20T21:37:36Z",
      "mergedBy": "martinthomson",
      "mergeCommit": {
        "oid": "bceadaa805192029131e5cdd5a43dfd3d34f8cd8"
      },
      "comments": [],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTcyMTk3MTA0",
          "commit": {
            "abbreviatedOid": "9626435"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2021-01-20T13:02:41Z",
          "updatedAt": "2021-01-20T13:02:45Z",
          "comments": [
            {
              "originalPosition": 5,
              "body": "For HPKE we received a lot of feedback that it was most descriptive when the label matched the variable name, so how about:\r\n\r\n```suggestion\r\nresponse_secret = context.Export(\"response secret\", Nk)\r\n```\r\n\r\nOr something to that effect?",
              "createdAt": "2021-01-20T13:02:41Z",
              "updatedAt": "2021-01-20T13:02:45Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTcyNjY4NTAz",
          "commit": {
            "abbreviatedOid": "9626435"
          },
          "author": "martinthomson",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2021-01-20T21:33:51Z",
          "updatedAt": "2021-01-20T21:33:52Z",
          "comments": [
            {
              "originalPosition": 5,
              "body": "I'm happy with the simple symmetry of using \"request\" to construct a request and \"response\" to construct a response.  Qualifying with \" secret\" implies that there are other things we might need for responses.\r\n\r\nThis is a simple enough process to follow that we probably don't need to be more explicit.",
              "createdAt": "2021-01-20T21:33:51Z",
              "updatedAt": "2021-01-20T21:33:52Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTcyNjY5NDM5",
          "commit": {
            "abbreviatedOid": "9626435"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2021-01-20T21:35:14Z",
          "updatedAt": "2021-01-20T21:35:14Z",
          "comments": [
            {
              "originalPosition": 5,
              "body": "\ud83d\udc4d I definitely don't feel strongly about this, other than that this label should (I think) be \"response\" since it's used to generate response encryption keys. ",
              "createdAt": "2021-01-20T21:35:14Z",
              "updatedAt": "2021-01-20T21:35:14Z"
            }
          ]
        }
      ]
    },
    {
      "number": 18,
      "id": "MDExOlB1bGxSZXF1ZXN0NTU4MTY1NjA5",
      "title": "Fix Open variables",
      "url": "https://github.com/ietf-wg-ohai/oblivious-http/pull/18",
      "state": "MERGED",
      "author": "martinthomson",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2021-01-20T11:20:29Z",
      "updatedAt": "2021-01-20T13:00:46Z",
      "baseRepository": "ietf-wg-ohai/oblivious-http",
      "baseRefName": "main",
      "baseRefOid": "825f3f77549b69f62a3f5661c0b8b2d1e9151101",
      "headRepository": "ietf-wg-ohai/oblivious-http",
      "headRefName": "response-ad",
      "headRefOid": "38d114d928a951579db6d3de6598c9bbc65a4fa9",
      "closedAt": "2021-01-20T13:00:45Z",
      "mergedAt": "2021-01-20T13:00:45Z",
      "mergedBy": "chris-wood",
      "mergeCommit": {
        "oid": "293db36eaee895289d1f4d6fe5a741cfb89992e7"
      },
      "comments": [],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTcyMTk1Mzk0",
          "commit": {
            "abbreviatedOid": "38d114d"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2021-01-20T13:00:41Z",
          "updatedAt": "2021-01-20T13:00:41Z",
          "comments": []
        }
      ]
    },
    {
      "number": 22,
      "id": "MDExOlB1bGxSZXF1ZXN0NTU5NjQwNzQz",
      "title": "Add KDF and AEAD identifiers to the message",
      "url": "https://github.com/ietf-wg-ohai/oblivious-http/pull/22",
      "state": "MERGED",
      "author": "martinthomson",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Switches to an 8-bit key identifier here as well.\r\n\r\nThis format now doesn't need varints.  Yay.\r\n\r\nImplemented this in my ohttp library and it's fine.\r\n\r\nCloses #20.",
      "createdAt": "2021-01-22T01:18:07Z",
      "updatedAt": "2021-01-23T01:55:42Z",
      "baseRepository": "ietf-wg-ohai/oblivious-http",
      "baseRefName": "main",
      "baseRefOid": "6e86e49665a5d42364180ffde2c83919d4201e50",
      "headRepository": "ietf-wg-ohai/oblivious-http",
      "headRefName": "add-kdf-aead",
      "headRefOid": "dd3b77809971a5730fffc18bc4c89159d8420c6a",
      "closedAt": "2021-01-23T01:55:41Z",
      "mergedAt": "2021-01-23T01:55:40Z",
      "mergedBy": "chris-wood",
      "mergeCommit": {
        "oid": "400ed6fdba6f27232e00bf435c4cad3bbd259ece"
      },
      "comments": [],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTc0NzIzMTAy",
          "commit": {
            "abbreviatedOid": "dd3b778"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2021-01-23T01:55:29Z",
          "updatedAt": "2021-01-23T01:55:29Z",
          "comments": []
        }
      ]
    },
    {
      "number": 24,
      "id": "MDExOlB1bGxSZXF1ZXN0NTU5Njg1Mjk0",
      "title": "Define key configuration format",
      "url": "https://github.com/ietf-wg-ohai/oblivious-http/pull/24",
      "state": "MERGED",
      "author": "martinthomson",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "I've also taken the time to review the text in the (now) security\r\nconsiderations and expand on some of the responsibilities.  Including\r\nthe one where the client needs to authenticate key configurations.\r\n\r\nCloses #21.",
      "createdAt": "2021-01-22T03:22:36Z",
      "updatedAt": "2021-01-23T01:46:48Z",
      "baseRepository": "ietf-wg-ohai/oblivious-http",
      "baseRefName": "main",
      "baseRefOid": "9abd4d3696e88c8b866bac2868d2fae5882b8be7",
      "headRepository": "ietf-wg-ohai/oblivious-http",
      "headRefName": "key-format",
      "headRefOid": "9ad182455ef81ecb456e49a23977e9d8ec07af26",
      "closedAt": "2021-01-23T01:46:47Z",
      "mergedAt": "2021-01-23T01:46:47Z",
      "mergedBy": "martinthomson",
      "mergeCommit": {
        "oid": "99d4436dcf590a6bede7c644813fb291a95086fa"
      },
      "comments": [],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTc0NzEwMjYx",
          "commit": {
            "abbreviatedOid": "9ad1824"
          },
          "author": "tfpauly",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2021-01-23T00:34:45Z",
          "updatedAt": "2021-01-23T00:34:45Z",
          "comments": []
        }
      ]
    },
    {
      "number": 25,
      "id": "MDExOlB1bGxSZXF1ZXN0NTU5NzM3NDg3",
      "title": "Add acknowledgments",
      "url": "https://github.com/ietf-wg-ohai/oblivious-http/pull/25",
      "state": "MERGED",
      "author": "martinthomson",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Ack individuals here instead of citing?",
      "createdAt": "2021-01-22T06:08:44Z",
      "updatedAt": "2021-01-23T01:23:59Z",
      "baseRepository": "ietf-wg-ohai/oblivious-http",
      "baseRefName": "main",
      "baseRefOid": "9abd4d3696e88c8b866bac2868d2fae5882b8be7",
      "headRepository": "ietf-wg-ohai/oblivious-http",
      "headRefName": "ack-a-little",
      "headRefOid": "aa27a190ad0063fc69c27019146279fe0a2a091a",
      "closedAt": "2021-01-23T01:23:58Z",
      "mergedAt": "2021-01-23T01:23:58Z",
      "mergedBy": "martinthomson",
      "mergeCommit": {
        "oid": "5a9b703e95bf33c1312c127011368d5d59e2b0ca"
      },
      "comments": [
        {
          "author": "tfpauly",
          "authorAssociation": "COLLABORATOR",
          "body": "Eh, the citing seems good.",
          "createdAt": "2021-01-23T00:35:21Z",
          "updatedAt": "2021-01-23T00:35:21Z"
        }
      ],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTc0NzEwMzM4",
          "commit": {
            "abbreviatedOid": "aa27a19"
          },
          "author": "tfpauly",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2021-01-23T00:35:05Z",
          "updatedAt": "2021-01-23T00:35:05Z",
          "comments": []
        }
      ]
    },
    {
      "number": 26,
      "id": "MDExOlB1bGxSZXF1ZXN0NTU5NzQwMDA0",
      "title": "Use 422 for a key ID mismatch",
      "url": "https://github.com/ietf-wg-ohai/oblivious-http/pull/26",
      "state": "MERGED",
      "author": "martinthomson",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2021-01-22T06:14:57Z",
      "updatedAt": "2021-01-23T01:46:25Z",
      "baseRepository": "ietf-wg-ohai/oblivious-http",
      "baseRefName": "main",
      "baseRefOid": "9abd4d3696e88c8b866bac2868d2fae5882b8be7",
      "headRepository": "ietf-wg-ohai/oblivious-http",
      "headRefName": "bad-content",
      "headRefOid": "d3994b90c867e33a510c2086ac9010f5e5366ede",
      "closedAt": "2021-01-23T01:46:24Z",
      "mergedAt": "2021-01-23T01:46:24Z",
      "mergedBy": "martinthomson",
      "mergeCommit": {
        "oid": "47b9df5175a9e0da142455e20bb08773cc2af7c3"
      },
      "comments": [],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTc0NzEwNTQ5",
          "commit": {
            "abbreviatedOid": "d3994b9"
          },
          "author": "tfpauly",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2021-01-23T00:36:04Z",
          "updatedAt": "2021-01-23T00:36:04Z",
          "comments": []
        }
      ]
    },
    {
      "number": 28,
      "id": "MDExOlB1bGxSZXF1ZXN0NTYwMzAzMDY5",
      "title": "Response of known length is 1",
      "url": "https://github.com/ietf-wg-ohai/oblivious-http/pull/28",
      "state": "MERGED",
      "author": "martinthomson",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "My implementation was wrong",
      "createdAt": "2021-01-23T02:40:25Z",
      "updatedAt": "2021-01-23T02:44:40Z",
      "baseRepository": "ietf-wg-ohai/oblivious-http",
      "baseRefName": "main",
      "baseRefOid": "400ed6fdba6f27232e00bf435c4cad3bbd259ece",
      "headRepository": "ietf-wg-ohai/oblivious-http",
      "headRefName": "response-is-1",
      "headRefOid": "b7ac9838c37c099771b74f1324e54c5a69d28edd",
      "closedAt": "2021-01-23T02:44:39Z",
      "mergedAt": "2021-01-23T02:44:39Z",
      "mergedBy": "chris-wood",
      "mergeCommit": {
        "oid": "f91751d3476fda528ea2b623786a924624d715f4"
      },
      "comments": [],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTc0NzI3OTcy",
          "commit": {
            "abbreviatedOid": "b7ac983"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2021-01-23T02:44:35Z",
          "updatedAt": "2021-01-23T02:44:35Z",
          "comments": []
        }
      ]
    },
    {
      "number": 29,
      "id": "MDExOlB1bGxSZXF1ZXN0NTYwMzAzODUx",
      "title": "Clearer about interim responses",
      "url": "https://github.com/ietf-wg-ohai/oblivious-http/pull/29",
      "state": "MERGED",
      "author": "martinthomson",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2021-01-23T02:47:19Z",
      "updatedAt": "2021-01-23T02:48:25Z",
      "baseRepository": "ietf-wg-ohai/oblivious-http",
      "baseRefName": "main",
      "baseRefOid": "f91751d3476fda528ea2b623786a924624d715f4",
      "headRepository": "ietf-wg-ohai/oblivious-http",
      "headRefName": "interim-response",
      "headRefOid": "0cd9012015ec000fb306f07835cbffb16ba4865b",
      "closedAt": "2021-01-23T02:48:24Z",
      "mergedAt": "2021-01-23T02:48:24Z",
      "mergedBy": "chris-wood",
      "mergeCommit": {
        "oid": "4cee554a659e7dc01aa0c62403306264a3471f16"
      },
      "comments": [],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTc0NzI4Mjc0",
          "commit": {
            "abbreviatedOid": "0cd9012"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2021-01-23T02:48:20Z",
          "updatedAt": "2021-01-23T02:48:20Z",
          "comments": []
        }
      ]
    },
    {
      "number": 30,
      "id": "MDExOlB1bGxSZXF1ZXN0NTYwNDM3Mzg5",
      "title": "Various nits found during implementation.",
      "url": "https://github.com/ietf-wg-ohai/oblivious-http/pull/30",
      "state": "MERGED",
      "author": "chris-wood",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "One question we might want to ask (even though I think we have the right answer already) is: should `kemID` be included in AAD?\r\n\r\nI also removed the padding text, since we moved that to the bhttp spec.",
      "createdAt": "2021-01-23T15:17:51Z",
      "updatedAt": "2021-01-24T13:34:29Z",
      "baseRepository": "ietf-wg-ohai/oblivious-http",
      "baseRefName": "main",
      "baseRefOid": "4cee554a659e7dc01aa0c62403306264a3471f16",
      "headRepository": "ietf-wg-ohai/oblivious-http",
      "headRefName": "caw/nits",
      "headRefOid": "471df736482c6d6003a471a5008434af23a5645e",
      "closedAt": "2021-01-24T05:00:09Z",
      "mergedAt": "2021-01-24T05:00:08Z",
      "mergedBy": "martinthomson",
      "mergeCommit": {
        "oid": "b3ececa30ef580f98b0e1921121f715166db71a9"
      },
      "comments": [
        {
          "author": "martinthomson",
          "authorAssociation": "CONTRIBUTOR",
          "body": "It's a reasonable question, but I think we can safely assume that a single key can't be used with multiple KEMs.",
          "createdAt": "2021-01-24T05:00:40Z",
          "updatedAt": "2021-01-24T05:00:40Z"
        },
        {
          "author": "ekr",
          "authorAssociation": "NONE",
          "body": "In principle it might be possible, but I think we should prohibit it.\n\nOn Sat, Jan 23, 2021 at 9:00 PM Martin Thomson <notifications@github.com>\nwrote:\n\n> It's a reasonable question, but I think we can safely assume that a single\n> key can't be used with multiple KEMs.\n>\n> \u2014\n> You are receiving this because you are subscribed to this thread.\n> Reply to this email directly, view it on GitHub\n> <https://github.com/unicorn-wg/oblivious-http/pull/30#issuecomment-766291713>,\n> or unsubscribe\n> <https://github.com/notifications/unsubscribe-auth/AAIPLIINCPE657SG4TP5VWTS3OSQHANCNFSM4WPYC6YQ>\n> .\n>\n",
          "createdAt": "2021-01-24T13:34:29Z",
          "updatedAt": "2021-01-24T13:34:29Z"
        }
      ],
      "reviews": []
    },
    {
      "number": 33,
      "id": "MDExOlB1bGxSZXF1ZXN0NTYxNDI2MjQx",
      "title": "Add self as author.",
      "url": "https://github.com/ietf-wg-ohai/oblivious-http/pull/33",
      "state": "MERGED",
      "author": "chris-wood",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2021-01-25T23:25:30Z",
      "updatedAt": "2021-01-26T21:50:41Z",
      "baseRepository": "ietf-wg-ohai/oblivious-http",
      "baseRefName": "main",
      "baseRefOid": "b3ececa30ef580f98b0e1921121f715166db71a9",
      "headRepository": "ietf-wg-ohai/oblivious-http",
      "headRefName": "caw/add-chris",
      "headRefOid": "86db80fb3d1f827aee809d30532a7f867752305d",
      "closedAt": "2021-01-26T21:50:40Z",
      "mergedAt": "2021-01-26T21:50:40Z",
      "mergedBy": "martinthomson",
      "mergeCommit": {
        "oid": "9fcec3db5343f9f01f9d2c8ccf0802444dc928e1"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 34,
      "id": "MDExOlB1bGxSZXF1ZXN0NTYxNDI3NjAz",
      "title": "Put the KEM ID before the key",
      "url": "https://github.com/ietf-wg-ohai/oblivious-http/pull/34",
      "state": "MERGED",
      "author": "martinthomson",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2021-01-25T23:29:11Z",
      "updatedAt": "2021-01-25T23:30:22Z",
      "baseRepository": "ietf-wg-ohai/oblivious-http",
      "baseRefName": "main",
      "baseRefOid": "b3ececa30ef580f98b0e1921121f715166db71a9",
      "headRepository": "ietf-wg-ohai/oblivious-http",
      "headRefName": "reorder-key-format",
      "headRefOid": "206e5daffab3a703f2c2d02e16e222be97804338",
      "closedAt": "2021-01-25T23:30:21Z",
      "mergedAt": "2021-01-25T23:30:21Z",
      "mergedBy": "chris-wood",
      "mergeCommit": {
        "oid": "0d3c186cd51a2be63787becc0a1027ff5d04abab"
      },
      "comments": [],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTc1ODkyODY3",
          "commit": {
            "abbreviatedOid": "206e5da"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2021-01-25T23:29:51Z",
          "updatedAt": "2021-01-25T23:29:51Z",
          "comments": []
        }
      ]
    },
    {
      "number": 35,
      "id": "MDExOlB1bGxSZXF1ZXN0NTYyMjMwOTky",
      "title": "Add an example",
      "url": "https://github.com/ietf-wg-ohai/oblivious-http/pull/35",
      "state": "MERGED",
      "author": "martinthomson",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "You don't need to validate this; I'm fairly confident after our interop yesterday.  I'm more interested in getting the words right and whether the intermediate values are enough.",
      "createdAt": "2021-01-27T05:01:23Z",
      "updatedAt": "2021-01-28T00:31:26Z",
      "baseRepository": "ietf-wg-ohai/oblivious-http",
      "baseRefName": "main",
      "baseRefOid": "9fcec3db5343f9f01f9d2c8ccf0802444dc928e1",
      "headRepository": "ietf-wg-ohai/oblivious-http",
      "headRefName": "example",
      "headRefOid": "133d24d3f0568cc77f542cf48124e081ab346b11",
      "closedAt": "2021-01-28T00:31:25Z",
      "mergedAt": "2021-01-28T00:31:25Z",
      "mergedBy": "martinthomson",
      "mergeCommit": {
        "oid": "f05690d1f13cf5e622f061d95b77fcd128b3860f"
      },
      "comments": [],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTc3MzI4MDQ5",
          "commit": {
            "abbreviatedOid": "aef7141"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2021-01-27T13:22:41Z",
          "updatedAt": "2021-01-27T13:32:07Z",
          "comments": [
            {
              "originalPosition": 17,
              "body": "```suggestion\r\nchooses DHKEM(X25519, HKDF-SHA256) and generates an X25519 key pair\r\n```",
              "createdAt": "2021-01-27T13:22:41Z",
              "updatedAt": "2021-01-28T00:30:56Z"
            },
            {
              "originalPosition": 39,
              "body": "```suggestion\r\nThe client then reads the oblivious request resource key configuration and selects a mutually supported KDF and AEAD. In this example, the client selects HKDF-SHA256 and AES-128-GCM. The client then generates an X25519 key pair:\r\n```",
              "createdAt": "2021-01-27T13:26:46Z",
              "updatedAt": "2021-01-28T00:30:56Z"
            },
            {
              "originalPosition": 96,
              "body": "```suggestion\r\nkey from the request and a randomly selected nonce. This produces a salt of:\r\n```",
              "createdAt": "2021-01-27T13:28:08Z",
              "updatedAt": "2021-01-28T00:30:56Z"
            },
            {
              "originalPosition": 96,
              "body": "(for consistency with the terminology used in the main text)",
              "createdAt": "2021-01-27T13:28:24Z",
              "updatedAt": "2021-01-28T00:30:56Z"
            },
            {
              "originalPosition": 124,
              "body": "```suggestion\r\nThe AEAD Seal function is then used to encrypt the response, which is added\r\n```",
              "createdAt": "2021-01-27T13:31:23Z",
              "updatedAt": "2021-01-28T00:30:56Z"
            },
            {
              "originalPosition": 147,
              "body": "```suggestion\r\nconstruct the AEAD key and nonce and decrypt the response.\r\n```",
              "createdAt": "2021-01-27T13:32:03Z",
              "updatedAt": "2021-01-28T00:30:56Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTc3MzQxMzQx",
          "commit": {
            "abbreviatedOid": "aef7141"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2021-01-27T13:37:27Z",
          "updatedAt": "2021-01-27T13:37:28Z",
          "comments": [
            {
              "originalPosition": 39,
              "body": "I'm not really sure how I feel about this particular part, since it exposes HPKE internals. Maybe we could rewrite this to something like so:\r\n\r\n```\r\nThe client then generates an HPKE context using the server's public key, yielding an encapsulated \r\nkey:\r\n\r\n<X25519 public key>\r\n\r\nWith the corresponding private key:\r\n\r\n<X25519 private key>\r\n```",
              "createdAt": "2021-01-27T13:37:27Z",
              "updatedAt": "2021-01-28T00:30:56Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTc3ODkxNzU3",
          "commit": {
            "abbreviatedOid": "aef7141"
          },
          "author": "martinthomson",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2021-01-28T00:30:34Z",
          "updatedAt": "2021-01-28T00:30:59Z",
          "comments": [
            {
              "originalPosition": 39,
              "body": "Agree. Will fix.",
              "createdAt": "2021-01-28T00:30:34Z",
              "updatedAt": "2021-01-28T00:30:59Z"
            }
          ]
        }
      ]
    },
    {
      "number": 36,
      "id": "MDExOlB1bGxSZXF1ZXN0NTYzMDgzMzQw",
      "title": "A little clearer on the abstract",
      "url": "https://github.com/ietf-wg-ohai/oblivious-http/pull/36",
      "state": "MERGED",
      "author": "martinthomson",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2021-01-28T08:41:53Z",
      "updatedAt": "2021-01-29T15:18:04Z",
      "baseRepository": "ietf-wg-ohai/oblivious-http",
      "baseRefName": "main",
      "baseRefOid": "1b51b8805b47efa87214060570bd29ddf1d0ddff",
      "headRepository": "ietf-wg-ohai/oblivious-http",
      "headRefName": "abstract-the-server",
      "headRefOid": "33a422595a590c4387d8e1143164b9c5f17e10a9",
      "closedAt": "2021-01-29T15:18:03Z",
      "mergedAt": "2021-01-29T15:18:03Z",
      "mergedBy": "chris-wood",
      "mergeCommit": {
        "oid": "c66017fae70ca8b50176488a5e66f7b032798add"
      },
      "comments": [],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTc5MzUxODkw",
          "commit": {
            "abbreviatedOid": "33a4225"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2021-01-29T15:17:58Z",
          "updatedAt": "2021-01-29T15:17:58Z",
          "comments": []
        }
      ]
    },
    {
      "number": 37,
      "id": "MDExOlB1bGxSZXF1ZXN0NTYzMDg2NTI5",
      "title": "There is there is",
      "url": "https://github.com/ietf-wg-ohai/oblivious-http/pull/37",
      "state": "MERGED",
      "author": "martinthomson",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Stupid grammar stuff in the published version.",
      "createdAt": "2021-01-28T08:47:26Z",
      "updatedAt": "2021-01-29T15:17:29Z",
      "baseRepository": "ietf-wg-ohai/oblivious-http",
      "baseRefName": "main",
      "baseRefOid": "1b51b8805b47efa87214060570bd29ddf1d0ddff",
      "headRepository": "ietf-wg-ohai/oblivious-http",
      "headRefName": "there-is-there-is",
      "headRefOid": "930fb7b3d279dedffc43650aec42035a68f63252",
      "closedAt": "2021-01-29T15:17:29Z",
      "mergedAt": "2021-01-29T15:17:28Z",
      "mergedBy": "chris-wood",
      "mergeCommit": {
        "oid": "34f7e4c2f380ae715a9c6223ceb425f1bfeaaee9"
      },
      "comments": [],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTc5MzUxMTYx",
          "commit": {
            "abbreviatedOid": "930fb7b"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2021-01-29T15:17:17Z",
          "updatedAt": "2021-01-29T15:17:17Z",
          "comments": []
        }
      ]
    },
    {
      "number": 43,
      "id": "MDExOlB1bGxSZXF1ZXN0NTY5MjE0MTY1",
      "title": "Make the picture narrower",
      "url": "https://github.com/ietf-wg-ohai/oblivious-http/pull/43",
      "state": "MERGED",
      "author": "martinthomson",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "The QUIC linter complained and it is usually right about this sort of\r\nthing.",
      "createdAt": "2021-02-08T06:54:10Z",
      "updatedAt": "2021-02-08T20:10:12Z",
      "baseRepository": "ietf-wg-ohai/oblivious-http",
      "baseRefName": "main",
      "baseRefOid": "c66017fae70ca8b50176488a5e66f7b032798add",
      "headRepository": "ietf-wg-ohai/oblivious-http",
      "headRefName": "narrow-picture",
      "headRefOid": "bb434ddafbd5da39e322d2cd9bf7f4153329ea88",
      "closedAt": "2021-02-08T20:10:11Z",
      "mergedAt": "2021-02-08T20:10:11Z",
      "mergedBy": "chris-wood",
      "mergeCommit": {
        "oid": "53e1690dc8aa67d0608490b0c179bc7886197913"
      },
      "comments": [],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTg1ODgwMjgy",
          "commit": {
            "abbreviatedOid": "bb434dd"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2021-02-08T20:10:08Z",
          "updatedAt": "2021-02-08T20:10:08Z",
          "comments": []
        }
      ]
    },
    {
      "number": 44,
      "id": "MDExOlB1bGxSZXF1ZXN0NTczOTEwODkx",
      "title": "Applicability statement",
      "url": "https://github.com/ietf-wg-ohai/oblivious-http/pull/44",
      "state": "MERGED",
      "author": "martinthomson",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "This is more background than I would normally like to include, but it\r\nseems prudent at this stage.\r\n\r\nThe example usage bit might go eventually, but I can see us keeping some\r\nsort of applicability statement.",
      "createdAt": "2021-02-16T04:11:59Z",
      "updatedAt": "2021-02-17T23:01:06Z",
      "baseRepository": "ietf-wg-ohai/oblivious-http",
      "baseRefName": "main",
      "baseRefOid": "53e1690dc8aa67d0608490b0c179bc7886197913",
      "headRepository": "ietf-wg-ohai/oblivious-http",
      "headRefName": "applicability",
      "headRefOid": "4da10d0feadd7447d2e23a5d7cee50eb5df4d18f",
      "closedAt": "2021-02-17T23:01:05Z",
      "mergedAt": "2021-02-17T23:01:05Z",
      "mergedBy": "martinthomson",
      "mergeCommit": {
        "oid": "3f7295f192d30f8d34c0955ec190a8c50227b70b"
      },
      "comments": [],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTkyNTg3MjQ4",
          "commit": {
            "abbreviatedOid": "46758e7"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2021-02-17T20:11:41Z",
          "updatedAt": "2021-02-17T20:15:20Z",
          "comments": [
            {
              "originalPosition": 33,
              "body": "```suggestion\r\nof linkage, which requires that applications not carry state between requests.\r\n```",
              "createdAt": "2021-02-17T20:11:41Z",
              "updatedAt": "2021-02-17T23:00:54Z"
            },
            {
              "originalPosition": 35,
              "body": "```suggestion\r\nOblivious HTTP is primarily useful where privacy risks associated with possible\r\n```",
              "createdAt": "2021-02-17T20:11:57Z",
              "updatedAt": "2021-02-17T23:00:54Z"
            },
            {
              "originalPosition": 40,
              "body": "```suggestion\r\n({{Dingledine2004}}), which can provide stronger guarantees at higher operational costs.\r\n```",
              "createdAt": "2021-02-17T20:13:08Z",
              "updatedAt": "2021-02-17T23:00:54Z"
            },
            {
              "originalPosition": 49,
              "body": "```suggestion\r\n* Each request is expanded in size with additional HTTP fields,\r\n```",
              "createdAt": "2021-02-17T20:14:20Z",
              "updatedAt": "2021-02-17T23:00:54Z"
            },
            {
              "originalPosition": 53,
              "body": "```suggestion\r\n* Deriving cryptographic keys and applying them for request and\r\n  response protection takes non-negligible computational resources.\r\n```",
              "createdAt": "2021-02-17T20:14:48Z",
              "updatedAt": "2021-02-17T23:00:54Z"
            }
          ]
        }
      ]
    },
    {
      "number": 45,
      "id": "MDExOlB1bGxSZXF1ZXN0NTczOTIyOTgy",
      "title": "Small tweaks",
      "url": "https://github.com/ietf-wg-ohai/oblivious-http/pull/45",
      "state": "MERGED",
      "author": "martinthomson",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Just a missing word and some stuff that seemed like it could be better.",
      "createdAt": "2021-02-16T04:52:54Z",
      "updatedAt": "2021-02-17T20:16:25Z",
      "baseRepository": "ietf-wg-ohai/oblivious-http",
      "baseRefName": "main",
      "baseRefOid": "53e1690dc8aa67d0608490b0c179bc7886197913",
      "headRepository": "ietf-wg-ohai/oblivious-http",
      "headRefName": "what-clients-want",
      "headRefOid": "1b59256a1221de5ed7cf1482e0673e9323a404e7",
      "closedAt": "2021-02-17T20:16:25Z",
      "mergedAt": "2021-02-17T20:16:25Z",
      "mergedBy": "chris-wood",
      "mergeCommit": {
        "oid": "ddfe799828059cc1e7f5cdf42e18caac9ec4536c"
      },
      "comments": [],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTkyNTkwMzI4",
          "commit": {
            "abbreviatedOid": "2fc9cee"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2021-02-17T20:15:55Z",
          "updatedAt": "2021-02-17T20:16:14Z",
          "comments": [
            {
              "originalPosition": 5,
              "body": "```suggestion\r\nIf a server accepts a larger volume of requests from a proxy, it needs to\r\n```",
              "createdAt": "2021-02-17T20:15:55Z",
              "updatedAt": "2021-02-17T20:16:20Z"
            }
          ]
        }
      ]
    },
    {
      "number": 46,
      "id": "MDExOlB1bGxSZXF1ZXN0NTc0NjYwNjc0",
      "title": "Add text on replay",
      "url": "https://github.com/ietf-wg-ohai/oblivious-http/pull/46",
      "state": "MERGED",
      "author": "martinthomson",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "This isn't anything that special, but this is a case where a bunch of\r\nour established defenses don't work.",
      "createdAt": "2021-02-17T05:45:27Z",
      "updatedAt": "2021-02-18T00:10:18Z",
      "baseRepository": "ietf-wg-ohai/oblivious-http",
      "baseRefName": "main",
      "baseRefOid": "53e1690dc8aa67d0608490b0c179bc7886197913",
      "headRepository": "ietf-wg-ohai/oblivious-http",
      "headRefName": "replay",
      "headRefOid": "f683da209611e9e1277b5d76c8003a0ab04cbd8e",
      "closedAt": "2021-02-18T00:10:18Z",
      "mergedAt": "2021-02-18T00:10:17Z",
      "mergedBy": "martinthomson",
      "mergeCommit": {
        "oid": "c34bc4ac4775ca9627911dddfbad9446376901c4"
      },
      "comments": [
        {
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "body": "The new changes LGTM. Feel free to merge assuming you're done with edits!",
          "createdAt": "2021-02-18T00:01:08Z",
          "updatedAt": "2021-02-18T00:01:08Z"
        }
      ],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTkyNTk2MjQ4",
          "commit": {
            "abbreviatedOid": "d11742d"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "LGTM with some nits and questions about future changes. Nothing blocking.",
          "createdAt": "2021-02-17T20:23:57Z",
          "updatedAt": "2021-02-17T20:29:44Z",
          "comments": [
            {
              "originalPosition": 17,
              "body": "```suggestion\r\n{{!TLS=RFC8446}}). However, one important difference is that the oblivious proxy, which handles\r\nencapsulated requests, can replay messages; replay attacks by network adversaries are less \r\napplicable unless clients or proxies send encapsulated requests as early data. \r\n```",
              "createdAt": "2021-02-17T20:23:57Z",
              "updatedAt": "2021-02-17T23:26:13Z"
            },
            {
              "originalPosition": 17,
              "body": "... basically, trying to say that we limit the attack surface here compared to TLS, in that only proxies can reasonably replay, compared to general network attackers.",
              "createdAt": "2021-02-17T20:24:33Z",
              "updatedAt": "2021-02-17T23:26:13Z"
            },
            {
              "originalPosition": 31,
              "body": "```suggestion\r\ncannot be used as it depends on being able to observe previous interactions.\r\nOblivious HTTP explicitly prevents such linkability.\r\n```",
              "createdAt": "2021-02-17T20:25:23Z",
              "updatedAt": "2021-02-17T23:26:13Z"
            },
            {
              "originalPosition": 51,
              "body": "Is this something we should add to the main spec? In particular, the oblivious request could derive a nonce and shove it in header in the request forwarded to the target. (Or we can RECOMMEND this?)",
              "createdAt": "2021-02-17T20:27:52Z",
              "updatedAt": "2021-02-17T23:26:13Z"
            },
            {
              "originalPosition": 24,
              "body": "```suggestion\r\nversion) are all sufficient signals that no processing occurred. Connection failures or interruptions\r\nare not sufficient signals that no processing occurred. \r\n```\r\n\r\nThe client's connection to the proxy could idle timeout, at which point the client's signal is lost.",
              "createdAt": "2021-02-17T20:29:10Z",
              "updatedAt": "2021-02-17T23:26:13Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTkyNzA0MjQz",
          "commit": {
            "abbreviatedOid": "d11742d"
          },
          "author": "martinthomson",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2021-02-17T23:03:45Z",
          "updatedAt": "2021-02-17T23:03:45Z",
          "comments": [
            {
              "originalPosition": 17,
              "body": "Are we saying here that we don't necessarily trust the proxy not to replay?  I like the observation about replay exposure to TLS early data.  I think that both work, but I want to try capturing this in a different way.",
              "createdAt": "2021-02-17T23:03:45Z",
              "updatedAt": "2021-02-17T23:26:13Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTkyNzA1MDU0",
          "commit": {
            "abbreviatedOid": "d11742d"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2021-02-17T23:05:15Z",
          "updatedAt": "2021-02-17T23:05:16Z",
          "comments": [
            {
              "originalPosition": 17,
              "body": "Dunno, we might not \ud83e\udd37  I could imagine a proxy attempting to be \"helpful\" and replaying messages on a client's behalf.",
              "createdAt": "2021-02-17T23:05:16Z",
              "updatedAt": "2021-02-17T23:26:13Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTkyNzA2NjEx",
          "commit": {
            "abbreviatedOid": "d11742d"
          },
          "author": "martinthomson",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2021-02-17T23:08:13Z",
          "updatedAt": "2021-02-17T23:08:13Z",
          "comments": [
            {
              "originalPosition": 51,
              "body": "This is hard: it doesn't make sense to build this in as a mandatory piece because there are cases that don't need replay protection.  In general, a known-safe request doesn't need extra protection against replay attack.  So the need isn't general.\r\n\r\nUsing `enc` works, but that depends on constraining the deployment infrastructure, including having the client be aware of this constraint (I guess the request resource could be trusted to extract a nonce and forward it to the target resource as well).\r\n\r\nSo yeah, a general mechanism would be nice, but it seems like it might be best left to an extension.",
              "createdAt": "2021-02-17T23:08:13Z",
              "updatedAt": "2021-02-17T23:26:13Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTkyNzA3MjE4",
          "commit": {
            "abbreviatedOid": "7165bdb"
          },
          "author": "martinthomson",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2021-02-17T23:09:25Z",
          "updatedAt": "2021-02-17T23:09:25Z",
          "comments": [
            {
              "originalPosition": 17,
              "body": "It's potentially a nice feature of a proxy (though I suspect most won't want to hold the necessary state).",
              "createdAt": "2021-02-17T23:09:25Z",
              "updatedAt": "2021-02-17T23:26:13Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTkyNzA4MTU2",
          "commit": {
            "abbreviatedOid": "7165bdb"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2021-02-17T23:11:21Z",
          "updatedAt": "2021-02-17T23:11:21Z",
          "comments": [
            {
              "originalPosition": 17,
              "body": "Yeah, my comment was more to note that this type of replay is much easier to do by a proxy, if it was going to do it. (Less so of the network attacker, which is assumed malicious.)",
              "createdAt": "2021-02-17T23:11:21Z",
              "updatedAt": "2021-02-17T23:26:13Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTkyNzA4MzI0",
          "commit": {
            "abbreviatedOid": "7165bdb"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2021-02-17T23:11:39Z",
          "updatedAt": "2021-02-17T23:11:39Z",
          "comments": [
            {
              "originalPosition": 51,
              "body": "An extension is a great idea, yeah.",
              "createdAt": "2021-02-17T23:11:39Z",
              "updatedAt": "2021-02-17T23:26:13Z"
            }
          ]
        }
      ]
    },
    {
      "number": 47,
      "id": "MDExOlB1bGxSZXF1ZXN0NTc1MjgyNjIw",
      "title": "Document post-compromise security properties",
      "url": "https://github.com/ietf-wg-ohai/oblivious-http/pull/47",
      "state": "MERGED",
      "author": "martinthomson",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "And recommend key rotation as a mitigation strategy.\r\n\r\nCloses #41.\r\nCloses #39.",
      "createdAt": "2021-02-17T23:42:49Z",
      "updatedAt": "2021-02-19T17:01:20Z",
      "baseRepository": "ietf-wg-ohai/oblivious-http",
      "baseRefName": "main",
      "baseRefOid": "c34bc4ac4775ca9627911dddfbad9446376901c4",
      "headRepository": "ietf-wg-ohai/oblivious-http",
      "headRefName": "pcs",
      "headRefOid": "b87abde3d056545c380e61e7253abf1cc1059c75",
      "closedAt": "2021-02-19T17:01:19Z",
      "mergedAt": "2021-02-19T17:01:19Z",
      "mergedBy": "chris-wood",
      "mergeCommit": {
        "oid": "978ae2acb453e92d2d16c9d2ef71b5ad2c13b223"
      },
      "comments": [],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTk0MzgxNjk2",
          "commit": {
            "abbreviatedOid": "316fef5"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2021-02-19T16:58:50Z",
          "updatedAt": "2021-02-19T16:59:15Z",
          "comments": [
            {
              "originalPosition": 11,
              "body": "```suggestion\r\nA server retains a secret key that might be used to remove protection from messages\r\n```",
              "createdAt": "2021-02-19T16:58:50Z",
              "updatedAt": "2021-02-19T17:00:08Z"
            }
          ]
        }
      ]
    },
    {
      "number": 48,
      "id": "MDExOlB1bGxSZXF1ZXN0NTc2NjEyODM4",
      "title": "Discuss linkability concerns (without going into the weeds).",
      "url": "https://github.com/ietf-wg-ohai/oblivious-http/pull/48",
      "state": "MERGED",
      "author": "chris-wood",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Closes #38.",
      "createdAt": "2021-02-19T17:40:45Z",
      "updatedAt": "2021-02-19T23:17:56Z",
      "baseRepository": "ietf-wg-ohai/oblivious-http",
      "baseRefName": "main",
      "baseRefOid": "978ae2acb453e92d2d16c9d2ef71b5ad2c13b223",
      "headRepository": "ietf-wg-ohai/oblivious-http",
      "headRefName": "caw/privacy",
      "headRefOid": "ade3a5e39e16471458bbdc585da8837545443dbc",
      "closedAt": "2021-02-19T21:59:36Z",
      "mergedAt": "2021-02-19T21:59:35Z",
      "mergedBy": "martinthomson",
      "mergeCommit": {
        "oid": "6b1bc58762f389fcaa10b47f90d89766d1c3efbf"
      },
      "comments": [],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTk0NjA3MjQy",
          "commit": {
            "abbreviatedOid": "39c1a38"
          },
          "author": "martinthomson",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2021-02-19T21:58:26Z",
          "updatedAt": "2021-02-19T21:59:13Z",
          "comments": [
            {
              "originalPosition": 7,
              "body": "```suggestion\r\nby the chosen KeyConfig. The oblivious proxy and request resources can link\r\n```",
              "createdAt": "2021-02-19T21:58:26Z",
              "updatedAt": "2021-02-19T21:59:30Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTk0NjQ1MzEw",
          "commit": {
            "abbreviatedOid": "ade3a5e"
          },
          "author": "davidben",
          "authorAssociation": "NONE",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2021-02-19T23:17:56Z",
          "updatedAt": "2021-02-19T23:17:56Z",
          "comments": [
            {
              "originalPosition": 17,
              "body": "Is it *completely* out of scope? While Section 4 doesn't fully define a mechanism, it does suggest a particular one:\r\n\r\n> One way to ensure integrity for key configuration is for the oblivious request resource to serve content to the client directly, using HTTPS and the \"application/ohttp-keys\" media type; see Section 4.2.\r\n\r\n(That was where my initial comment came from. It seems anything that follows that suggestion would run into this sort of thing.)",
              "createdAt": "2021-02-19T23:17:56Z",
              "updatedAt": "2021-02-19T23:17:56Z"
            }
          ]
        }
      ]
    },
    {
      "number": 49,
      "id": "MDExOlB1bGxSZXF1ZXN0NTc2NjI3ODgz",
      "title": "Remove length prefix on fixed-length values.",
      "url": "https://github.com/ietf-wg-ohai/oblivious-http/pull/49",
      "state": "MERGED",
      "author": "chris-wood",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Closes #31 and #32.\r\n\r\nGiven [the parsing code here](https://github.com/martinthomson/ohttp/blob/main/ohttp/src/lib.rs#L255-L264) (either assuming a fixed key ID, or looking up the KEM based on key ID), I think this is a nice simplification. It also authenticates more, even if redundant. (The kemID is already part of the HPKE key schedule.) I implemented this change and it's straightforward.",
      "createdAt": "2021-02-19T18:10:24Z",
      "updatedAt": "2021-02-19T22:03:14Z",
      "baseRepository": "ietf-wg-ohai/oblivious-http",
      "baseRefName": "main",
      "baseRefOid": "978ae2acb453e92d2d16c9d2ef71b5ad2c13b223",
      "headRepository": "ietf-wg-ohai/oblivious-http",
      "headRefName": "caw/fix-sizes",
      "headRefOid": "777580e8a2f5df62edec82ea8d0d814f0a5acf32",
      "closedAt": "2021-02-19T21:54:53Z",
      "mergedAt": "2021-02-19T21:54:53Z",
      "mergedBy": "martinthomson",
      "mergeCommit": {
        "oid": "f0ddfb17e99866c9793352e8b49c976426f5a02e"
      },
      "comments": [],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTk0NjA0ODM0",
          "commit": {
            "abbreviatedOid": "fa882ec"
          },
          "author": "martinthomson",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2021-02-19T21:54:04Z",
          "updatedAt": "2021-02-19T21:54:40Z",
          "comments": [
            {
              "originalPosition": 27,
              "body": "```suggestion\r\n  Encapsulated KEM Shared Secret (8*Nenc),\r\n```",
              "createdAt": "2021-02-19T21:54:04Z",
              "updatedAt": "2021-02-19T21:54:48Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTk0NjA5ODYw",
          "commit": {
            "abbreviatedOid": "777580e"
          },
          "author": "martinthomson",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2021-02-19T22:03:10Z",
          "updatedAt": "2021-02-19T22:03:14Z",
          "comments": [
            {
              "originalPosition": 5,
              "body": "Oh, I just realized that this isn't right as we need the KEM ID to precede this.",
              "createdAt": "2021-02-19T22:03:10Z",
              "updatedAt": "2021-02-19T22:03:14Z"
            }
          ]
        }
      ]
    },
    {
      "number": 50,
      "id": "MDExOlB1bGxSZXF1ZXN0NTc2ODc3NzM3",
      "title": "Small cleanups",
      "url": "https://github.com/ietf-wg-ohai/oblivious-http/pull/50",
      "state": "MERGED",
      "author": "martinthomson",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "The encapsulation of responses isn't *really* HPKE.  The rest are just\r\ntweaks.",
      "createdAt": "2021-02-20T06:23:14Z",
      "updatedAt": "2021-02-20T14:02:00Z",
      "baseRepository": "ietf-wg-ohai/oblivious-http",
      "baseRefName": "main",
      "baseRefOid": "6b1bc58762f389fcaa10b47f90d89766d1c3efbf",
      "headRepository": "ietf-wg-ohai/oblivious-http",
      "headRefName": "cleanup",
      "headRefOid": "016cbc5997b4b5db6ee8fe963f1c694e6614b790",
      "closedAt": "2021-02-20T14:02:00Z",
      "mergedAt": "2021-02-20T14:02:00Z",
      "mergedBy": "chris-wood",
      "mergeCommit": {
        "oid": "9a7d832548a61c52ba939e5447dbdd6ef0461a36"
      },
      "comments": [],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTk0NzU0ODc3",
          "commit": {
            "abbreviatedOid": "016cbc5"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2021-02-20T14:01:54Z",
          "updatedAt": "2021-02-20T14:01:54Z",
          "comments": []
        }
      ]
    },
    {
      "number": 51,
      "id": "MDExOlB1bGxSZXF1ZXN0NTc3MTkyOTk5",
      "title": "More clearly dodge responsibility",
      "url": "https://github.com/ietf-wg-ohai/oblivious-http/pull/51",
      "state": "MERGED",
      "author": "martinthomson",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "The whole mess that is key configuration discovery needs real work.\r\nThere are cases where trust suffices, but we can't rely on that here.\r\nWhat this does is tweak the language to more clearly note the lines of\r\nresponsibility for this draft.\r\n\r\nI also noted that we didn't talk about trial decryption and tracking, so\r\nI added that.  It seemed like we didn't need to mention multiple keys\r\nwith the same identifier twice after that.",
      "createdAt": "2021-02-21T22:27:33Z",
      "updatedAt": "2021-02-21T23:30:18Z",
      "baseRepository": "ietf-wg-ohai/oblivious-http",
      "baseRefName": "main",
      "baseRefOid": "9a7d832548a61c52ba939e5447dbdd6ef0461a36",
      "headRepository": "ietf-wg-ohai/oblivious-http",
      "headRefName": "key-provisioning",
      "headRefOid": "43e4b9cb80bbf087e18f99587b84c4e89951aabc",
      "closedAt": "2021-02-21T23:30:17Z",
      "mergedAt": "2021-02-21T23:30:17Z",
      "mergedBy": "chris-wood",
      "mergeCommit": {
        "oid": "3ab659c01c482d9abc048ce1dd61409cbc83ae64"
      },
      "comments": [],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTk0ODk1MjI0",
          "commit": {
            "abbreviatedOid": "43e4b9c"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2021-02-21T23:30:13Z",
          "updatedAt": "2021-02-21T23:30:13Z",
          "comments": []
        }
      ]
    },
    {
      "number": 52,
      "id": "MDExOlB1bGxSZXF1ZXN0NTc3MjA1MjM3",
      "title": "Update examples based on -01 changes",
      "url": "https://github.com/ietf-wg-ohai/oblivious-http/pull/52",
      "state": "MERGED",
      "author": "martinthomson",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2021-02-21T23:50:28Z",
      "updatedAt": "2021-03-01T16:26:14Z",
      "baseRepository": "ietf-wg-ohai/oblivious-http",
      "baseRefName": "main",
      "baseRefOid": "3ab659c01c482d9abc048ce1dd61409cbc83ae64",
      "headRepository": "ietf-wg-ohai/oblivious-http",
      "headRefName": "examples-01",
      "headRefOid": "b8dbe69de322e86fd17cfae8a1311d8dc8a388fb",
      "closedAt": "2021-03-01T16:26:14Z",
      "mergedAt": "2021-03-01T16:26:14Z",
      "mergedBy": "chris-wood",
      "mergeCommit": {
        "oid": "71f1de97252f91adf70fe98f53a8f8949f32d8df"
      },
      "comments": [],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NjAwOTIyOTA1",
          "commit": {
            "abbreviatedOid": "b8dbe69"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2021-03-01T16:26:10Z",
          "updatedAt": "2021-03-01T16:26:10Z",
          "comments": []
        }
      ]
    },
    {
      "number": 53,
      "id": "MDExOlB1bGxSZXF1ZXN0NTgyMTYwOTk5",
      "title": "Use it instead of lose it.",
      "url": "https://github.com/ietf-wg-ohai/oblivious-http/pull/53",
      "state": "MERGED",
      "author": "chris-wood",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2021-03-01T15:36:30Z",
      "updatedAt": "2021-03-02T00:00:29Z",
      "baseRepository": "ietf-wg-ohai/oblivious-http",
      "baseRefName": "main",
      "baseRefOid": "3ab659c01c482d9abc048ce1dd61409cbc83ae64",
      "headRepository": "ietf-wg-ohai/oblivious-http",
      "headRefName": "caw/oops",
      "headRefOid": "498596c5c1f9ebc3fafe6c41ab7bc9de1a9c67ab",
      "closedAt": "2021-03-02T00:00:25Z",
      "mergedAt": "2021-03-02T00:00:25Z",
      "mergedBy": "martinthomson",
      "mergeCommit": {
        "oid": "06818f92406cd0dbfda1a57fa907f594d62ea14b"
      },
      "comments": [
        {
          "author": "martinthomson",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Whoops",
          "createdAt": "2021-03-02T00:00:29Z",
          "updatedAt": "2021-03-02T00:00:29Z"
        }
      ],
      "reviews": []
    },
    {
      "number": 57,
      "id": "MDExOlB1bGxSZXF1ZXN0NjM4Nzg3MzY2",
      "title": "Proxies don't need TLS to the server",
      "url": "https://github.com/ietf-wg-ohai/oblivious-http/pull/57",
      "state": "MERGED",
      "author": "martinthomson",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "But they should.  Consider the case where clients have equal-sized\r\nmessages, but are making requests using different key identifiers or\r\ndifferent request targets.  If that information could be linked to\r\ncertain clients, encryption would increase the size of the anonymity set\r\nfrom the perspective of a passive observer for little extra cost.\r\n\r\nCloses #56.",
      "createdAt": "2021-05-11T00:30:16Z",
      "updatedAt": "2021-05-12T03:29:14Z",
      "baseRepository": "ietf-wg-ohai/oblivious-http",
      "baseRefName": "main",
      "baseRefOid": "06818f92406cd0dbfda1a57fa907f594d62ea14b",
      "headRepository": "ietf-wg-ohai/oblivious-http",
      "headRefName": "issue56",
      "headRefOid": "9b3ba76b43e8bf043437ead36f889d557456e531",
      "closedAt": "2021-05-12T03:29:14Z",
      "mergedAt": "2021-05-12T03:29:14Z",
      "mergedBy": "chris-wood",
      "mergeCommit": {
        "oid": "a7eedfa193dcf36709dfc1b67d1d1460cd98b5ee"
      },
      "comments": [
        {
          "author": "martinthomson",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Done. PTAL.",
          "createdAt": "2021-05-12T02:41:16Z",
          "updatedAt": "2021-05-12T02:41:16Z"
        }
      ],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NjU2NjYzNjQ5",
          "commit": {
            "abbreviatedOid": "ce1a7e1"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "CHANGES_REQUESTED",
          "body": "",
          "createdAt": "2021-05-11T12:49:58Z",
          "updatedAt": "2021-05-11T12:51:13Z",
          "comments": [
            {
              "originalPosition": 6,
              "body": "```suggestion\r\non the proxy using an authenticated and encrypted connection to the oblivious request\r\n```",
              "createdAt": "2021-05-11T12:49:58Z",
              "updatedAt": "2021-05-11T12:51:13Z"
            },
            {
              "originalPosition": 9,
              "body": "```suggestion\r\nrequests. \r\n```\r\n\r\nSuggest dropping this, since it implies (to me) that one might want to run a target with HTTP support, which seems like an anti-goal, even if possible. I think the note here is sufficient.",
              "createdAt": "2021-05-11T12:51:09Z",
              "updatedAt": "2021-05-11T12:51:13Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NjU3NDMxNDI1",
          "commit": {
            "abbreviatedOid": "9b3ba76"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2021-05-12T03:29:08Z",
          "updatedAt": "2021-05-12T03:29:08Z",
          "comments": []
        }
      ]
    },
    {
      "number": 59,
      "id": "MDExOlB1bGxSZXF1ZXN0NjcwMjY5MjI3",
      "title": "Tweaks",
      "url": "https://github.com/ietf-wg-ohai/oblivious-http/pull/59",
      "state": "MERGED",
      "author": "martinthomson",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Just a few things I noticed when going through.",
      "createdAt": "2021-06-15T10:15:12Z",
      "updatedAt": "2021-07-19T18:41:11Z",
      "baseRepository": "ietf-wg-ohai/oblivious-http",
      "baseRefName": "main",
      "baseRefOid": "a7eedfa193dcf36709dfc1b67d1d1460cd98b5ee",
      "headRepository": "ietf-wg-ohai/oblivious-http",
      "headRefName": "tweaks",
      "headRefOid": "057559ad509d0a53a10dbdc9f8bc347124b5783c",
      "closedAt": "2021-07-19T18:41:11Z",
      "mergedAt": "2021-07-19T18:41:11Z",
      "mergedBy": "chris-wood",
      "mergeCommit": {
        "oid": "728c970b0f5c4869b35073750f17f0158be354a3"
      },
      "comments": [],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NzA5ODY2MDAz",
          "commit": {
            "abbreviatedOid": "057559a"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2021-07-19T18:41:07Z",
          "updatedAt": "2021-07-19T18:41:07Z",
          "comments": []
        }
      ]
    },
    {
      "number": 62,
      "id": "MDExOlB1bGxSZXF1ZXN0NjkyODkzMjQz",
      "title": "Give one example of identifying information.",
      "url": "https://github.com/ietf-wg-ohai/oblivious-http/pull/62",
      "state": "MERGED",
      "author": "chris-wood",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "This was vague enough that an example might help.",
      "createdAt": "2021-07-19T20:14:19Z",
      "updatedAt": "2021-07-20T00:34:24Z",
      "baseRepository": "ietf-wg-ohai/oblivious-http",
      "baseRefName": "main",
      "baseRefOid": "728c970b0f5c4869b35073750f17f0158be354a3",
      "headRepository": "ietf-wg-ohai/oblivious-http",
      "headRefName": "caw/client-considerations",
      "headRefOid": "729cafe32e340436fa9fbc659f42480bf5a7a90a",
      "closedAt": "2021-07-20T00:34:23Z",
      "mergedAt": "2021-07-20T00:34:23Z",
      "mergedBy": "chris-wood",
      "mergeCommit": {
        "oid": "7bd9ed13694291241fc9183de2498f86c98aa230"
      },
      "comments": [],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NzEwMDg3MDA2",
          "commit": {
            "abbreviatedOid": "8c0e44d"
          },
          "author": "martinthomson",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "Yeah, this seems good.\r\n\r\nDo we want to explicitly mention cookies?",
          "createdAt": "2021-07-20T00:33:16Z",
          "updatedAt": "2021-07-20T00:33:20Z",
          "comments": [
            {
              "originalPosition": 6,
              "body": "```suggestion\r\nencapsulated. Identifying information includes cookies {{?COOKIES=RFC6265}},\r\nauthentication credentials or tokens, and any information that might reveal\r\nclient-specific information such as account credentials.\r\n```",
              "createdAt": "2021-07-20T00:33:16Z",
              "updatedAt": "2021-07-20T00:33:20Z"
            }
          ]
        }
      ]
    },
    {
      "number": 63,
      "id": "MDExOlB1bGxSZXF1ZXN0NjkzMDMzMzA4",
      "title": "A start on operation and deployment stuff",
      "url": "https://github.com/ietf-wg-ohai/oblivious-http/pull/63",
      "state": "MERGED",
      "author": "martinthomson",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "I wanted to add more then just interception text here.  So I added a\r\nlittle about performance and the ODoH study made some of those costs\r\nclear enough to cite.\r\n\r\nI anticipate this section growing over time.  Some of the material we\r\nmight add is already in other sections of the doc (DoS management at the\r\nproxy, for example), but we might move that around some.  I also expect\r\nthe working group to focus rather narrowly on this topic.\r\n\r\nLet's leave this open so that we have something to point to for IETF discussions.",
      "createdAt": "2021-07-20T01:13:52Z",
      "updatedAt": "2021-08-02T22:17:07Z",
      "baseRepository": "ietf-wg-ohai/oblivious-http",
      "baseRefName": "main",
      "baseRefOid": "93fcd3b1cf1e5fc79ab4401066084515d78cfea5",
      "headRepository": "ietf-wg-ohai/oblivious-http",
      "headRefName": "interception-considerations",
      "headRefOid": "baacd020bdaae4227cb763b66a206380b6769afd",
      "closedAt": "2021-08-02T22:17:05Z",
      "mergedAt": "2021-08-02T22:17:05Z",
      "mergedBy": "martinthomson",
      "mergeCommit": {
        "oid": "0e5de33f8bddde5edf2e98c865eac98c5eec6fa8"
      },
      "comments": [],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NzEwMTAxNzgw",
          "commit": {
            "abbreviatedOid": "1ea6331"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2021-07-20T01:15:22Z",
          "updatedAt": "2021-07-20T01:16:25Z",
          "comments": [
            {
              "originalPosition": 7,
              "body": "```suggestion\r\n    target: https://www.petsymposium.org/2021/files/papers/issue4/popets-2021-0085.pdf\r\n```",
              "createdAt": "2021-07-20T01:15:22Z",
              "updatedAt": "2021-07-20T01:16:25Z"
            }
          ]
        }
      ]
    },
    {
      "number": 65,
      "id": "MDExOlB1bGxSZXF1ZXN0Njk4Mjc0Mzkw",
      "title": "OFFS",
      "url": "https://github.com/ietf-wg-ohai/oblivious-http/pull/65",
      "state": "CLOSED",
      "author": "martinthomson",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2021-07-28T00:37:26Z",
      "updatedAt": "2021-08-24T00:29:08Z",
      "baseRepository": "ietf-wg-ohai/oblivious-http",
      "baseRefName": "main",
      "baseRefOid": "93fcd3b1cf1e5fc79ab4401066084515d78cfea5",
      "headRepository": "ietf-wg-ohai/oblivious-http",
      "headRefName": "offs",
      "headRefOid": "f322e86df918bf3e9ee176b70e1621d34a11eaa2",
      "closedAt": "2021-08-24T00:29:08Z",
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NzE2NDg1OTA1",
          "commit": {
            "abbreviatedOid": "f322e86"
          },
          "author": "DavidSchinazi",
          "authorAssociation": "NONE",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2021-07-28T00:39:32Z",
          "updatedAt": "2021-07-28T00:39:32Z",
          "comments": []
        }
      ]
    },
    {
      "number": 67,
      "id": "MDExOlB1bGxSZXF1ZXN0NzA3NzAzOTEy",
      "title": "Note that certain client policies are incompatible with OHTTP.",
      "url": "https://github.com/ietf-wg-ohai/oblivious-http/pull/67",
      "state": "MERGED",
      "author": "chris-wood",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "This may not be obvious, so perhaps good to note.",
      "createdAt": "2021-08-10T21:01:06Z",
      "updatedAt": "2021-08-24T00:32:35Z",
      "baseRepository": "ietf-wg-ohai/oblivious-http",
      "baseRefName": "main",
      "baseRefOid": "0e5de33f8bddde5edf2e98c865eac98c5eec6fa8",
      "headRepository": "ietf-wg-ohai/oblivious-http",
      "headRefName": "caw/note-pinning-breakage",
      "headRefOid": "0ebfd6bc38e6eb9e7e86a6b94e4ffbf590b6ab8a",
      "closedAt": "2021-08-24T00:32:34Z",
      "mergedAt": "2021-08-24T00:32:34Z",
      "mergedBy": "martinthomson",
      "mergeCommit": {
        "oid": "5f4b5986fae1f6a1eecf10ad3c2d61b06f8ddd62"
      },
      "comments": [
        {
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "body": "> In any case, I would probably move this to the client section and maybe talk a bit more about the choice a client is faced with: use ohttp and trust that HPKE (and whatever key management is involved) provides the necessary protection for the exchange, plus maybe whatever policy is used on the connection to the proxy. Or forego the \"oblivious\" property and fall back to a direct connection to the server.\r\n\r\nI'll move most of the text to the client section, leaving a pointer in the proxy section.",
          "createdAt": "2021-08-10T23:16:39Z",
          "updatedAt": "2021-08-10T23:16:39Z"
        },
        {
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "body": "> The question I have would be whether these policies are not satisfied anyway, as HPKE (and whatever key management is involved) provides the necessary properties.\r\n\r\nIt probably depends. One could fetch the HPKE key and apply policy for each OHTTP message, which would be equivalent to applying policy for each HTTP connection if you were not using OHTTP, or one could fetch and apply policy to the HPKE key for many OHTTP messages. The results are different.",
          "createdAt": "2021-08-10T23:24:38Z",
          "updatedAt": "2021-08-10T23:25:39Z"
        },
        {
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "body": "@martinthomson this should be good to go. ",
          "createdAt": "2021-08-23T15:20:44Z",
          "updatedAt": "2021-08-23T15:20:44Z"
        }
      ],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NzI2ODQyNjM0",
          "commit": {
            "abbreviatedOid": "b3494ae"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2021-08-10T21:01:26Z",
          "updatedAt": "2021-08-10T21:01:27Z",
          "comments": [
            {
              "originalPosition": 8,
              "body": "```suggestion\r\nsuch as HTTP CONNECT {{?HTTP-CONNECT=RFC7231, Section 4.3.6}} should be used.\r\n```",
              "createdAt": "2021-08-10T21:01:26Z",
              "updatedAt": "2021-08-10T21:01:27Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NzI2OTE2Mzcy",
          "commit": {
            "abbreviatedOid": "77e2762"
          },
          "author": "martinthomson",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "The question I have would be whether these policies are not satisfied anyway, as HPKE (and whatever key management is involved) provides the necessary properties.\r\n\r\nIn any case, I would probably move this to the client section and maybe talk a bit more about the choice a client is faced with: use ohttp and trust that HPKE (and whatever key management is involved) provides the necessary protection for the exchange, plus maybe whatever policy is used on the connection to the proxy.  Or forego the \"oblivious\" property and fall back to a direct connection to the server.",
          "createdAt": "2021-08-10T23:11:08Z",
          "updatedAt": "2021-08-10T23:15:00Z",
          "comments": [
            {
              "originalPosition": 7,
              "body": "```suggestion\r\nare incompatible with Oblivious HTTP.  In such cases, alternative technologies\r\n```",
              "createdAt": "2021-08-10T23:11:08Z",
              "updatedAt": "2021-08-10T23:15:00Z"
            },
            {
              "originalPosition": 8,
              "body": "```suggestion\r\nsuch as HTTP CONNECT ({{Section 9.3.6 of HTTP}}) should be used.\r\n```",
              "createdAt": "2021-08-10T23:11:33Z",
              "updatedAt": "2021-08-10T23:15:01Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NzM2NjcxNDc4",
          "commit": {
            "abbreviatedOid": "1793d65"
          },
          "author": "martinthomson",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "Thanks for changing it up.  I'm not 100% on the structure of this yet, but it is more important to get the info in place.",
          "createdAt": "2021-08-24T00:30:41Z",
          "updatedAt": "2021-08-24T00:32:07Z",
          "comments": [
            {
              "originalPosition": 8,
              "body": "```suggestion\r\n({{Section 9.3.6 of HTTP}}) can be used. Applications could implement related\r\n```",
              "createdAt": "2021-08-24T00:30:41Z",
              "updatedAt": "2021-08-24T00:32:07Z"
            },
            {
              "originalPosition": 9,
              "body": "```suggestion\r\npolicies on key configurations and proxy connections, though these might not\r\n```",
              "createdAt": "2021-08-24T00:30:51Z",
              "updatedAt": "2021-08-24T00:32:07Z"
            },
            {
              "originalPosition": 12,
              "body": "```suggestion\r\ndirectly to the target at the cost of either privacy or performance.\r\n```",
              "createdAt": "2021-08-24T00:31:17Z",
              "updatedAt": "2021-08-24T00:32:07Z"
            }
          ]
        }
      ]
    },
    {
      "number": 68,
      "id": "MDExOlB1bGxSZXF1ZXN0NzA3ODg3MjYz",
      "title": "Malformed definition was bad grammar",
      "url": "https://github.com/ietf-wg-ohai/oblivious-http/pull/68",
      "state": "MERGED",
      "author": "martinthomson",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Try again.",
      "createdAt": "2021-08-11T00:05:45Z",
      "updatedAt": "2021-08-11T00:23:17Z",
      "baseRepository": "ietf-wg-ohai/oblivious-http",
      "baseRefName": "main",
      "baseRefOid": "03a47f8a4b882e8752c9fbcba1197af90b7ee039",
      "headRepository": "ietf-wg-ohai/oblivious-http",
      "headRefName": "invalid-malformed",
      "headRefOid": "4311a7ded25c38d62412a4e30c6e7b51ac1f0c61",
      "closedAt": "2021-08-11T00:23:17Z",
      "mergedAt": "2021-08-11T00:23:17Z",
      "mergedBy": "martinthomson",
      "mergeCommit": {
        "oid": "64771e60c2d291244755596ad06b74aa59b6b753"
      },
      "comments": [],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NzI2OTQxMDE4",
          "commit": {
            "abbreviatedOid": "4311a7d"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2021-08-11T00:10:18Z",
          "updatedAt": "2021-08-11T00:10:18Z",
          "comments": []
        }
      ]
    },
    {
      "number": 69,
      "id": "MDExOlB1bGxSZXF1ZXN0NzE3OTYzMDYy",
      "title": "Document formal properties, and point to analysis.",
      "url": "https://github.com/ietf-wg-ohai/oblivious-http/pull/69",
      "state": "MERGED",
      "author": "chris-wood",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2021-08-23T15:58:17Z",
      "updatedAt": "2021-08-24T00:34:20Z",
      "baseRepository": "ietf-wg-ohai/oblivious-http",
      "baseRefName": "main",
      "baseRefOid": "64771e60c2d291244755596ad06b74aa59b6b753",
      "headRepository": "ietf-wg-ohai/oblivious-http",
      "headRefName": "caw/formal-model",
      "headRefOid": "f36f8008ba645baa5de444962a5bc0d576628e91",
      "closedAt": "2021-08-24T00:34:20Z",
      "mergedAt": "2021-08-24T00:34:20Z",
      "mergedBy": "martinthomson",
      "mergeCommit": {
        "oid": "1f932d819f0e40f4dd93f98cda310dc42ab13611"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 73,
      "id": "PR_kwDOE6fLGM4tiCHc",
      "title": "Render the diagram with SVG",
      "url": "https://github.com/ietf-wg-ohai/oblivious-http/pull/73",
      "state": "MERGED",
      "author": "martinthomson",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "You will need to install aasvg and svgcheck in order to make this work locally:\r\n\r\n```\r\nnpm install -g aasvg\r\npip install --user svgcheck\r\n```",
      "createdAt": "2021-10-22T06:19:38Z",
      "updatedAt": "2021-10-25T22:54:11Z",
      "baseRepository": "ietf-wg-ohai/oblivious-http",
      "baseRefName": "main",
      "baseRefOid": "1ac8bd076a37ce86e839d3a64adfa6e976f06a38",
      "headRepository": "ietf-wg-ohai/oblivious-http",
      "headRefName": "aasvg",
      "headRefOid": "4f7bd17eb66581dc977817dcaaabf2f14005f8ca",
      "closedAt": "2021-10-25T22:54:10Z",
      "mergedAt": "2021-10-25T22:54:10Z",
      "mergedBy": "martinthomson",
      "mergeCommit": {
        "oid": "0333237689af4aff4927f185478bd810c86c6900"
      },
      "comments": [
        {
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "body": "LGTM, but there's a conflict?",
          "createdAt": "2021-10-25T15:16:13Z",
          "updatedAt": "2021-10-25T15:16:21Z"
        }
      ],
      "reviews": []
    },
    {
      "number": 74,
      "id": "PR_kwDOE6fLGM4tmJSs",
      "title": "Reword PCS text",
      "url": "https://github.com/ietf-wg-ohai/oblivious-http/pull/74",
      "state": "MERGED",
      "author": "martinthomson",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "The sentence here seemed a little repetitive.  This expands it some.",
      "createdAt": "2021-10-25T00:03:22Z",
      "updatedAt": "2021-10-25T15:16:09Z",
      "baseRepository": "ietf-wg-ohai/oblivious-http",
      "baseRefName": "main",
      "baseRefOid": "6cf9275cbb8c44d6ef9a397d72eb68704b9918a4",
      "headRepository": "ietf-wg-ohai/oblivious-http",
      "headRefName": "compromise-reword",
      "headRefOid": "60d96e2fbd35b03ce3c3d6ab592c2735d7d4271e",
      "closedAt": "2021-10-25T15:16:09Z",
      "mergedAt": "2021-10-25T15:16:09Z",
      "mergedBy": "chris-wood",
      "mergeCommit": {
        "oid": "341a0505bbccbdd821b5e5db1ff16a20e3e30efd"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOE6fLGM4u_AYD",
          "commit": {
            "abbreviatedOid": "60d96e2"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2021-10-25T15:16:04Z",
          "updatedAt": "2021-10-25T15:16:04Z",
          "comments": []
        }
      ]
    },
    {
      "number": 80,
      "id": "PR_kwDOE6fLGM4uvtZD",
      "title": "AAD length",
      "url": "https://github.com/ietf-wg-ohai/oblivious-http/pull/80",
      "state": "MERGED",
      "author": "tfpauly",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Fixing a nit about AAD length",
      "createdAt": "2021-11-19T00:46:14Z",
      "updatedAt": "2021-11-19T00:53:29Z",
      "baseRepository": "ietf-wg-ohai/oblivious-http",
      "baseRefName": "main",
      "baseRefOid": "656424d7f536e4f8621968d88d64f9c1159d8390",
      "headRepository": "ietf-wg-ohai/oblivious-http",
      "headRefName": "tfpauly-patch-1",
      "headRefOid": "f074b5d56b64562c8fab30f31dc5f473a8521031",
      "closedAt": "2021-11-19T00:53:28Z",
      "mergedAt": "2021-11-19T00:53:28Z",
      "mergedBy": "chris-wood",
      "mergeCommit": {
        "oid": "3a558f09c6f40d94bba723b0888a131bb1c0a517"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOE6fLGM4wUbh6",
          "commit": {
            "abbreviatedOid": "f074b5d"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2021-11-19T00:53:15Z",
          "updatedAt": "2021-11-19T00:53:15Z",
          "comments": []
        }
      ]
    },
    {
      "number": 81,
      "id": "PR_kwDOE6fLGM4vpMYU",
      "title": "Update README",
      "url": "https://github.com/ietf-wg-ohai/oblivious-http/pull/81",
      "state": "MERGED",
      "author": "martinthomson",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "As long as I can't push directly, here's a pull request.",
      "createdAt": "2021-12-09T22:49:21Z",
      "updatedAt": "2021-12-10T01:13:56Z",
      "baseRepository": "ietf-wg-ohai/oblivious-http",
      "baseRefName": "main",
      "baseRefOid": "98c6a2a82036bdcbca004fa8dabbd26cc735ad6e",
      "headRepository": "martinthomson/oblivious-http",
      "headRefName": "readme",
      "headRefOid": "999d41e92911700a17dc4c0696876f11959fe78f",
      "closedAt": "2021-12-10T00:07:59Z",
      "mergedAt": "2021-12-10T00:07:59Z",
      "mergedBy": "chris-wood",
      "mergeCommit": {
        "oid": "47d3738b59169d4255ca7e7b97b46002a3a5d7ff"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOE6fLGM4xXzBM",
          "commit": {
            "abbreviatedOid": "999d41e"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2021-12-10T00:07:54Z",
          "updatedAt": "2021-12-10T00:07:54Z",
          "comments": []
        }
      ]
    },
    {
      "number": 82,
      "id": "PR_kwDOE6fLGM4vpiH6",
      "title": "Automatic update of venue information",
      "url": "https://github.com/ietf-wg-ohai/oblivious-http/pull/82",
      "state": "MERGED",
      "author": "martinthomson",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Fix the area and workgroup pieces (which I neglected before) and use the new feature.",
      "createdAt": "2021-12-10T01:06:31Z",
      "updatedAt": "2021-12-10T01:08:16Z",
      "baseRepository": "ietf-wg-ohai/oblivious-http",
      "baseRefName": "main",
      "baseRefOid": "47d3738b59169d4255ca7e7b97b46002a3a5d7ff",
      "headRepository": "martinthomson/oblivious-http",
      "headRefName": "venue",
      "headRefOid": "147daeb7678140d14ceccf4d2b76640764510c11",
      "closedAt": "2021-12-10T01:08:16Z",
      "mergedAt": "2021-12-10T01:08:16Z",
      "mergedBy": "chris-wood",
      "mergeCommit": {
        "oid": "e158c434f1c240907cab541b405c7493c69c2d98"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOE6fLGM4xX6Hw",
          "commit": {
            "abbreviatedOid": "147daeb"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2021-12-10T01:08:12Z",
          "updatedAt": "2021-12-10T01:08:12Z",
          "comments": []
        }
      ]
    },
    {
      "number": 83,
      "id": "PR_kwDOE6fLGM4vpkF2",
      "title": "Move padding to binary HTTP messages",
      "url": "https://github.com/ietf-wg-ohai/oblivious-http/pull/83",
      "state": "MERGED",
      "author": "martinthomson",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "See discussion on-list.",
      "createdAt": "2021-12-10T01:12:08Z",
      "updatedAt": "2021-12-10T15:43:28Z",
      "baseRepository": "ietf-wg-ohai/oblivious-http",
      "baseRefName": "main",
      "baseRefOid": "e158c434f1c240907cab541b405c7493c69c2d98",
      "headRepository": "martinthomson/oblivious-http",
      "headRefName": "remove-padding",
      "headRefOid": "6f377e7f91a7444dbc3d2b83d57d183e57ff9079",
      "closedAt": "2021-12-10T15:43:28Z",
      "mergedAt": "2021-12-10T15:43:28Z",
      "mergedBy": "chris-wood",
      "mergeCommit": {
        "oid": "1c49ebaff93d1f9f7aa96b8fd051b5356629e025"
      },
      "comments": [
        {
          "author": "martinthomson",
          "authorAssociation": "CONTRIBUTOR",
          "body": "See also https://github.com/httpwg/http-extensions/pull/1832",
          "createdAt": "2021-12-10T01:12:28Z",
          "updatedAt": "2021-12-10T01:12:28Z"
        },
        {
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "body": "If we're pinning the contents of the encapsulation to message/bhttp, it seems like we also ought to change the HPKE info strings to match (\"request\" -> \"message/bhttp-request\" or whatever). When someone tries to reuse this layer of encapsulation, I think they ought to change the info string accordingly to match whatever the underlying type is. And it might not hurt to add guidance to such people in the security considerations. Can we do this in a followup PR?",
          "createdAt": "2021-12-10T15:00:57Z",
          "updatedAt": "2021-12-10T15:00:57Z"
        },
        {
          "author": "tfpauly",
          "authorAssociation": "COLLABORATOR",
          "body": "I agree that we should think about content types a bit more, but that seems appropriate for another PR. ",
          "createdAt": "2021-12-10T15:13:10Z",
          "updatedAt": "2021-12-10T15:13:10Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOE6fLGM4xYUEP",
          "commit": {
            "abbreviatedOid": "6f377e7"
          },
          "author": "tfpauly",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2021-12-10T05:49:21Z",
          "updatedAt": "2021-12-10T05:49:21Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOE6fLGM4xahOm",
          "commit": {
            "abbreviatedOid": "6f377e7"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2021-12-10T15:37:25Z",
          "updatedAt": "2021-12-10T15:37:25Z",
          "comments": []
        }
      ]
    },
    {
      "number": 84,
      "id": "PR_kwDOE6fLGM4vpmD0",
      "title": "Use the published binary HTTP version",
      "url": "https://github.com/ietf-wg-ohai/oblivious-http/pull/84",
      "state": "MERGED",
      "author": "martinthomson",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "This makes the whole `{::date}` thing unnecessary as well.",
      "createdAt": "2021-12-10T01:17:45Z",
      "updatedAt": "2021-12-10T14:58:20Z",
      "baseRepository": "ietf-wg-ohai/oblivious-http",
      "baseRefName": "main",
      "baseRefOid": "e158c434f1c240907cab541b405c7493c69c2d98",
      "headRepository": "martinthomson/oblivious-http",
      "headRefName": "bhttp-ref",
      "headRefOid": "e1a9b01ea0f5adf463cfb67054ce595789a15b05",
      "closedAt": "2021-12-10T14:58:20Z",
      "mergedAt": "2021-12-10T14:58:20Z",
      "mergedBy": "chris-wood",
      "mergeCommit": {
        "oid": "e0d9d74bac69cc225aae0ce24a79acd626b0b678"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOE6fLGM4xYUGo",
          "commit": {
            "abbreviatedOid": "e1a9b01"
          },
          "author": "tfpauly",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2021-12-10T05:49:43Z",
          "updatedAt": "2021-12-10T05:49:43Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOE6fLGM4xaWAu",
          "commit": {
            "abbreviatedOid": "e1a9b01"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2021-12-10T14:58:16Z",
          "updatedAt": "2021-12-10T14:58:16Z",
          "comments": []
        }
      ]
    },
    {
      "number": 86,
      "id": "PR_kwDOE6fLGM4vvT25",
      "title": "Provide better key diversity",
      "url": "https://github.com/ietf-wg-ohai/oblivious-http/pull/86",
      "state": "MERGED",
      "author": "martinthomson",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "This is a breaking change, but I think that it's worthwhile.  \"request\" is an extraordinary generic string and the risk of it being used in another context is too high.",
      "createdAt": "2021-12-13T06:34:56Z",
      "updatedAt": "2021-12-14T00:14:20Z",
      "baseRepository": "ietf-wg-ohai/oblivious-http",
      "baseRefName": "main",
      "baseRefOid": "1c49ebaff93d1f9f7aa96b8fd051b5356629e025",
      "headRepository": "martinthomson/oblivious-http",
      "headRefName": "label-diversity",
      "headRefOid": "7403c75c11b4668a885c92c9ea484782802a7543",
      "closedAt": "2021-12-14T00:14:20Z",
      "mergedAt": "2021-12-14T00:14:20Z",
      "mergedBy": "chris-wood",
      "mergeCommit": {
        "oid": "a5264e9a73313f7ab9916f8372cdf279a6acaca5"
      },
      "comments": [
        {
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "body": "We can address test vectors in a followup PR. ",
          "createdAt": "2021-12-13T13:17:51Z",
          "updatedAt": "2021-12-13T13:17:51Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOE6fLGM4xfDKR",
          "commit": {
            "abbreviatedOid": "7403c75"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2021-12-13T13:17:15Z",
          "updatedAt": "2021-12-13T13:17:15Z",
          "comments": []
        }
      ]
    },
    {
      "number": 87,
      "id": "PR_kwDOE6fLGM4vvT6k",
      "title": "Describe Nenc and Nk together.",
      "url": "https://github.com/ietf-wg-ohai/oblivious-http/pull/87",
      "state": "MERGED",
      "author": "martinthomson",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Nk wasn't described properly before.  This improves that, but puts the citations together.",
      "createdAt": "2021-12-13T06:35:25Z",
      "updatedAt": "2021-12-13T13:15:52Z",
      "baseRepository": "ietf-wg-ohai/oblivious-http",
      "baseRefName": "main",
      "baseRefOid": "1c49ebaff93d1f9f7aa96b8fd051b5356629e025",
      "headRepository": "martinthomson/oblivious-http",
      "headRefName": "nenc-nk",
      "headRefOid": "fbeefd88fa38cfafe7e098057b6bb71324b8ca3f",
      "closedAt": "2021-12-13T13:15:51Z",
      "mergedAt": "2021-12-13T13:15:51Z",
      "mergedBy": "chris-wood",
      "mergeCommit": {
        "oid": "da07f309a1a4fd04f667afdc0c0748f7658db83f"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOE6fLGM4xfCx8",
          "commit": {
            "abbreviatedOid": "fbeefd8"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2021-12-13T13:15:47Z",
          "updatedAt": "2021-12-13T13:15:47Z",
          "comments": []
        }
      ]
    },
    {
      "number": 88,
      "id": "PR_kwDOE6fLGM4vvaTH",
      "title": "Add a timestamp for anti-replay",
      "url": "https://github.com/ietf-wg-ohai/oblivious-http/pull/88",
      "state": "CLOSED",
      "author": "martinthomson",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2021-12-13T07:21:52Z",
      "updatedAt": "2022-02-14T00:47:29Z",
      "baseRepository": "ietf-wg-ohai/oblivious-http",
      "baseRefName": "main",
      "baseRefOid": "1c49ebaff93d1f9f7aa96b8fd051b5356629e025",
      "headRepository": "martinthomson/oblivious-http",
      "headRefName": "anti-replay",
      "headRefOid": "4eb7ecfa5f6a4211922222b01b92b579db52dc8a",
      "closedAt": "2022-02-14T00:47:29Z",
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [
        {
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "body": "Thanks for adding this change! I think my largest outstanding question is on the width of the timestamp. (We can always land 32 bits now and revisit later, of course.)",
          "createdAt": "2021-12-13T14:10:43Z",
          "updatedAt": "2021-12-13T14:10:43Z"
        },
        {
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "body": "Closing this one in favour of a new PR.",
          "createdAt": "2022-02-14T00:47:26Z",
          "updatedAt": "2022-02-14T00:47:26Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOE6fLGM4xfLms",
          "commit": {
            "abbreviatedOid": "03e51f6"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2021-12-13T13:47:32Z",
          "updatedAt": "2021-12-13T14:10:02Z",
          "comments": [
            {
              "originalPosition": 125,
              "body": "```suggestion\r\nvalue is a high-entropy value that is freshly generated for every request, so \r\ntwo valid requests will have different values with overwhelming probability.\r\n```",
              "createdAt": "2021-12-13T13:47:33Z",
              "updatedAt": "2021-12-13T14:10:02Z"
            },
            {
              "originalPosition": 148,
              "body": "After re-reading this sentence, I'm no longer sure I understand what it's trying to say. Can we elaborate, or maybe add an example?",
              "createdAt": "2021-12-13T13:53:12Z",
              "updatedAt": "2021-12-13T14:10:02Z"
            },
            {
              "originalPosition": 170,
              "body": "```suggestion\r\nwindow that is large enough to allow for differences between client and server clocks.\r\n```",
              "createdAt": "2021-12-13T13:54:45Z",
              "updatedAt": "2021-12-13T14:10:02Z"
            },
            {
              "originalPosition": 178,
              "body": "```suggestion\r\nused for TLS. Indeed, in practice, client clock skew can be as large as a day {{?CLOCKSKEW=DOI.10.1145/3133956.3134007}} for a non-negligible amount of clients.\r\n\r\nServers MUST NOT treat the time window as secret information. An attacker can actively\r\nprobe the server with specially crafted request timestamps to determine the time window\r\nover which the server will accept responses. \r\n```",
              "createdAt": "2021-12-13T13:58:25Z",
              "updatedAt": "2021-12-13T14:10:02Z"
            },
            {
              "originalPosition": 14,
              "body": "32 bits of seconds seems quite wide, though it is the smallest reasonable power of 2 that buys us at least a day's worth of clock skew. In a perfect world, I'd prefer this be 24 bits or shorter. Do we have up-to-date data on clock skew we can use to make a more informed choice here? (This assumes honest clients, but maybe that's not the right target, as discussed in #89.)",
              "createdAt": "2021-12-13T14:09:54Z",
              "updatedAt": "2021-12-13T15:09:15Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOE6fLGM4xfTA5",
          "commit": {
            "abbreviatedOid": "03e51f6"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2021-12-13T14:12:20Z",
          "updatedAt": "2021-12-13T14:12:21Z",
          "comments": [
            {
              "originalPosition": 14,
              "body": "cc @tfpauly and @davidben, who might have a better view from the client",
              "createdAt": "2021-12-13T14:12:20Z",
              "updatedAt": "2021-12-13T14:12:21Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOE6fLGM4xg9R_",
          "commit": {
            "abbreviatedOid": "03e51f6"
          },
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "Thanks.  Let's leave this open for now while we discuss the approach.",
          "createdAt": "2021-12-13T20:30:01Z",
          "updatedAt": "2021-12-13T20:32:02Z",
          "comments": [
            {
              "originalPosition": 14,
              "body": "My sense is that what clock skew will drive is the width of the acceptance window if a server is doing anti-replay.  If we want to reduce that, we need better clocks in clients (hah, as if!) or some means of correcting.",
              "createdAt": "2021-12-13T20:30:01Z",
              "updatedAt": "2021-12-13T20:32:02Z"
            },
            {
              "originalPosition": 148,
              "body": "Yeah, we might just drop this entirely.  It was supposed to be a call out to applications managing the risk themselves.",
              "createdAt": "2021-12-13T20:30:45Z",
              "updatedAt": "2021-12-13T20:32:02Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOE6fLGM4y9DvN",
          "commit": {
            "abbreviatedOid": "4eb7ecf"
          },
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "The text on anti-replay here is probably useful, but the mechanism pieces can go.  I'll try to salvage something in a follow-up.",
          "createdAt": "2022-01-18T01:16:53Z",
          "updatedAt": "2022-01-18T01:19:41Z",
          "comments": [
            {
              "originalPosition": 163,
              "body": "```suggestion\r\nis the same as one that was previously answered within that time window. Servers\r\ncan identify duplicate requests using the `enc` value.  The server also rejects requests if the timestamp is\r\n```",
              "createdAt": "2022-01-18T01:16:54Z",
              "updatedAt": "2022-01-18T01:19:41Z"
            },
            {
              "originalPosition": 164,
              "body": "```suggestion\r\noutside of the chosen time window.  Servers SHOULD\r\n```",
              "createdAt": "2022-01-18T01:17:08Z",
              "updatedAt": "2022-01-18T01:19:41Z"
            },
            {
              "originalPosition": 174,
              "body": "```suggestion\r\nused for TLS. In practice, client clock skew can be as large as a day\r\n```",
              "createdAt": "2022-01-18T01:17:41Z",
              "updatedAt": "2022-01-18T01:19:41Z"
            }
          ]
        }
      ]
    },
    {
      "number": 90,
      "id": "PR_kwDOE6fLGM4vyEMF",
      "title": "Update examples based on label changes",
      "url": "https://github.com/ietf-wg-ohai/oblivious-http/pull/90",
      "state": "MERGED",
      "author": "martinthomson",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2021-12-13T20:23:12Z",
      "updatedAt": "2021-12-14T06:40:02Z",
      "baseRepository": "ietf-wg-ohai/oblivious-http",
      "baseRefName": "main",
      "baseRefOid": "da07f309a1a4fd04f667afdc0c0748f7658db83f",
      "headRepository": "martinthomson/oblivious-http",
      "headRefName": "label-vectors",
      "headRefOid": "b8334cabe3f2a63c711e4503e3be488246681220",
      "closedAt": "2021-12-14T00:14:02Z",
      "mergedAt": "2021-12-14T00:14:02Z",
      "mergedBy": "chris-wood",
      "mergeCommit": {
        "oid": "fc28c2e70fff99a82fbb9e11fc4ab332d4fe4e98"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOE6fLGM4xhmGw",
          "commit": {
            "abbreviatedOid": "b8334ca"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2021-12-14T00:13:58Z",
          "updatedAt": "2021-12-14T00:13:58Z",
          "comments": []
        }
      ]
    },
    {
      "number": 91,
      "id": "PR_kwDOE6fLGM4yH-i4",
      "title": "Pin encapsulation payload type to message/bhttp",
      "url": "https://github.com/ietf-wg-ohai/oblivious-http/pull/91",
      "state": "MERGED",
      "author": "chris-wood",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Test vectors generated from the [corresponding change in ohttp](https://github.com/martinthomson/ohttp/pull/17).\r\n\r\nCloses #85.\r\nCloses #78.",
      "createdAt": "2022-02-05T22:42:07Z",
      "updatedAt": "2022-02-07T03:39:10Z",
      "baseRepository": "ietf-wg-ohai/oblivious-http",
      "baseRefName": "main",
      "baseRefOid": "a5264e9a73313f7ab9916f8372cdf279a6acaca5",
      "headRepository": "ietf-wg-ohai/oblivious-http",
      "headRefName": "caw/pin-content-type",
      "headRefOid": "9cdee22bceb14160a2066669818f409eec793629",
      "closedAt": "2022-02-07T03:39:10Z",
      "mergedAt": "2022-02-07T03:39:09Z",
      "mergedBy": "martinthomson",
      "mergeCommit": {
        "oid": "61eeb56a04f9538df7d83b863503856bc7e11d90"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOE6fLGM40F9VY",
          "commit": {
            "abbreviatedOid": "ca455d6"
          },
          "author": "LPardue",
          "authorAssociation": "NONE",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2022-02-05T23:28:57Z",
          "updatedAt": "2022-02-05T23:28:57Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOE6fLGM40GXG4",
          "commit": {
            "abbreviatedOid": "9cdee22"
          },
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "Thanks Chris. I assume that when I read more of my mail I will find a pull request for the code.",
          "createdAt": "2022-02-06T20:46:43Z",
          "updatedAt": "2022-02-06T20:48:57Z",
          "comments": [
            {
              "originalPosition": 77,
              "body": "The second mention of HPKE is HKDF expand.",
              "createdAt": "2022-02-06T20:46:43Z",
              "updatedAt": "2022-02-06T20:48:57Z"
            },
            {
              "originalPosition": 82,
              "body": "Tweak here to match.",
              "createdAt": "2022-02-06T20:47:19Z",
              "updatedAt": "2022-02-06T20:48:57Z"
            },
            {
              "originalPosition": 86,
              "body": "And here",
              "createdAt": "2022-02-06T20:47:34Z",
              "updatedAt": "2022-02-06T20:48:57Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOE6fLGM40GlLW",
          "commit": {
            "abbreviatedOid": "9cdee22"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-02-07T02:33:28Z",
          "updatedAt": "2022-02-07T02:33:29Z",
          "comments": [
            {
              "originalPosition": 77,
              "body": "I specifically didn't use HKDF here and went with the more generic \"export context\" phrasing since it could be a KDF that's not HKDF, so I think we could probably leave this as-is.",
              "createdAt": "2022-02-07T02:33:29Z",
              "updatedAt": "2022-02-07T02:33:29Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOE6fLGM40GqNr",
          "commit": {
            "abbreviatedOid": "9cdee22"
          },
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "Sorry about that.  Misremembered how this worked; I should have double-checked.",
          "createdAt": "2022-02-07T03:39:05Z",
          "updatedAt": "2022-02-07T03:39:05Z",
          "comments": []
        }
      ]
    },
    {
      "number": 92,
      "id": "PR_kwDOE6fLGM4yv21T",
      "title": "Anti-replay mechanism",
      "url": "https://github.com/ietf-wg-ohai/oblivious-http/pull/92",
      "state": "MERGED",
      "author": "martinthomson",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "This recommends the use of `Date` in requests as discussed on #88 and #76.\r\n\r\nMost of the heavy lifting is outsourced to [a new draft](https://datatracker.ietf.org/doc/draft-thomson-httpapi-date-requests/), so I won't merge this until we have some greater certainty about the destiny of that draft.\r\n\r\nCloses #76.\r\nCloses #89.",
      "createdAt": "2022-02-14T00:51:55Z",
      "updatedAt": "2022-03-28T01:09:38Z",
      "baseRepository": "ietf-wg-ohai/oblivious-http",
      "baseRefName": "main",
      "baseRefOid": "84e20074ebc2517514a1ec73aaf0b458b9df43c6",
      "headRepository": "martinthomson/oblivious-http",
      "headRefName": "anti-replay",
      "headRefOid": "a7da367cd6c67407a2563cbf805e954ccc9944ac",
      "closedAt": "2022-03-28T01:09:35Z",
      "mergedAt": "2022-03-28T01:09:34Z",
      "mergedBy": "martinthomson",
      "mergeCommit": {
        "oid": "c18b6ec15815efbdbd0a6525761823a43eb86c5a"
      },
      "comments": [
        {
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "body": "> Either way, once you forget the old enc value, if you see the same enc value with a new value for t, it's a new request and you can accept it.\r\n\r\nThis seems like a separate issue, but: it seems really quite problematic if two requests had the same enc value but different values for t, as the client is then either reusing its key share or something else is going on. \r\n\r\nWhat my suggestion meant to say is that, if you get a value of t outside of the window, reject it or ask the client to retry with a new value of t. And use the new enc value to enforce your replay check for that given value t. That is, logically:\r\n\r\n- Given (enc, t) and enc has not been seen before in t, accept.\r\n- Given (enc, t) and enc has been seen in t, reject as replay.\r\n- Given (enc, t') and t' is not the current time window, reject and ask them to retry",
          "createdAt": "2022-02-14T22:51:49Z",
          "updatedAt": "2022-02-14T22:51:49Z"
        },
        {
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "body": "Yeah, that's right.  I was interpreting your request as saying that you might need to do something with duplicate enc values even when you forgot the original.",
          "createdAt": "2022-02-14T22:56:10Z",
          "updatedAt": "2022-02-14T22:56:10Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOE6fLGM40hRks",
          "commit": {
            "abbreviatedOid": "6e59c4f"
          },
          "author": "tfpauly",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-02-14T04:05:47Z",
          "updatedAt": "2022-02-14T04:06:36Z",
          "comments": [
            {
              "originalPosition": 129,
              "body": "`ffield` -> `field`",
              "createdAt": "2022-02-14T04:05:47Z",
              "updatedAt": "2022-02-14T04:06:36Z"
            },
            {
              "originalPosition": 9,
              "body": "Does the encapsulated request actually include a timestamp? The format doesn't seem to. If this is just referring to the fact that there should be a Date header, it seems misleading.",
              "createdAt": "2022-02-14T04:06:34Z",
              "updatedAt": "2022-02-14T04:06:36Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOE6fLGM40hSVG",
          "commit": {
            "abbreviatedOid": "6e59c4f"
          },
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-02-14T04:15:19Z",
          "updatedAt": "2022-02-14T04:15:19Z",
          "comments": [
            {
              "originalPosition": 9,
              "body": "Editing error on my part; I missed this one when I cribbed from #88.",
              "createdAt": "2022-02-14T04:15:19Z",
              "updatedAt": "2022-02-14T04:15:19Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOE6fLGM40jez4",
          "commit": {
            "abbreviatedOid": "8137331"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "CHANGES_REQUESTED",
          "body": "Thanks! This looks good overall to me. Only minor changes requested. ",
          "createdAt": "2022-02-14T14:34:38Z",
          "updatedAt": "2022-02-14T14:46:44Z",
          "comments": [
            {
              "originalPosition": 25,
              "body": "```suggestion\r\nThe Nenc parameter corresponding to the HpkeKdfId can be found in {{!HPKE, Section 7.1}}.\r\n```",
              "createdAt": "2022-02-14T14:34:38Z",
              "updatedAt": "2022-02-14T14:46:44Z"
            },
            {
              "originalPosition": 60,
              "body": "```suggestion\r\nother protocols reusing this encapsulation format, especially new versions of this protocol, can ensure key\r\n```",
              "createdAt": "2022-02-14T14:35:35Z",
              "updatedAt": "2022-02-14T14:46:44Z"
            },
            {
              "originalPosition": 66,
              "body": "```suggestion\r\nA server is responsible for either rejecting replayed requests or ensuring that\r\n```",
              "createdAt": "2022-02-14T14:37:37Z",
              "updatedAt": "2022-02-14T14:46:44Z"
            },
            {
              "originalPosition": 64,
              "body": "```suggestion\r\nlabel. See {{repurposing-the-encapsulation-format}} for more details.\r\n```",
              "createdAt": "2022-02-14T14:38:39Z",
              "updatedAt": "2022-02-14T14:46:44Z"
            },
            {
              "originalPosition": 107,
              "body": "```suggestion\r\nEven without replay prevention, the server-chosen `response_nonce` field\r\n```\r\n\r\nI'm not sure what \"strong\" vs \"weak\" replay prevention is, and I don't think we have a rigorous definition, so I'd just omit the adjective entirely.",
              "createdAt": "2022-02-14T14:39:42Z",
              "updatedAt": "2022-02-14T14:46:44Z"
            },
            {
              "originalPosition": 116,
              "body": "```suggestion\r\nClients SHOULD include a `Date` header field in encapsulated requests.  Though HTTP requests\r\n```",
              "createdAt": "2022-02-14T14:40:04Z",
              "updatedAt": "2022-02-14T14:46:44Z"
            },
            {
              "originalPosition": 124,
              "body": "```suggestion\r\nServers can identify duplicate requests using the encapsulation `enc` value.  The server can\r\n```",
              "createdAt": "2022-02-14T14:40:50Z",
              "updatedAt": "2022-02-14T14:46:45Z"
            },
            {
              "originalPosition": 123,
              "body": "Is this sufficient? Let's say the server is currently in time window T, and a request with `enc=x` comes in. If this doesn't collide with another request in T, the server happily accepts it. Now the server moves to time window T+1, and the request with `enc=x` is replayed. This text suggests, to me, that the server would _accept_ it, when really it should reject it or ask to replay with an updated Date. ",
              "createdAt": "2022-02-14T14:43:09Z",
              "updatedAt": "2022-02-14T14:46:45Z"
            },
            {
              "originalPosition": 123,
              "body": "```suggestion\r\nis the same as one that was previously answered within that time window. The server can either \r\nreject all other requests outside of this time window, or by asking the client to retry its request\r\nwith an updated Date header. See {{Section 4 of !REQUEST-DATE}} for more details.\r\n```\r\n\r\nI realize this is said below, but I think I'd lift it here.",
              "createdAt": "2022-02-14T14:46:14Z",
              "updatedAt": "2022-02-14T14:46:45Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOE6fLGM40lkj2",
          "commit": {
            "abbreviatedOid": "8137331"
          },
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "Thanks Chris,\r\n\r\nI've suggested some changes that tweak yours that I'll accept.",
          "createdAt": "2022-02-14T22:32:24Z",
          "updatedAt": "2022-02-14T22:44:52Z",
          "comments": [
            {
              "originalPosition": 25,
              "body": "```suggestion\r\nThe Nenc parameter corresponding to the HpkeKdfId can be found in {{Section 7.1 of !HPKE}}.\r\n```",
              "createdAt": "2022-02-14T22:32:24Z",
              "updatedAt": "2022-02-14T22:44:53Z"
            },
            {
              "originalPosition": 60,
              "body": "```suggestion\r\nprotocols that reuse this encapsulation format, especially new versions of this protocol, can ensure key\r\n```",
              "createdAt": "2022-02-14T22:33:11Z",
              "updatedAt": "2022-02-14T22:44:53Z"
            },
            {
              "originalPosition": 64,
              "body": "```suggestion\r\nlabel; see {{repurposing-the-encapsulation-format}}.\r\n```",
              "createdAt": "2022-02-14T22:33:34Z",
              "updatedAt": "2022-02-14T22:44:53Z"
            },
            {
              "originalPosition": 123,
              "body": "If the new request has a timestamp in the new time window, it can accept it as a new value.\r\n\r\nGenerally you want a sliding window for anti-replay, so that you have a window of W = (now() - X .. now() + Y) continuously.  Then, when a request comes in with t \\in W, you accept it if the enc value is unique.  You drop old values when t < now() - X. \r\n\r\nIn practice, this isn't very efficient and you need to quantize the time window a little bit.  The anti-replay I built for TLS 0-RTT uses just two time intervals.  A single window means that there are hard discontinuities that cause rejections for very small amounts of skew when you move from one window to the next.\r\n\r\nEither way, once you forget the old enc value, if you see the same enc value with a new value for t, it's a new request and you can accept it.",
              "createdAt": "2022-02-14T22:42:16Z",
              "updatedAt": "2022-02-14T22:44:53Z"
            },
            {
              "originalPosition": 123,
              "body": "```suggestion\r\nis the same as one that was previously answered within that time window.  Servers can reject\r\nrequests outside of this window and signal that clients might retry with a different `Date`\r\nheader field; see {{Section 4 of !REQUEST-DATE}}.\r\n```",
              "createdAt": "2022-02-14T22:44:22Z",
              "updatedAt": "2022-02-14T22:44:53Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOE6fLGM40luid",
          "commit": {
            "abbreviatedOid": "bc04314"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "LGTM after some reformatting. Thanks for the updates, @martinthomson!",
          "createdAt": "2022-02-14T23:31:19Z",
          "updatedAt": "2022-02-14T23:31:19Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOE6fLGM42xF6D",
          "commit": {
            "abbreviatedOid": "bc04314"
          },
          "author": "tfpauly",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-03-23T14:06:57Z",
          "updatedAt": "2022-03-23T14:06:58Z",
          "comments": [
            {
              "originalPosition": 116,
              "body": "Should we call out that this is only when using binary http as the inner protocol?",
              "createdAt": "2022-03-23T14:06:57Z",
              "updatedAt": "2022-03-23T14:06:58Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOE6fLGM42xGyf",
          "commit": {
            "abbreviatedOid": "bc04314"
          },
          "author": "tfpauly",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-03-23T14:09:10Z",
          "updatedAt": "2022-03-23T14:09:10Z",
          "comments": [
            {
              "originalPosition": 116,
              "body": "It seems like we're missing the bigger normative requirement that \"that the client and target server SHOULD ensure that the protocol that\u2019s encapsulated isn\u2019t going to be vulnerable to replay attacks\". That doesn't seem to be stated anywhere, and that's really the main point.",
              "createdAt": "2022-03-23T14:09:10Z",
              "updatedAt": "2022-03-23T14:09:10Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOE6fLGM425sfd",
          "commit": {
            "abbreviatedOid": "bc04314"
          },
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-03-25T01:44:33Z",
          "updatedAt": "2022-03-25T01:44:34Z",
          "comments": [
            {
              "originalPosition": 116,
              "body": "Good point.  I've added some text at the top of the anti-replay section (second paragraph).  Let me know if that makes sense.",
              "createdAt": "2022-03-25T01:44:34Z",
              "updatedAt": "2022-03-25T01:44:34Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOE6fLGM425yOV",
          "commit": {
            "abbreviatedOid": "bc04314"
          },
          "author": "tfpauly",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-03-25T02:35:32Z",
          "updatedAt": "2022-03-25T02:35:32Z",
          "comments": [
            {
              "originalPosition": 116,
              "body": "@martinthomson Yeah, that's exactly the kind of text I was thinking of. Thanks for adding!",
              "createdAt": "2022-03-25T02:35:32Z",
              "updatedAt": "2022-03-25T02:35:32Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOE6fLGM425yPq",
          "commit": {
            "abbreviatedOid": "2ef3afe"
          },
          "author": "tfpauly",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2022-03-25T02:35:45Z",
          "updatedAt": "2022-03-25T02:35:45Z",
          "comments": []
        }
      ]
    },
    {
      "number": 93,
      "id": "PR_kwDOE6fLGM4yv4cj",
      "title": "Key consistency informative reference",
      "url": "https://github.com/ietf-wg-ohai/oblivious-http/pull/93",
      "state": "MERGED",
      "author": "martinthomson",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Closes #55.",
      "createdAt": "2022-02-14T01:01:13Z",
      "updatedAt": "2022-02-14T22:49:41Z",
      "baseRepository": "ietf-wg-ohai/oblivious-http",
      "baseRefName": "main",
      "baseRefOid": "61eeb56a04f9538df7d83b863503856bc7e11d90",
      "headRepository": "martinthomson/oblivious-http",
      "headRefName": "consistency",
      "headRefOid": "21c0c6ce6b99ad131ca306c86c61db63c5382599",
      "closedAt": "2022-02-14T14:31:22Z",
      "mergedAt": "2022-02-14T14:31:22Z",
      "mergedBy": "chris-wood",
      "mergeCommit": {
        "oid": "269126073dde769f8cfd3045e1b214e23eb11dd4"
      },
      "comments": [
        {
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "body": "What do we want to do with this draft? Should we dispatch it and find it a home?",
          "createdAt": "2022-02-14T14:31:17Z",
          "updatedAt": "2022-02-14T14:31:17Z"
        },
        {
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "body": "Good question.  I wonder if secdispatch would be a good place to ask.",
          "createdAt": "2022-02-14T22:49:37Z",
          "updatedAt": "2022-02-14T22:49:37Z"
        }
      ],
      "reviews": []
    },
    {
      "number": 94,
      "id": "PR_kwDOE6fLGM4y0UO_",
      "title": "Add some more use cases",
      "url": "https://github.com/ietf-wg-ohai/oblivious-http/pull/94",
      "state": "MERGED",
      "author": "martinthomson",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "For #79 and @npdoty.",
      "createdAt": "2022-02-14T22:05:10Z",
      "updatedAt": "2022-02-14T22:55:11Z",
      "baseRepository": "ietf-wg-ohai/oblivious-http",
      "baseRefName": "main",
      "baseRefOid": "269126073dde769f8cfd3045e1b214e23eb11dd4",
      "headRepository": "martinthomson/oblivious-http",
      "headRefName": "more-examples",
      "headRefOid": "4239c7d57879adbe517e9c1ed331f7654cc13e03",
      "closedAt": "2022-02-14T22:05:15Z",
      "mergedAt": "2022-02-14T22:05:15Z",
      "mergedBy": "martinthomson",
      "mergeCommit": {
        "oid": "d02d020522b07a5f77dd7d70ce0fbea4b705426e"
      },
      "comments": [
        {
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "body": "\ud83c\udf89",
          "createdAt": "2022-02-14T22:55:11Z",
          "updatedAt": "2022-02-14T22:55:11Z"
        }
      ],
      "reviews": []
    },
    {
      "number": 95,
      "id": "PR_kwDOE6fLGM4y0hNm",
      "title": "Elaborate on the fixed mapping between proxy and request resources",
      "url": "https://github.com/ietf-wg-ohai/oblivious-http/pull/95",
      "state": "MERGED",
      "author": "chris-wood",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "This makes the choice of a 1:1 mapping clear: avoid being used as an open proxy through explicit configuration of your ACLs.\r\n\r\nCloses #77.\r\nCloses #60.\r\n\r\ncc @tfpauly ",
      "createdAt": "2022-02-14T23:16:45Z",
      "updatedAt": "2022-02-14T23:45:41Z",
      "baseRepository": "ietf-wg-ohai/oblivious-http",
      "baseRefName": "main",
      "baseRefOid": "d02d020522b07a5f77dd7d70ce0fbea4b705426e",
      "headRepository": "ietf-wg-ohai/oblivious-http",
      "headRefName": "caw/proxy-state",
      "headRefOid": "078cfc9d6df1fe258078e9d275c40b3b942a9a7f",
      "closedAt": "2022-02-14T23:45:40Z",
      "mergedAt": "2022-02-14T23:45:40Z",
      "mergedBy": "martinthomson",
      "mergeCommit": {
        "oid": "8b0b6b19342271eafa3328d21386abc2534b9189"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOE6fLGM40luoc",
          "commit": {
            "abbreviatedOid": "ef22bb6"
          },
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "Thanks for putting this together.  I've a slight recasting of the new text that I think might help.",
          "createdAt": "2022-02-14T23:32:00Z",
          "updatedAt": "2022-02-14T23:36:13Z",
          "comments": [
            {
              "originalPosition": 36,
              "body": "\"Oblivious Proxy\" isn't really a concept we use.\r\n\r\n```suggestion\r\nIt is possible for a server to be configured with multiple Oblivious\r\n```",
              "createdAt": "2022-02-14T23:32:01Z",
              "updatedAt": "2022-02-14T23:36:13Z"
            },
            {
              "originalPosition": 29,
              "body": "```suggestion\r\nThis protocol assumes a fixed, one-to-one mapping between the Oblivious Proxy Resource and \r\nthe Oblivious Request Resource. This means that any encapsulated request sent to the Oblivious\r\n```",
              "createdAt": "2022-02-14T23:32:47Z",
              "updatedAt": "2022-02-14T23:36:13Z"
            },
            {
              "originalPosition": 39,
              "body": "This isn't strictly true as https://proxy.example/forward/example.com/foo -> https://example.com/foo and https://proxy.example/forward/example.com/bar -> https://example.com/bar demonstrates that you can embed all the necessary state in the URI.  Those are different proxy resources, but there is no additional state.\r\n\r\n```suggestion\r\n```",
              "createdAt": "2022-02-14T23:34:40Z",
              "updatedAt": "2022-02-14T23:36:13Z"
            },
            {
              "originalPosition": 26,
              "body": "```suggestion\r\n## Resource Mappings {#proxy-state}\r\n```\r\n\r\nYou might also change the anchor name to \"mappings\" or something to match.",
              "createdAt": "2022-02-14T23:34:59Z",
              "updatedAt": "2022-02-14T23:36:13Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOE6fLGM40lvda",
          "commit": {
            "abbreviatedOid": "ef22bb6"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-02-14T23:37:47Z",
          "updatedAt": "2022-02-14T23:37:48Z",
          "comments": [
            {
              "originalPosition": 36,
              "body": "We use it on and off. I'll remove other references to it in the doc.",
              "createdAt": "2022-02-14T23:37:48Z",
              "updatedAt": "2022-02-14T23:37:48Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOE6fLGM40lvo-",
          "commit": {
            "abbreviatedOid": "d87933b"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-02-14T23:39:12Z",
          "updatedAt": "2022-02-14T23:39:13Z",
          "comments": [
            {
              "originalPosition": 39,
              "body": "Fair, yeah. Do we want to use this as an example configuration? ",
              "createdAt": "2022-02-14T23:39:13Z",
              "updatedAt": "2022-02-14T23:39:13Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOE6fLGM40lwO1",
          "commit": {
            "abbreviatedOid": "d87933b"
          },
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-02-14T23:43:40Z",
          "updatedAt": "2022-02-14T23:43:40Z",
          "comments": [
            {
              "originalPosition": 39,
              "body": "Probably better to use https://proxy.example/opr/a -> https://example.com/orr/foo instead or something like that.\r\n\r\nNo point telling people how to circumvent the 1:1 mapping so directly.",
              "createdAt": "2022-02-14T23:43:40Z",
              "updatedAt": "2022-02-14T23:43:40Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOE6fLGM40lwW5",
          "commit": {
            "abbreviatedOid": "d87933b"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-02-14T23:44:36Z",
          "updatedAt": "2022-02-14T23:44:36Z",
          "comments": [
            {
              "originalPosition": 39,
              "body": "Let's just omit the example for now then. We can add one later if folks think it's useful.",
              "createdAt": "2022-02-14T23:44:36Z",
              "updatedAt": "2022-02-14T23:44:36Z"
            }
          ]
        }
      ]
    },
    {
      "number": 96,
      "id": "PR_kwDOE6fLGM40U4I8",
      "title": "Allow for proxies to attach specialized client metadata",
      "url": "https://github.com/ietf-wg-ohai/oblivious-http/pull/96",
      "state": "CLOSED",
      "author": "chris-wood",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "This is a first cut at relaxing the restriction on proxy behavior here. I'm definitely open to alternate phrasings or different examples!\r\n\r\nCloses #66.",
      "createdAt": "2022-03-11T22:57:14Z",
      "updatedAt": "2022-06-15T12:57:57Z",
      "baseRepository": "ietf-wg-ohai/oblivious-http",
      "baseRefName": "main",
      "baseRefOid": "86275c2c78575edf7ba7d6a94b4229ffef2a3ddc",
      "headRepository": "ietf-wg-ohai/oblivious-http",
      "headRefName": "caw/request-metadata",
      "headRefOid": "d68a4bee43950a348db179b9df1076b9254af9be",
      "closedAt": "2022-06-15T12:57:57Z",
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [
        {
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "body": "@tfpauly @martinthomson I refactored this text somewhat given the discussion above. Please have a look.",
          "createdAt": "2022-03-14T16:35:56Z",
          "updatedAt": "2022-03-14T16:35:56Z"
        },
        {
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "body": "Let's go with #113 for this.  I've made some suggestions there.",
          "createdAt": "2022-06-15T05:51:09Z",
          "updatedAt": "2022-06-15T05:51:09Z"
        },
        {
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "body": "Closing in favor of #113.",
          "createdAt": "2022-06-15T12:57:57Z",
          "updatedAt": "2022-06-15T12:57:57Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOE6fLGM42HwRi",
          "commit": {
            "abbreviatedOid": "1d22968"
          },
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "state": "CHANGES_REQUESTED",
          "body": "",
          "createdAt": "2022-03-12T13:06:44Z",
          "updatedAt": "2022-03-12T13:13:46Z",
          "comments": [
            {
              "originalPosition": 9,
              "body": "Should we instead look to do \"MUST NOT ... except\" with a very specific carve-out?  It seems like a \"SHOULD NOT\" opens the door a little too wide.\r\n\r\nIf this is just shadow bans, then we're golden.  But there's a thin end of a wedge here.  Is it OK to do the equivalent of DNS client subnet?  What about User-Agent?",
              "createdAt": "2022-03-12T13:06:44Z",
              "updatedAt": "2022-03-12T13:13:46Z"
            },
            {
              "originalPosition": 38,
              "body": "...and there's that thin end.\r\n\r\nI know why you want this, but I think that it is a very bad idea.\r\n\r\nI can see how some clients might agree to have this information exposed, but geolocation is a privacy minefield.\r\n\r\nI would rather set the terms here in general rather than seek to describe specific (bad) exclusions our general \"no client information\" policy.  Essentially, establish that clients can, with prior agreement with a proxy, describe the sort of information that a proxy might reveal about them.",
              "createdAt": "2022-03-12T13:11:42Z",
              "updatedAt": "2022-03-12T13:13:46Z"
            },
            {
              "originalPosition": 49,
              "body": "From the perspective of a client, this text horrifies me.\r\n\r\nIt says that servers and proxies reach an agreement and then clients take it or leave it.  That's a terrible negotiating position.  I know it's probably how it will work, but it's not healthy.",
              "createdAt": "2022-03-12T13:13:43Z",
              "updatedAt": "2022-03-12T13:13:46Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOE6fLGM42IibV",
          "commit": {
            "abbreviatedOid": "1d22968"
          },
          "author": "tfpauly",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-03-14T00:26:01Z",
          "updatedAt": "2022-03-14T00:26:02Z",
          "comments": [
            {
              "originalPosition": 49,
              "body": "The approach we\u2019ve been taking is that the client is always the one to attach information in the encrypted payload to the next hop, which it may learn from the proxy, and reflect after deciding what it is OK sending. But generally it\u2019s not OK to let the proxy attach any information without the client\u2019s consent. The marker for \u201cbad client\u201d shadow bans seems to be the exception case?",
              "createdAt": "2022-03-14T00:26:01Z",
              "updatedAt": "2022-03-14T00:26:02Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOE6fLGM42IjGO",
          "commit": {
            "abbreviatedOid": "1d22968"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-03-14T00:41:07Z",
          "updatedAt": "2022-03-14T00:41:07Z",
          "comments": [
            {
              "originalPosition": 49,
              "body": "There are two types of info the proxy might attach: info that the client agrees to have attached, like geo or whatever, and info that the client does not have consent to attach. Certainly clients shouldn't use a proxy if it attaches known info they don't agree to. But they can't really do anything about the former. So maybe the best outcome is (1) here is that clients agree to known info that the proxy attaches, and (2) proxies MUST NOT attach more than a bit (or two or whatever is a reasonable upper bound) for info that the clients explicitly do not agree to?",
              "createdAt": "2022-03-14T00:41:07Z",
              "updatedAt": "2022-03-14T16:23:08Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOE6fLGM42L4ca",
          "commit": {
            "abbreviatedOid": "1d22968"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-03-14T16:36:21Z",
          "updatedAt": "2022-03-14T16:36:21Z",
          "comments": [
            {
              "originalPosition": 9,
              "body": "I reverted this to MUST NOT and carved out the exceptional case.",
              "createdAt": "2022-03-14T16:36:21Z",
              "updatedAt": "2022-03-14T16:36:22Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOE6fLGM42L498",
          "commit": {
            "abbreviatedOid": "1d22968"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-03-14T16:37:51Z",
          "updatedAt": "2022-03-14T16:37:52Z",
          "comments": [
            {
              "originalPosition": 38,
              "body": "The intent of the text was to give examples of things people might want to explicitly allow, not really to argue for the merits of any particular metadata. I'm OK removing this entirely and just saying that anything must be explicitly agreed upon, without listing examples. ",
              "createdAt": "2022-03-14T16:37:52Z",
              "updatedAt": "2022-03-14T16:37:52Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOE6fLGM42L5FQ",
          "commit": {
            "abbreviatedOid": "1d22968"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-03-14T16:38:12Z",
          "updatedAt": "2022-03-14T16:38:12Z",
          "comments": [
            {
              "originalPosition": 49,
              "body": "FWIW, I made this change.",
              "createdAt": "2022-03-14T16:38:12Z",
              "updatedAt": "2022-03-14T16:38:12Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOE6fLGM42Mb0f",
          "commit": {
            "abbreviatedOid": "7d85e69"
          },
          "author": "ShivanKaul",
          "authorAssociation": "NONE",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-03-14T18:26:48Z",
          "updatedAt": "2022-03-14T18:26:49Z",
          "comments": [
            {
              "originalPosition": 32,
              "body": "Hmm, I'm not convinced that this helps. I think if a proxy is interested in adding metadata to prevent fraud, then it would be unlikely that a single bit would suffice.",
              "createdAt": "2022-03-14T18:26:48Z",
              "updatedAt": "2022-03-14T18:27:00Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOE6fLGM42McBR",
          "commit": {
            "abbreviatedOid": "7d85e69"
          },
          "author": "ShivanKaul",
          "authorAssociation": "NONE",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-03-14T18:27:31Z",
          "updatedAt": "2022-03-14T18:27:31Z",
          "comments": [
            {
              "originalPosition": 6,
              "body": "I'm personally in favour of changing the \"MUST NOT add information about a client\" to a SHOULD NOT, and craft verbiage to outline that this is a bad idea for fingerprinting/loss of anonymity etc reasons - basically considerations that a proxy should take into account (apologies @chris-wood I know that's what you originally had in your first commit, didn't get a chance to weigh in until now)",
              "createdAt": "2022-03-14T18:27:31Z",
              "updatedAt": "2022-03-14T18:27:31Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOE6fLGM42McQG",
          "commit": {
            "abbreviatedOid": "1d22968"
          },
          "author": "ShivanKaul",
          "authorAssociation": "NONE",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-03-14T18:28:22Z",
          "updatedAt": "2022-03-14T18:28:23Z",
          "comments": [
            {
              "originalPosition": 9,
              "body": "FWIW I preferred this version of this text.",
              "createdAt": "2022-03-14T18:28:22Z",
              "updatedAt": "2022-03-14T18:28:23Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOE6fLGM42Mc8_",
          "commit": {
            "abbreviatedOid": "7d85e69"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-03-14T18:31:01Z",
          "updatedAt": "2022-03-14T18:31:02Z",
          "comments": [
            {
              "originalPosition": 32,
              "body": "I propose we separate these two issues: (1) what information is the proxy allowed to attach (or not), and (2) for information it's allowed to attach, how much? I think we can reasonably address (1) in this PR, whereas (2) requires more analysis (or a lot more language). Would that work?",
              "createdAt": "2022-03-14T18:31:01Z",
              "updatedAt": "2022-03-14T18:31:02Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOE6fLGM42Mc-o",
          "commit": {
            "abbreviatedOid": "7d85e69"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-03-14T18:31:07Z",
          "updatedAt": "2022-03-14T18:31:08Z",
          "comments": [
            {
              "originalPosition": 6,
              "body": "No worries =) ",
              "createdAt": "2022-03-14T18:31:08Z",
              "updatedAt": "2022-03-14T18:31:08Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOE6fLGM42MfTS",
          "commit": {
            "abbreviatedOid": "7d85e69"
          },
          "author": "ShivanKaul",
          "authorAssociation": "NONE",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-03-14T18:39:46Z",
          "updatedAt": "2022-03-14T18:39:47Z",
          "comments": [
            {
              "originalPosition": 32,
              "body": "I'm okay with that split, but for (1), were you thinking specific use-cases within antifraud, or saying \"proxies should not attach metadata except for antifraud reasons because of XYZ loss of anonymity considerations\", or something else?",
              "createdAt": "2022-03-14T18:39:46Z",
              "updatedAt": "2022-03-14T18:42:26Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOE6fLGM42MiMM",
          "commit": {
            "abbreviatedOid": "7d85e69"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-03-14T18:51:09Z",
          "updatedAt": "2022-03-14T18:51:09Z",
          "comments": [
            {
              "originalPosition": 32,
              "body": "I don't think we (even outside of OHAI) have consensus on what is suitable for anti-abuse purposes, so this PR is mainly trying to set up the draft to have that discussion separately. In other words, this PR is just about saying proxies MUST NOT attach data the client hasn't agreed to being revealed, except for this single bit. We can then bike shed the number of bits separately. ",
              "createdAt": "2022-03-14T18:51:09Z",
              "updatedAt": "2022-03-14T18:51:09Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOE6fLGM42Mp-6",
          "commit": {
            "abbreviatedOid": "7d85e69"
          },
          "author": "ShivanKaul",
          "authorAssociation": "NONE",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-03-14T19:21:57Z",
          "updatedAt": "2022-03-14T19:21:58Z",
          "comments": [
            {
              "originalPosition": 32,
              "body": "I think exactly because of that lack of consensus the text should be a SHOULD! I'm also okay with saying \"MUST NOT except for anti-fraud purposes\" and then leaving how many bits that needs etc to a separate discussion, but IMO \"MUST NOT... except\" sounds a lot like SHOULD.",
              "createdAt": "2022-03-14T19:21:57Z",
              "updatedAt": "2022-03-14T19:21:58Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOE6fLGM42Ms5i",
          "commit": {
            "abbreviatedOid": "7d85e69"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-03-14T19:33:32Z",
          "updatedAt": "2022-03-14T19:33:33Z",
          "comments": [
            {
              "originalPosition": 32,
              "body": "\"MUST NOT except for anti-fraud purposes\" is basically what's written there now, is it not? ",
              "createdAt": "2022-03-14T19:33:32Z",
              "updatedAt": "2022-03-14T19:33:33Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOE6fLGM42M4kH",
          "commit": {
            "abbreviatedOid": "7d85e69"
          },
          "author": "ShivanKaul",
          "authorAssociation": "NONE",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-03-14T20:20:10Z",
          "updatedAt": "2022-03-14T20:20:10Z",
          "comments": [
            {
              "originalPosition": 32,
              "body": "Okay, I'm good with that framing in this PR if we exclude discussion about bits etc. I thought you were suggesting still including that when you said\r\n>In other words, this PR is just about saying proxies MUST NOT attach data the client hasn't agreed to being revealed, except for this single bit.",
              "createdAt": "2022-03-14T20:20:10Z",
              "updatedAt": "2022-03-14T20:20:10Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOE6fLGM42M-bo",
          "commit": {
            "abbreviatedOid": "7d85e69"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-03-14T20:42:54Z",
          "updatedAt": "2022-03-14T20:42:54Z",
          "comments": [
            {
              "originalPosition": 32,
              "body": "I think we're still not aligned :-) The purpose of this PR is to allocate just a single bit for shadowban or whatever. Future PRs can relax this constraint and allow more bits, subject to more analysis or whatever's needed. I don't think we should have text that says \"proxies MAY attach TBD bits [sort out details later].\" Does that clarify?",
              "createdAt": "2022-03-14T20:42:54Z",
              "updatedAt": "2022-03-14T20:42:54Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOE6fLGM42Nb5z",
          "commit": {
            "abbreviatedOid": "7d85e69"
          },
          "author": "ShivanKaul",
          "authorAssociation": "NONE",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-03-14T23:04:12Z",
          "updatedAt": "2022-03-14T23:04:12Z",
          "comments": [
            {
              "originalPosition": 32,
              "body": "Gotcha, I'm fine with that.",
              "createdAt": "2022-03-14T23:04:12Z",
              "updatedAt": "2022-03-14T23:04:12Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOE6fLGM42lyH7",
          "commit": {
            "abbreviatedOid": "7d85e69"
          },
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "I am coming to the view that some sort of standardized shadowban signal might be useful here.  There's a lot of context and information that we're leaning on here that lacks definition.",
          "createdAt": "2022-03-21T14:53:30Z",
          "updatedAt": "2022-03-21T14:57:29Z",
          "comments": [
            {
              "originalPosition": 35,
              "body": "IP addresses aren't harmful.  Maybe just \"or from a source that has a bad reputation\".",
              "createdAt": "2022-03-21T14:53:30Z",
              "updatedAt": "2022-03-21T14:57:29Z"
            },
            {
              "originalPosition": 35,
              "body": "```suggestion\r\nor otherwise harmful IP address with a bad reputation. The proxy could attach a\r\n```",
              "createdAt": "2022-03-21T14:53:48Z",
              "updatedAt": "2022-03-21T14:57:29Z"
            },
            {
              "originalPosition": 36,
              "body": "\"shadowban\" needs a definition.",
              "createdAt": "2022-03-21T14:54:06Z",
              "updatedAt": "2022-03-21T14:57:29Z"
            },
            {
              "originalPosition": 39,
              "body": "How they might do this is not obvious.  Presumably, this is another bit of fingerprinting information.  But this text presumes that there is some process that takes this bit as input.  I don't know what this might be input to.",
              "createdAt": "2022-03-21T14:56:43Z",
              "updatedAt": "2022-03-21T14:57:29Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOE6fLGM42l8KY",
          "commit": {
            "abbreviatedOid": "7d85e69"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-03-21T15:19:02Z",
          "updatedAt": "2022-03-21T15:19:02Z",
          "comments": [
            {
              "originalPosition": 39,
              "body": "To clarify, are you suggesting that we try and describe how clients implement incorporate this bit into anti-fingerprinting mechanisms? The intent of this sentence is to say, \"assume you leak one additional bit through the proxy -- adjust your anti-fingerprinting mechanisms accordingly.\" ",
              "createdAt": "2022-03-21T15:19:02Z",
              "updatedAt": "2022-03-21T15:19:02Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOE6fLGM42l9kZ",
          "commit": {
            "abbreviatedOid": "7d85e69"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-03-21T15:21:58Z",
          "updatedAt": "2022-03-21T15:21:59Z",
          "comments": [
            {
              "originalPosition": 36,
              "body": "Done.",
              "createdAt": "2022-03-21T15:21:58Z",
              "updatedAt": "2022-03-21T15:21:59Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOE6fLGM42l_1W",
          "commit": {
            "abbreviatedOid": "7d85e69"
          },
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-03-21T15:27:17Z",
          "updatedAt": "2022-03-21T15:27:17Z",
          "comments": [
            {
              "originalPosition": 39,
              "body": "I think that this presumes a lot: that the client have anti-fingerprinting designs as a start.\r\n\r\nJust saying that clients need to be aware that the proxy might divide their population into two using this bit is probably enough.  Attaching that information to a normative requirement is where this gets too shaky for me.",
              "createdAt": "2022-03-21T15:27:17Z",
              "updatedAt": "2022-03-21T15:27:18Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOE6fLGM42mBvx",
          "commit": {
            "abbreviatedOid": "7d85e69"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-03-21T15:32:09Z",
          "updatedAt": "2022-03-21T15:32:10Z",
          "comments": [
            {
              "originalPosition": 39,
              "body": "Done (with slightly a different phrasing)!",
              "createdAt": "2022-03-21T15:32:10Z",
              "updatedAt": "2022-03-21T15:32:10Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOE6fLGM42ogwm",
          "commit": {
            "abbreviatedOid": "aba762f"
          },
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-03-22T02:31:27Z",
          "updatedAt": "2022-03-22T02:31:28Z",
          "comments": [
            {
              "originalPosition": 41,
              "body": "```suggestion\r\nthe proxy by half.\r\n```",
              "createdAt": "2022-03-22T02:31:27Z",
              "updatedAt": "2022-03-22T02:31:28Z"
            }
          ]
        }
      ]
    },
    {
      "number": 97,
      "id": "PR_kwDOE6fLGM40XKLF",
      "title": "The key identifier is not length-prefixed",
      "url": "https://github.com/ietf-wg-ohai/oblivious-http/pull/97",
      "state": "MERGED",
      "author": "martinthomson",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2022-03-13T22:18:11Z",
      "updatedAt": "2022-03-14T13:53:33Z",
      "baseRepository": "ietf-wg-ohai/oblivious-http",
      "baseRefName": "main",
      "baseRefOid": "86275c2c78575edf7ba7d6a94b4229ffef2a3ddc",
      "headRepository": "ietf-wg-ohai/oblivious-http",
      "headRefName": "not-length-prefixed",
      "headRefOid": "cb8ec2f4c995de0ae3435b7e0673688017722870",
      "closedAt": "2022-03-14T13:53:32Z",
      "mergedAt": "2022-03-14T13:53:32Z",
      "mergedBy": "chris-wood",
      "mergeCommit": {
        "oid": "0a1f719af20988c284880aae6c48953dda88bf0e"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOE6fLGM42IiGc",
          "commit": {
            "abbreviatedOid": "cb8ec2f"
          },
          "author": "tfpauly",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "Quite true. ",
          "createdAt": "2022-03-14T00:18:15Z",
          "updatedAt": "2022-03-14T00:18:15Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOE6fLGM42K5Al",
          "commit": {
            "abbreviatedOid": "cb8ec2f"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2022-03-14T13:53:25Z",
          "updatedAt": "2022-03-14T13:53:25Z",
          "comments": []
        }
      ]
    },
    {
      "number": 98,
      "id": "PR_kwDOE6fLGM40XK_g",
      "title": "Remove circle CI config",
      "url": "https://github.com/ietf-wg-ohai/oblivious-http/pull/98",
      "state": "MERGED",
      "author": "martinthomson",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2022-03-13T22:38:11Z",
      "updatedAt": "2022-03-14T14:23:12Z",
      "baseRepository": "ietf-wg-ohai/oblivious-http",
      "baseRefName": "main",
      "baseRefOid": "86275c2c78575edf7ba7d6a94b4229ffef2a3ddc",
      "headRepository": "ietf-wg-ohai/oblivious-http",
      "headRefName": "no-circle",
      "headRefOid": "bc5dd3fd9a2d5a2ff3988751b71df8afb2ccf52c",
      "closedAt": "2022-03-14T14:23:11Z",
      "mergedAt": "2022-03-14T14:23:11Z",
      "mergedBy": "chris-wood",
      "mergeCommit": {
        "oid": "3188b08ba18eb4a6dad6e1f8ec822bd0c8bb8cd9"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 99,
      "id": "PR_kwDOE6fLGM404JQL",
      "title": "Here are some hopefully helpful editorial suggestions.",
      "url": "https://github.com/ietf-wg-ohai/oblivious-http/pull/99",
      "state": "MERGED",
      "author": "ekr",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2022-03-23T12:05:24Z",
      "updatedAt": "2022-03-28T15:08:27Z",
      "baseRepository": "ietf-wg-ohai/oblivious-http",
      "baseRefName": "main",
      "baseRefOid": "3188b08ba18eb4a6dad6e1f8ec822bd0c8bb8cd9",
      "headRepository": "ekr/oblivious-http",
      "headRefName": "ekr_editorial",
      "headRefOid": "543dd35e9eb22df6f55c48360398279615cbd578",
      "closedAt": "2022-03-28T15:08:27Z",
      "mergedAt": "2022-03-28T15:08:27Z",
      "mergedBy": "chris-wood",
      "mergeCommit": {
        "oid": "6267d90f3888fe6ea78b1c084ba0862b3061458b"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOE6fLGM42wc1l",
          "commit": {
            "abbreviatedOid": "4411915"
          },
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "LGTM with suggestions (two steps forward, one step back otherwise).  @chris-wood",
          "createdAt": "2022-03-23T12:18:12Z",
          "updatedAt": "2022-03-23T12:21:32Z",
          "comments": [
            {
              "originalPosition": 35,
              "body": "```suggestion\r\nat the transport layer, which must be used in conjunction with applications\r\n```",
              "createdAt": "2022-03-23T12:18:12Z",
              "updatedAt": "2022-03-23T12:21:32Z"
            },
            {
              "originalPosition": 59,
              "body": "```suggestion\r\nfor the keys. This ensures that different\r\n```",
              "createdAt": "2022-03-23T12:18:55Z",
              "updatedAt": "2022-03-23T12:21:32Z"
            },
            {
              "originalPosition": 97,
              "body": "```suggestion\r\n{{key-config}}) that are concatenated.\r\n\r\nEvolution of the key\r\nconfiguration format is supported through the definition of new\r\nformats that are identified by new media types.\r\n```",
              "createdAt": "2022-03-23T12:20:25Z",
              "updatedAt": "2022-03-23T12:21:32Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOE6fLGM42wxk-",
          "commit": {
            "abbreviatedOid": "4411915"
          },
          "author": "ekr",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-03-23T13:14:59Z",
          "updatedAt": "2022-03-23T13:14:59Z",
          "comments": [
            {
              "originalPosition": 59,
              "body": "aargh.",
              "createdAt": "2022-03-23T13:14:59Z",
              "updatedAt": "2022-03-23T13:14:59Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOE6fLGM43CI0N",
          "commit": {
            "abbreviatedOid": "543dd35"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2022-03-28T15:08:21Z",
          "updatedAt": "2022-03-28T15:08:21Z",
          "comments": []
        }
      ]
    },
    {
      "number": 104,
      "id": "PR_kwDOE6fLGM404NAf",
      "title": "Add a section about FS",
      "url": "https://github.com/ietf-wg-ohai/oblivious-http/pull/104",
      "state": "MERGED",
      "author": "ekr",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2022-03-23T12:20:49Z",
      "updatedAt": "2022-03-24T20:58:43Z",
      "baseRepository": "ietf-wg-ohai/oblivious-http",
      "baseRefName": "main",
      "baseRefOid": "3188b08ba18eb4a6dad6e1f8ec822bd0c8bb8cd9",
      "headRepository": "ekr/oblivious-http",
      "headRefName": "pfs",
      "headRefOid": "9a436161ae0abeb0c3c12e79f2a995d37bd2e5d9",
      "closedAt": "2022-03-24T20:58:43Z",
      "mergedAt": "2022-03-24T20:58:43Z",
      "mergedBy": "chris-wood",
      "mergeCommit": {
        "oid": "84e20074ebc2517514a1ec73aaf0b458b9df43c6"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOE6fLGM422hKl",
          "commit": {
            "abbreviatedOid": "9a43616"
          },
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2022-03-24T13:24:45Z",
          "updatedAt": "2022-03-24T13:24:45Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOE6fLGM4220b6",
          "commit": {
            "abbreviatedOid": "9a43616"
          },
          "author": "tfpauly",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2022-03-24T14:16:00Z",
          "updatedAt": "2022-03-24T14:16:00Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOE6fLGM4245XY",
          "commit": {
            "abbreviatedOid": "9a43616"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2022-03-24T20:58:37Z",
          "updatedAt": "2022-03-24T20:58:37Z",
          "comments": []
        }
      ]
    },
    {
      "number": 108,
      "id": "PR_kwDOE6fLGM408ghX",
      "title": "Streaming of requests and responses",
      "url": "https://github.com/ietf-wg-ohai/oblivious-http/pull/108",
      "state": "CLOSED",
      "author": "martinthomson",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "This is my first rough at streaming.  For simple uses, the imposition is\r\nminimal: a single zero byte at the start, with no change to the way\r\nthat the content of that chunk is protected.  If there are multiple\r\nchunks, then the preceding chunks are each length-prefixed.\r\n\r\nWorking on an implementation for this.\r\n\r\nCloses #75.",
      "createdAt": "2022-03-24T11:46:40Z",
      "updatedAt": "2022-06-22T05:10:32Z",
      "baseRepository": "ietf-wg-ohai/oblivious-http",
      "baseRefName": "main",
      "baseRefOid": "3188b08ba18eb4a6dad6e1f8ec822bd0c8bb8cd9",
      "headRepository": "ietf-wg-ohai/oblivious-http",
      "headRefName": "streaming",
      "headRefOid": "af707fecf570db3ce11520aec4abd660c6123b26",
      "closedAt": "2022-06-22T05:10:32Z",
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [
        {
          "author": "tfpauly",
          "authorAssociation": "COLLABORATOR",
          "body": "Thanks for writing this up. It certainly helps clarify things.\r\n\r\nI can see that this would be useful for some use cases that relied on very large messages (I'm not aware of these use cases at the moment, but I could imagine they exist). However, fully supporting this does add complexity to the processing and state machine.\r\n\r\nI don't fully accept that the impact of this on a client or server that doesn't want to stream messages is just to add the `0` byte and reject things that don't have a `0` there. If I'm only ever talking to rev-locked servers that are entirely coordinating with me, then that could work. But that isn't really sufficient, and I think any client would need to handle parsing of streamed messages, or accept that they will receive unparseable messages.\r\n\r\nThe fundamental issue is that there's no way for the client to tell the server it doesn't support streaming. So a future version of the server (assuming I'm running an old client that doesn't upgrade often) may start one day getting streamed messages that it doesn't support, and will drop the messages. The server will think everything's OK.\r\n\r\nI'd much prefer to see this support gated by a separate content type that can be negotiated with Accept, etc. It'd be fine to still include that in this document as \"streaming mode\" which can be supported if needed.\r\n\r\nIt also allows applications that use OHTTP to more clearly have something to point to and define that they MUST support the non-streamed message type if they always expect to have atomic and relatively small messages.",
          "createdAt": "2022-03-25T16:24:10Z",
          "updatedAt": "2022-03-25T16:24:10Z"
        },
        {
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "body": "On consideration, I think that we should do as @tfpauly suggests and look at providing a different media type.  That might provide a control surface we can use to incrementally deploy new formats.  I will start a discussion about what we might need to do to enable changing formats.  It's not that simple, but the shape of the problem is very much like the one we have with key configuration (and consistency).",
          "createdAt": "2022-06-15T05:32:21Z",
          "updatedAt": "2022-06-15T05:32:21Z"
        }
      ],
      "reviews": []
    },
    {
      "number": 109,
      "id": "PR_kwDOE6fLGM40_W75",
      "title": "Generic intermediary text",
      "url": "https://github.com/ietf-wg-ohai/oblivious-http/pull/109",
      "state": "MERGED",
      "author": "martinthomson",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Let's be clearer about what it means to proxy here.  Also, since it is\r\nthe same text, talk about TLS assumptions more directly.\r\n\r\nThis will interact poorly with #96.  Sorry about that @chris-wood.\r\n\r\nCloses #106.\r\nCloses #102.",
      "createdAt": "2022-03-25T02:02:48Z",
      "updatedAt": "2022-03-28T15:21:52Z",
      "baseRepository": "ietf-wg-ohai/oblivious-http",
      "baseRefName": "main",
      "baseRefOid": "84e20074ebc2517514a1ec73aaf0b458b9df43c6",
      "headRepository": "martinthomson/oblivious-http",
      "headRefName": "not-generic-intermediary",
      "headRefOid": "a2b94fcc41eaf39ac6f362f14527a8701dea27bd",
      "closedAt": "2022-03-28T15:21:51Z",
      "mergedAt": "2022-03-28T15:21:51Z",
      "mergedBy": "chris-wood",
      "mergeCommit": {
        "oid": "6fd488caf6e4a294a9cbdc13fb908c88115db69c"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOE6fLGM425yXa",
          "commit": {
            "abbreviatedOid": "8e97f17"
          },
          "author": "tfpauly",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2022-03-25T02:36:58Z",
          "updatedAt": "2022-03-25T02:38:39Z",
          "comments": [
            {
              "originalPosition": 23,
              "body": "```suggestion\r\nexpected to include fields that might contain identifying information,\r\n```",
              "createdAt": "2022-03-25T02:36:58Z",
              "updatedAt": "2022-03-25T02:38:39Z"
            },
            {
              "originalPosition": 52,
              "body": "It'd be nice to find an alternate wording to \"interacted with\"?",
              "createdAt": "2022-03-25T02:38:32Z",
              "updatedAt": "2022-03-25T02:38:39Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOE6fLGM427dwJ",
          "commit": {
            "abbreviatedOid": "9f9902d"
          },
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-03-25T12:10:01Z",
          "updatedAt": "2022-03-25T12:10:02Z",
          "comments": [
            {
              "originalPosition": 53,
              "body": "```suggestion\r\nprotected by HTTPS.  This protects information about which resources are the\r\nsubject of request and prevents a network observer from being able to trivially\r\ncorrelate messages on either side of a proxy.\r\n```",
              "createdAt": "2022-03-25T12:10:01Z",
              "updatedAt": "2022-03-25T12:10:02Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOE6fLGM428l2W",
          "commit": {
            "abbreviatedOid": "a2b94fc"
          },
          "author": "tfpauly",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2022-03-25T16:05:06Z",
          "updatedAt": "2022-03-25T16:05:06Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOE6fLGM43CLzI",
          "commit": {
            "abbreviatedOid": "a2b94fc"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2022-03-28T15:16:22Z",
          "updatedAt": "2022-03-28T15:16:44Z",
          "comments": [
            {
              "originalPosition": 51,
              "body": "HTTPS is only required for client<>proxy communication to prevent this type of inference. Trying to clarify this might only complicate things, but this text seems to suggest that both hops need HTTPS. I don't know how I'd rewrite this any other way. \ud83e\udd37 \r\n",
              "createdAt": "2022-03-28T15:16:22Z",
              "updatedAt": "2022-03-28T15:16:44Z"
            }
          ]
        }
      ]
    },
    {
      "number": 110,
      "id": "PR_kwDOE6fLGM41H5tP",
      "title": "Use the QUIC notation for the key config",
      "url": "https://github.com/ietf-wg-ohai/oblivious-http/pull/110",
      "state": "MERGED",
      "author": "martinthomson",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Arguably, the TLS one is better, but one notation convention is better than two, so here we go.\r\n\r\nCloses #101.",
      "createdAt": "2022-03-28T03:05:02Z",
      "updatedAt": "2022-03-28T15:06:25Z",
      "baseRepository": "ietf-wg-ohai/oblivious-http",
      "baseRefName": "main",
      "baseRefOid": "c18b6ec15815efbdbd0a6525761823a43eb86c5a",
      "headRepository": "martinthomson/oblivious-http",
      "headRefName": "quic-syntax",
      "headRefOid": "4cfeb7fd9e67153d651f789e446c05c4dd85ea6a",
      "closedAt": "2022-03-28T15:06:24Z",
      "mergedAt": "2022-03-28T15:06:24Z",
      "mergedBy": "chris-wood",
      "mergeCommit": {
        "oid": "80031ccd78f3d52fbb01cd7772109a8094063297"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOE6fLGM42_VjL",
          "commit": {
            "abbreviatedOid": "4cfeb7f"
          },
          "author": "tfpauly",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2022-03-28T03:10:04Z",
          "updatedAt": "2022-03-28T03:10:04Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOE6fLGM43CIEM",
          "commit": {
            "abbreviatedOid": "4cfeb7f"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2022-03-28T15:06:19Z",
          "updatedAt": "2022-03-28T15:06:19Z",
          "comments": []
        }
      ]
    },
    {
      "number": 111,
      "id": "PR_kwDOE6fLGM41H6DR",
      "title": "Move the conventions down a little bit",
      "url": "https://github.com/ietf-wg-ohai/oblivious-http/pull/111",
      "state": "MERGED",
      "author": "martinthomson",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Is this what you had in mind @ekr?\r\n\r\nCloses #103.",
      "createdAt": "2022-03-28T03:07:13Z",
      "updatedAt": "2022-06-22T05:10:40Z",
      "baseRepository": "ietf-wg-ohai/oblivious-http",
      "baseRefName": "main",
      "baseRefOid": "111e0389c8b9c4f18468085b583ea5ea796fe3b5",
      "headRepository": "martinthomson/oblivious-http",
      "headRefName": "move-diagram",
      "headRefOid": "2ff9839050c9717a1aa1ca5d72b461e01d19a397",
      "closedAt": "2022-06-15T13:00:20Z",
      "mergedAt": "2022-06-15T13:00:20Z",
      "mergedBy": "chris-wood",
      "mergeCommit": {
        "oid": "be60fa1bc87210b9e27fb9f7580f47d34414be09"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOE6fLGM47pXk-",
          "commit": {
            "abbreviatedOid": "0544e96"
          },
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-06-09T04:20:48Z",
          "updatedAt": "2022-06-09T04:20:52Z",
          "comments": [
            {
              "originalPosition": 54,
              "body": "```suggestion\r\n{::boilerplate bcp14-tagged}\r\n```",
              "createdAt": "2022-06-09T04:20:48Z",
              "updatedAt": "2022-06-09T04:20:52Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOE6fLGM48DJhV",
          "commit": {
            "abbreviatedOid": "2ff9839"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2022-06-15T13:00:08Z",
          "updatedAt": "2022-06-15T13:00:08Z",
          "comments": []
        }
      ]
    },
    {
      "number": 112,
      "id": "PR_kwDOE6fLGM41H7WM",
      "title": "Point in the direction of arbitrary forwarding",
      "url": "https://github.com/ietf-wg-ohai/oblivious-http/pull/112",
      "state": "MERGED",
      "author": "martinthomson",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Truly, the most interesting forwarding is what occurs at the Oblivious\r\nRequest Resource, but this is a point of inflexibility that some people\r\nstruggle with.  No point in hiding how we might intend for a generic\r\nproxy to operate.  The alternatives people invent are likely to be\r\nworse if we don't at least point in the rough direction of a good\r\nsolution.\r\n\r\nCloses #105.",
      "createdAt": "2022-03-28T03:15:47Z",
      "updatedAt": "2022-03-28T15:07:15Z",
      "baseRepository": "ietf-wg-ohai/oblivious-http",
      "baseRefName": "main",
      "baseRefOid": "c18b6ec15815efbdbd0a6525761823a43eb86c5a",
      "headRepository": "martinthomson/oblivious-http",
      "headRefName": "less-inflexible",
      "headRefOid": "dcc458a5bd6b1d26e9abf68f0d08f808dce9c903",
      "closedAt": "2022-03-28T15:07:15Z",
      "mergedAt": "2022-03-28T15:07:15Z",
      "mergedBy": "chris-wood",
      "mergeCommit": {
        "oid": "93c2b898b4e7a98296a1d2316ba6d66bcc2afd07"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOE6fLGM42_WrB",
          "commit": {
            "abbreviatedOid": "dcc458a"
          },
          "author": "tfpauly",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "Yes, I think this explanation does a lot to clarify the possible approaches.",
          "createdAt": "2022-03-28T03:22:58Z",
          "updatedAt": "2022-03-28T03:22:58Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOE6fLGM43CIX2",
          "commit": {
            "abbreviatedOid": "dcc458a"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2022-03-28T15:07:10Z",
          "updatedAt": "2022-03-28T15:07:10Z",
          "comments": []
        }
      ]
    },
    {
      "number": 113,
      "id": "PR_kwDOE6fLGM41KkfM",
      "title": "Make clear that proxy metadata must be known to the client",
      "url": "https://github.com/ietf-wg-ohai/oblivious-http/pull/113",
      "state": "MERGED",
      "author": "chris-wood",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Split out from #96, since the shadowban bit needs more consideration in relation to target->proxy signals like rate limits.\r\n\r\nCloses #100.\r\n\r\ncc @ekr ",
      "createdAt": "2022-03-28T15:33:47Z",
      "updatedAt": "2022-06-17T02:01:36Z",
      "baseRepository": "ietf-wg-ohai/oblivious-http",
      "baseRefName": "main",
      "baseRefOid": "be60fa1bc87210b9e27fb9f7580f47d34414be09",
      "headRepository": "ietf-wg-ohai/oblivious-http",
      "headRefName": "caw/metadata-agreement",
      "headRefOid": "877cb8dc8e1947a867bdbf742a61d802d1243e21",
      "closedAt": "2022-06-17T02:01:35Z",
      "mergedAt": "2022-06-17T02:01:35Z",
      "mergedBy": "martinthomson",
      "mergeCommit": {
        "oid": "368c5761decd158115f84f0dc61178f55d039f02"
      },
      "comments": [
        {
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "body": "> Do we need to be clearer about the client knowing the type of information that is added, though it might be ignorant of the specific value the proxy chooses?\r\n\r\nWe could list examples, but it would be a non-exhaustive list that might end up harming more than helping, so I'm inclined to omit that for now.",
          "createdAt": "2022-03-28T21:54:10Z",
          "updatedAt": "2022-03-28T21:54:10Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOE6fLGM43D_HH",
          "commit": {
            "abbreviatedOid": "7cf6633"
          },
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "Do we need to be clearer about the client knowing the *type* of information that is added, though it might be ignorant of the specific *value* the proxy chooses?",
          "createdAt": "2022-03-28T21:50:15Z",
          "updatedAt": "2022-03-28T21:50:15Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOE6fLGM43EB-w",
          "commit": {
            "abbreviatedOid": "7cf6633"
          },
          "author": "tfpauly",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2022-03-28T22:04:26Z",
          "updatedAt": "2022-03-28T22:04:26Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOE6fLGM48A8eB",
          "commit": {
            "abbreviatedOid": "7cf6633"
          },
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "I have some small suggestions here.  I think that we need to sharpen the distinction between knowledge of the *type* of information that might be added and the specific *value* that is added.\r\n\r\nA small nit about the halving thing made me think a little...",
          "createdAt": "2022-06-15T05:22:34Z",
          "updatedAt": "2022-06-15T05:50:27Z",
          "comments": [
            {
              "originalPosition": 19,
              "body": "```suggestion\r\n\r\nA proxy MAY add information to requests if the client is aware of the nature of\r\nthe information that could be added.  The client does not need to be aware of\r\nthe exact value added for each request, but needs to know the range of possible\r\nvalues the proxy might use.  Clients need to be aware any information added by\r\nthe proxy can reduce the size of the anonymity set of clients at a server.\r\n```\r\n\r\nAside from the extra text, I wanted to add a small note about the last change I'm proposing.\r\n\r\nThough \"one bit of information\" has a very specific information theoretic meaning that distinctly means that the anonymity set is halved, that specific meaning is likely lost on people reading this.  A reader might easily conclude that it is OK to add a one-bit field on the basis that users won't suffer anything worse than a halving of the anonymity set.  However, the extent to which that is true depends on how that bit is allocated.\r\n\r\nTo take an extreme example, imagine a one bit field called \"Is-Chris-Wood\" that is set to 0 for everyone except @chris-wood.  In that case - despite the net information gain for the server being very small - the net information loss for Chris is massive.  That's an outcome that is clearly unacceptable.\r\n\r\nI almost want to suggest that the proxy use differential privacy and add noise to protect individuals from the possibility of targeting.  I stopped short of that though on the basis that we don't really need to litigate the details here: knowledge of the nature of the information that is added should be enough.\r\n\r\nAnother thing that might arise is the potential for optional decoration being omitted.  Let's say that you have a Spam-Score[^1] flag that carries a limited number of discrete values (integers 0 to 10, say).  Users are aware that they are being rated, so that is broadly OK.  If the proxy doesn't attach any score to a request, does that signify something that singles out that client?  Again, I think that this is implicit, but I worry that it isn't.\r\n\r\n[^1]: Your perspective on this might look very different if you call this Social-Score...",
              "createdAt": "2022-06-15T05:22:34Z",
              "updatedAt": "2022-06-15T05:50:27Z"
            },
            {
              "originalPosition": 13,
              "body": "```suggestion\r\n{{?FORWARDED=RFC7239}}.  A proxy MUST NOT add information when forwarding\r\nrequests that might be used to identify clients, with the exception of\r\ninformation that a client is aware of.\r\n```",
              "createdAt": "2022-06-15T05:26:55Z",
              "updatedAt": "2022-06-15T05:50:27Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOE6fLGM48DIl9",
          "commit": {
            "abbreviatedOid": "b6fc1a8"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-06-15T12:57:38Z",
          "updatedAt": "2022-06-15T12:57:38Z",
          "comments": [
            {
              "originalPosition": 19,
              "body": "> Another thing that might arise is the potential for optional decoration being omitted. Let's say that you have a Spam-Score1 flag that carries a limited number of discrete values (integers 0 to 10, say). Users are aware that they are being rated, so that is broadly OK. If the proxy doesn't attach any score to a request, does that signify something that singles out that client? Again, I think that this is implicit, but I worry that it isn't.\r\n\r\nIndeed, this is somewhat related to #114, and is likely worth a larger discussion about the interaction of signals from proxy to target and vice versa.",
              "createdAt": "2022-06-15T12:57:38Z",
              "updatedAt": "2022-06-15T12:57:38Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOE6fLGM48Enc1",
          "commit": {
            "abbreviatedOid": "77c7159"
          },
          "author": "ShivanKaul",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-06-15T17:00:30Z",
          "updatedAt": "2022-06-15T17:00:31Z",
          "comments": [
            {
              "originalPosition": 23,
              "body": "nit: Clients to be aware that*",
              "createdAt": "2022-06-15T17:00:31Z",
              "updatedAt": "2022-06-15T17:00:31Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOE6fLGM48En0e",
          "commit": {
            "abbreviatedOid": "77c7159"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-06-15T17:01:47Z",
          "updatedAt": "2022-06-15T17:01:48Z",
          "comments": [
            {
              "originalPosition": 23,
              "body": "```suggestion\r\nvalues the proxy might use.  Clients need to be aware that any information added by\r\n```",
              "createdAt": "2022-06-15T17:01:47Z",
              "updatedAt": "2022-06-15T17:01:48Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOE6fLGM48Eom6",
          "commit": {
            "abbreviatedOid": "77c7159"
          },
          "author": "ShivanKaul",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-06-15T17:04:31Z",
          "updatedAt": "2022-06-15T17:04:32Z",
          "comments": [
            {
              "originalPosition": 5,
              "body": "For clarity I think this should also say something like \"that the client is not aware of\" before the semicolon, or turn the MUST into a SHOULD with further clarification further down. Else it's a bit confusing to say \"You must never do this; read X for more details\" and then X says \"Here's a case where you can do it\".",
              "createdAt": "2022-06-15T17:04:32Z",
              "updatedAt": "2022-06-15T17:04:32Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOE6fLGM48GdC1",
          "commit": {
            "abbreviatedOid": "a52feaf"
          },
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "WFM",
          "createdAt": "2022-06-15T23:44:55Z",
          "updatedAt": "2022-06-15T23:46:04Z",
          "comments": [
            {
              "originalPosition": 5,
              "body": "I agree.\r\n\r\n```suggestion\r\nMUST NOT add information to the request without the client being aware of\r\nthe type of information that might be added; see\r\n```",
              "createdAt": "2022-06-15T23:44:55Z",
              "updatedAt": "2022-06-15T23:46:04Z"
            },
            {
              "originalPosition": 23,
              "body": "```suggestion\r\nvalues the proxy might use.  It is important to note that information added by\r\n```",
              "createdAt": "2022-06-15T23:45:42Z",
              "updatedAt": "2022-06-15T23:46:04Z"
            }
          ]
        }
      ]
    },
    {
      "number": 117,
      "id": "PR_kwDOE6fLGM42x3pR",
      "title": "Client != HTTP client",
      "url": "https://github.com/ietf-wg-ohai/oblivious-http/pull/117",
      "state": "MERGED",
      "author": "martinthomson",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "It would be wrong to use \"user agent\" as this could be used for an HTTP\r\nrequest made by any client toward any server (using the HTTP\r\ndefinitions).\r\n\r\nCloses #116.",
      "createdAt": "2022-04-26T07:28:49Z",
      "updatedAt": "2022-04-27T23:24:23Z",
      "baseRepository": "ietf-wg-ohai/oblivious-http",
      "baseRefName": "main",
      "baseRefOid": "6fd488caf6e4a294a9cbdc13fb908c88115db69c",
      "headRepository": "martinthomson/oblivious-http",
      "headRefName": "http-client",
      "headRefOid": "2fc50041cb6d552e654f9d2cef79c7f4159e3838",
      "closedAt": "2022-04-27T23:24:23Z",
      "mergedAt": "2022-04-27T23:24:23Z",
      "mergedBy": "chris-wood",
      "mergeCommit": {
        "oid": "111e0389c8b9c4f18468085b583ea5ea796fe3b5"
      },
      "comments": [
        {
          "author": "ioggstream",
          "authorAssociation": "NONE",
          "body": "Why don't use \"Oblivious Client\" and the \"OC\" acronym, like OAuth does with \"Authorization Server\"? This would preserve the natural \"client\" meaning, and could make the document more readable.\r\nThe same acronym trick could ease readability wrt \"Oblivious Request Resource\" and \"Oblivious  Target Resource\"... ",
          "createdAt": "2022-04-26T20:52:58Z",
          "updatedAt": "2022-04-26T20:52:58Z"
        },
        {
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "body": "I know that people like acronyms, but it doesn't really solve this problem.  The oblivious HTTP client really is an HTTP client in the sense that HTTP knows; calling it anything else would be more confusing, I think.\r\n\r\nAs it seems like this is a case where more words would help.  I've added more words.",
          "createdAt": "2022-04-27T00:50:38Z",
          "updatedAt": "2022-04-27T00:50:38Z"
        },
        {
          "author": "ioggstream",
          "authorAssociation": "NONE",
          "body": "Since there are so many occurrencies of `client` I think that's ok :)\r\nProbably in the Introduction, \"client\" means \"HTTP client\", but anyway the difference is clear to me now :D",
          "createdAt": "2022-04-27T14:20:31Z",
          "updatedAt": "2022-04-27T14:20:31Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOE6fLGM447A-d",
          "commit": {
            "abbreviatedOid": "2fc5004"
          },
          "author": "ioggstream",
          "authorAssociation": "NONE",
          "state": "APPROVED",
          "body": "LGTM",
          "createdAt": "2022-04-27T14:20:45Z",
          "updatedAt": "2022-04-27T14:20:45Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOE6fLGM447Rip",
          "commit": {
            "abbreviatedOid": "2fc5004"
          },
          "author": "tfpauly",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2022-04-27T15:00:32Z",
          "updatedAt": "2022-04-27T15:00:32Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOE6fLGM449cus",
          "commit": {
            "abbreviatedOid": "2fc5004"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2022-04-27T23:24:14Z",
          "updatedAt": "2022-04-27T23:24:14Z",
          "comments": []
        }
      ]
    },
    {
      "number": 119,
      "id": "PR_kwDOE6fLGM45tWRV",
      "title": "Use Proxy-Authorization as an example header from Client to Proxy",
      "url": "https://github.com/ietf-wg-ohai/oblivious-http/pull/119",
      "state": "MERGED",
      "author": "chris-wood",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "cc @LPardue\r\n\r\nCloses #118",
      "createdAt": "2022-06-15T13:34:37Z",
      "updatedAt": "2022-06-17T12:02:58Z",
      "baseRepository": "ietf-wg-ohai/oblivious-http",
      "baseRefName": "main",
      "baseRefOid": "be60fa1bc87210b9e27fb9f7580f47d34414be09",
      "headRepository": "ietf-wg-ohai/oblivious-http",
      "headRefName": "caw/proxy-authorization",
      "headRefOid": "0e69751e25333f64167a78d6428556f9a49d05d5",
      "closedAt": "2022-06-17T12:02:57Z",
      "mergedAt": "2022-06-17T12:02:57Z",
      "mergedBy": "chris-wood",
      "mergeCommit": {
        "oid": "280b1a33f3891cf0e60bda437b4489cf1086df09"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOE6fLGM48Gl3A",
          "commit": {
            "abbreviatedOid": "a9a1308"
          },
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "A reasonable tweak, but you uncovered a bug :(",
          "createdAt": "2022-06-16T00:47:23Z",
          "updatedAt": "2022-06-16T00:47:48Z",
          "comments": [
            {
              "originalPosition": 7,
              "body": "Hmm, Alt-Used was good in that it didn't really convey much information.  But when you go to Proxy-Authorization (which I agree is better), you need to make a stronger claim.  It's one we should have had before anyway.\r\n\r\nThat is, the information needs to be stuff the client wants the proxy to know AND stuff that the client knows/trusts the proxy will remove.  Because we are framing this as \"forwarding\", we need to be more explicit about that bit.",
              "createdAt": "2022-06-16T00:47:24Z",
              "updatedAt": "2022-06-16T00:47:48Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOE6fLGM48Gqdm",
          "commit": {
            "abbreviatedOid": "a9a1308"
          },
          "author": "LPardue",
          "authorAssociation": "NONE",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-06-16T01:07:24Z",
          "updatedAt": "2022-06-16T01:07:24Z",
          "comments": [
            {
              "originalPosition": 7,
              "body": "Possibly OT but to be really pedantic, doesn't \"content-type\" reveal information about the content? Is content-length allowed? \r\n\r\nCan we be clearer what information is deemed  revealing? Perhaps the intention is to not reveal information that is strictly part of the encapsulated request, rather than metadata about the encapsulated request.",
              "createdAt": "2022-06-16T01:07:24Z",
              "updatedAt": "2022-06-16T01:07:24Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOE6fLGM48ISJW",
          "commit": {
            "abbreviatedOid": "a9a1308"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-06-16T10:01:28Z",
          "updatedAt": "2022-06-16T10:01:28Z",
          "comments": [
            {
              "originalPosition": 7,
              "body": "> Possibly OT but to be really pedantic, doesn't \"content-type\" reveal information about the content? Is content-length allowed?\r\n\r\nThe content-type header in the message to the proxy would be \"message/ohttp-req\", which doesn't reveal anything.\r\n\r\n> Can we be clearer what information is deemed revealing? Perhaps the intention is to not reveal information that is strictly part of the encapsulated request, rather than metadata about the encapsulated request.\r\n\r\nI think it's neither. To me, \"revealing\" in this context means information that is not independent of the encapsulated request. ",
              "createdAt": "2022-06-16T10:01:28Z",
              "updatedAt": "2022-06-16T10:01:28Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOE6fLGM48IT0m",
          "commit": {
            "abbreviatedOid": "a9a1308"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-06-16T10:07:19Z",
          "updatedAt": "2022-06-16T10:07:19Z",
          "comments": [
            {
              "originalPosition": 7,
              "body": "> That is, the information needs to be stuff the client wants the proxy to know AND stuff that the client knows/trusts the proxy will remove. Because we are framing this as \"forwarding\", we need to be more explicit about that bit.\r\n\r\nGood catch -- I clarified this in the latest version.",
              "createdAt": "2022-06-16T10:07:19Z",
              "updatedAt": "2022-06-16T10:07:19Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOE6fLGM48I31y",
          "commit": {
            "abbreviatedOid": "a9a1308"
          },
          "author": "LPardue",
          "authorAssociation": "NONE",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-06-16T12:24:53Z",
          "updatedAt": "2022-06-16T12:24:54Z",
          "comments": [
            {
              "originalPosition": 7,
              "body": "I'm being pedantic based on the HTTP definition of content https://www.rfc-editor.org/rfc/rfc9110.html#section-6.4\r\n\r\nI'd expect most fields in the request to the proxy would be metadata about the encapsulating request. For instance, letting the proxy know the content-length helps it know when a POST request is complete. That doesn't seem independent of the content, is it allowed?\r\n\r\nWhat information is not independent of the content? The stuff inside the encapsulating request? Why would a client ever extract that to send to the proxy?",
              "createdAt": "2022-06-16T12:24:54Z",
              "updatedAt": "2022-06-16T12:24:54Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOE6fLGM48I5Ji",
          "commit": {
            "abbreviatedOid": "a9a1308"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-06-16T12:29:24Z",
          "updatedAt": "2022-06-16T12:29:24Z",
          "comments": [
            {
              "originalPosition": 7,
              "body": "Content-Length is exceptional here. The [general principle](https://en.wikipedia.org/wiki/Semantic_security) is this: the information attached must not leak anything about the plaintext request beyond its length. ",
              "createdAt": "2022-06-16T12:29:24Z",
              "updatedAt": "2022-06-16T12:29:25Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOE6fLGM48I_nV",
          "commit": {
            "abbreviatedOid": "a9a1308"
          },
          "author": "LPardue",
          "authorAssociation": "NONE",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-06-16T12:50:50Z",
          "updatedAt": "2022-06-16T12:50:50Z",
          "comments": [
            {
              "originalPosition": 7,
              "body": "Understood thanks. But I'm still confused, sorry. Would something like Content-Digest fall into the same bracket as Content-Length? The calculation of the Digest would be trivial for the proxy to do if it can opaquely read the bytes of the encapsulating request. Which makes me wonder, is the requirement really about avoiding the addition of headers that are not available to the proxy unless there is introspection of the encapsulated request? \r\n\r\nLike I said above, HTTP doesn't typically use HTTP to expose information from within the message content. If there are registered headers that by definition would violate the principle you linked, could we include them as an illustration? ",
              "createdAt": "2022-06-16T12:50:50Z",
              "updatedAt": "2022-06-16T12:50:51Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOE6fLGM48JGbk",
          "commit": {
            "abbreviatedOid": "a9a1308"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-06-16T13:11:52Z",
          "updatedAt": "2022-06-16T13:11:52Z",
          "comments": [
            {
              "originalPosition": 7,
              "body": "> Understood thanks. But I'm still confused, sorry. Would something like Content-Digest fall into the same bracket as Content-Length? The calculation of the Digest would be trivial for the proxy to do if it can opaquely read the bytes of the encapsulating request. \r\n\r\nNo, since Content-Digest is computed over the encapsulated request, not the plaintext request.\r\n\r\n> Which makes me wonder, is the requirement really about avoiding the addition of headers that are not available to the proxy unless there is introspection of the encapsulated request?\r\n\r\nI think it's more that the headers shouldn't reveal anything to the proxy that the proxy couldn't learn on its own through introspection of the request, which is why Content-Length is exceptional. \r\n\r\nOne could probably argue that independence is not sufficient here, since there are headers one might put on the inner request (like Sec-CH-Mobile or any other Client Hint) that doesn't belong in the outer request, but it doesn't make any sense for clients to reveal these to the proxy. In any case, I'm happy if folks want to offer up alternative phrasings here. ",
              "createdAt": "2022-06-16T13:11:52Z",
              "updatedAt": "2022-06-16T13:18:21Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOE6fLGM48JaZS",
          "commit": {
            "abbreviatedOid": "362563a"
          },
          "author": "LPardue",
          "authorAssociation": "NONE",
          "state": "APPROVED",
          "body": "Spoke with Chris offline, the latest tweaks to the text address my comments about independence of inner and outer requests in relation to header fields. Thanks!",
          "createdAt": "2022-06-16T14:07:00Z",
          "updatedAt": "2022-06-16T14:07:00Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOE6fLGM48Mgnd",
          "commit": {
            "abbreviatedOid": "362563a"
          },
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2022-06-17T02:11:05Z",
          "updatedAt": "2022-06-17T02:11:09Z",
          "comments": [
            {
              "originalPosition": 14,
              "body": "```suggestion\r\n```\r\n\r\nI realize that this statement is true, but it is also distracting.  Content-Length is not as much a field as a framing mechanism in HTTP.  It has to match the length of the content. So while it isn't independent of the content, it can't be, nor does it convey new information about the content, except to the extent that it is used for framing and is therefore necessary for the protocol to function at all.",
              "createdAt": "2022-06-17T02:11:06Z",
              "updatedAt": "2022-06-17T02:11:09Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOE6fLGM48Mno7",
          "commit": {
            "abbreviatedOid": "362563a"
          },
          "author": "LPardue",
          "authorAssociation": "NONE",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-06-17T02:48:07Z",
          "updatedAt": "2022-06-17T02:48:07Z",
          "comments": [
            {
              "originalPosition": 14,
              "body": "Agree",
              "createdAt": "2022-06-17T02:48:07Z",
              "updatedAt": "2022-06-17T02:48:07Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOE6fLGM48OZAH",
          "commit": {
            "abbreviatedOid": "362563a"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-06-17T12:02:53Z",
          "updatedAt": "2022-06-17T12:02:54Z",
          "comments": [
            {
              "originalPosition": 14,
              "body": "I don't quite agree, but less text is better.",
              "createdAt": "2022-06-17T12:02:53Z",
              "updatedAt": "2022-06-17T12:02:54Z"
            }
          ]
        }
      ]
    },
    {
      "number": 120,
      "id": "PR_kwDOE6fLGM45tZ7v",
      "title": "Clarify URIs in the appendix example",
      "url": "https://github.com/ietf-wg-ohai/oblivious-http/pull/120",
      "state": "MERGED",
      "author": "chris-wood",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "cc @bemasc, @tfpauly\r\n\r\nCloses #115",
      "createdAt": "2022-06-15T13:46:12Z",
      "updatedAt": "2022-06-16T00:49:33Z",
      "baseRepository": "ietf-wg-ohai/oblivious-http",
      "baseRefName": "main",
      "baseRefOid": "be60fa1bc87210b9e27fb9f7580f47d34414be09",
      "headRepository": "ietf-wg-ohai/oblivious-http",
      "headRefName": "caw/clarify-example-mapping",
      "headRefOid": "7d6d4dc24416eecd23ae03a0f6ff37801a1e72d3",
      "closedAt": "2022-06-16T00:49:32Z",
      "mergedAt": "2022-06-16T00:49:32Z",
      "mergedBy": "martinthomson",
      "mergeCommit": {
        "oid": "69b433f73ece9306066b751ef4a445a56fd2517f"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOE6fLGM48Ddws",
          "commit": {
            "abbreviatedOid": "bfe3440"
          },
          "author": "bemasc",
          "authorAssociation": "NONE",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2022-06-15T13:49:17Z",
          "updatedAt": "2022-06-15T13:49:17Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOE6fLGM48DhBQ",
          "commit": {
            "abbreviatedOid": "bfe3440"
          },
          "author": "tfpauly",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2022-06-15T13:56:35Z",
          "updatedAt": "2022-06-15T13:56:35Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOE6fLGM48DjRb",
          "commit": {
            "abbreviatedOid": "bfe3440"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-06-15T14:01:40Z",
          "updatedAt": "2022-06-15T14:01:40Z",
          "comments": [
            {
              "originalPosition": 9,
              "body": "```suggestion\r\nis configured to map requests to this URI to the oblivious request URI\r\n```",
              "createdAt": "2022-06-15T14:01:40Z",
              "updatedAt": "2022-06-15T14:01:40Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOE6fLGM48GmDy",
          "commit": {
            "abbreviatedOid": "7d6d4dc"
          },
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2022-06-16T00:49:23Z",
          "updatedAt": "2022-06-16T00:49:23Z",
          "comments": []
        }
      ]
    },
    {
      "number": 123,
      "id": "PR_kwDOE6fLGM451DLN",
      "title": "Update HTTP reference",
      "url": "https://github.com/ietf-wg-ohai/oblivious-http/pull/123",
      "state": "MERGED",
      "author": "martinthomson",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2022-06-17T04:33:58Z",
      "updatedAt": "2022-06-17T12:01:08Z",
      "baseRepository": "ietf-wg-ohai/oblivious-http",
      "baseRefName": "main",
      "baseRefOid": "368c5761decd158115f84f0dc61178f55d039f02",
      "headRepository": "martinthomson/oblivious-http",
      "headRefName": "http-rfc",
      "headRefOid": "03e75ae48a148760244234378d54fac5f8e1de15",
      "closedAt": "2022-06-17T12:01:08Z",
      "mergedAt": "2022-06-17T12:01:08Z",
      "mergedBy": "chris-wood",
      "mergeCommit": {
        "oid": "2d42ca3ce0a1e36c2b038ed8e49c42604dad1d1a"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOE6fLGM48OYj5",
          "commit": {
            "abbreviatedOid": "03e75ae"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2022-06-17T12:01:02Z",
          "updatedAt": "2022-06-17T12:01:02Z",
          "comments": []
        }
      ]
    },
    {
      "number": 125,
      "id": "PR_kwDOE6fLGM46TgSa",
      "title": "New example",
      "url": "https://github.com/ietf-wg-ohai/oblivious-http/pull/125",
      "state": "MERGED",
      "author": "martinthomson",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Closes #124.",
      "createdAt": "2022-06-24T10:44:33Z",
      "updatedAt": "2022-06-27T03:02:34Z",
      "baseRepository": "ietf-wg-ohai/oblivious-http",
      "baseRefName": "main",
      "baseRefOid": "280b1a33f3891cf0e60bda437b4489cf1086df09",
      "headRepository": "martinthomson/oblivious-http",
      "headRefName": "new-example",
      "headRefOid": "422860627dccbd4aab6483416e340680ae5b339f",
      "closedAt": "2022-06-27T03:02:29Z",
      "mergedAt": "2022-06-27T03:02:28Z",
      "mergedBy": "martinthomson",
      "mergeCommit": {
        "oid": "17978ac4e4eaa34d6061a2b53f459d15ef435746"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOE6fLGM48siSG",
          "commit": {
            "abbreviatedOid": "0b5a71e"
          },
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-06-24T10:45:06Z",
          "updatedAt": "2022-06-24T10:45:07Z",
          "comments": [
            {
              "originalPosition": 107,
              "body": "```suggestion\r\ncce12ceb52ef5e0cb3c320f9dc1fb4bf199174868a0b2eecc13205c2ce40c5d5\r\n7fd9ff\r\n```",
              "createdAt": "2022-06-24T10:45:07Z",
              "updatedAt": "2022-06-24T10:45:07Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOE6fLGM48sjR6",
          "commit": {
            "abbreviatedOid": "4228606"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2022-06-24T10:49:31Z",
          "updatedAt": "2022-06-24T10:49:35Z",
          "comments": [
            {
              "originalPosition": 5,
              "body": "This unfortunately makes reproducing the test vectors painful :-( But these presumably shouldn't change much more.",
              "createdAt": "2022-06-24T10:49:31Z",
              "updatedAt": "2022-06-24T10:49:35Z"
            }
          ]
        }
      ]
    },
    {
      "number": 127,
      "id": "PR_kwDOE6fLGM46arZ0",
      "title": "Update terminology to align with functionality",
      "url": "https://github.com/ietf-wg-ohai/oblivious-http/pull/127",
      "state": "MERGED",
      "author": "chris-wood",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Closes #121.\r\n\r\n",
      "createdAt": "2022-06-27T13:30:33Z",
      "updatedAt": "2022-07-05T12:03:42Z",
      "baseRepository": "ietf-wg-ohai/oblivious-http",
      "baseRefName": "main",
      "baseRefOid": "17978ac4e4eaa34d6061a2b53f459d15ef435746",
      "headRepository": "ietf-wg-ohai/oblivious-http",
      "headRefName": "caw/new-terminology",
      "headRefOid": "f16bb3be3a7407abd9a61b39def7b3ee8c4ed3d7",
      "closedAt": "2022-07-05T12:03:41Z",
      "mergedAt": "2022-07-05T12:03:41Z",
      "mergedBy": "chris-wood",
      "mergeCommit": {
        "oid": "c2cc26f3d547bd78ea18e0aa7ff7cafa3fc06675"
      },
      "comments": [
        {
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "body": "Per @LPardue's suggestion, I also clarified the _contents_ of the proxy and encapsulated request in the diagram. That revealed an inconsistency throughout the draft, where we sometimes refer to the encrypted binary HTTP message as the \"encapsulated request,\" but this change redefines the encapsulated request to be the request from proxy to encap resource that _contains_ the encrypted binary HTTP message.\r\n\r\nIn any case, I went through and changed all uses of \"encapsulated request/response\" to be \"encrypted request/response\" where it felt appropriate. This is encryption, after all, so it seems more clear to just call it that. (Encapsulation in the context HPKE means something different, and is generally not the functionality that it provides to users.)\r\n\r\n@LPardue, @tfpauly: please have another look!",
          "createdAt": "2022-06-27T18:52:06Z",
          "updatedAt": "2022-06-27T18:52:19Z"
        },
        {
          "author": "LPardue",
          "authorAssociation": "CONTRIBUTOR",
          "body": "LGTM",
          "createdAt": "2022-06-27T22:24:38Z",
          "updatedAt": "2022-06-27T22:24:38Z"
        },
        {
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "body": "After chatting with @martinthomson offline, here's a proposal we came up with. First, redefine the entities to Client, Oblivious Relay, Oblivious Gateway, and Target. Based on these, we think the following names make sense:\r\n\r\n- Client -> Oblivious Relay: Oblivious Relay Request, carrying an Encrypted Request\r\n- Oblivious Relay -> Oblivious Gateway: Oblivious Gateway Request, carrying the same Encrypted Request\r\n- Oblivious Gateway -> Target: Request\r\n\r\nI'll take this to the list for the bike shed.",
          "createdAt": "2022-06-29T01:19:02Z",
          "updatedAt": "2022-06-29T01:23:36Z"
        },
        {
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "body": "OK, new terminology updates applied. I reverted the encryption/encapsulation change to keep this PR focused on the new terms. I also tried to use consistency capitalization when referring to these types throughout the doc.\r\n\r\n@martinthomson, @tfpauly, @LPardue: please review!",
          "createdAt": "2022-06-30T11:50:32Z",
          "updatedAt": "2022-06-30T11:50:32Z"
        },
        {
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "body": "I'm going to merge this to avoid dragging this PR out. If there's anything left to fix, let's do it on top of the changes in `main`.",
          "createdAt": "2022-07-05T12:03:37Z",
          "updatedAt": "2022-07-05T12:03:37Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOE6fLGM481CJ1",
          "commit": {
            "abbreviatedOid": "1873db5"
          },
          "author": "tfpauly",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2022-06-27T17:26:16Z",
          "updatedAt": "2022-06-27T17:26:16Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOE6fLGM481Xe8",
          "commit": {
            "abbreviatedOid": "1873db5"
          },
          "author": "LPardue",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-06-27T18:37:00Z",
          "updatedAt": "2022-06-27T18:37:00Z",
          "comments": [
            {
              "originalPosition": 304,
              "body": "tangent(?): why are these instances capitalized and others aren't?",
              "createdAt": "2022-06-27T18:37:00Z",
              "updatedAt": "2022-06-27T18:37:00Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOE6fLGM481Xmx",
          "commit": {
            "abbreviatedOid": "1873db5"
          },
          "author": "LPardue",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "This reads better to me, I like it.",
          "createdAt": "2022-06-27T18:37:25Z",
          "updatedAt": "2022-06-27T18:37:25Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOE6fLGM481bCF",
          "commit": {
            "abbreviatedOid": "1873db5"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-06-27T18:49:46Z",
          "updatedAt": "2022-06-27T18:49:46Z",
          "comments": [
            {
              "originalPosition": 304,
              "body": "That's a bug that we should fix separately \ud83d\udc4d ",
              "createdAt": "2022-06-27T18:49:46Z",
              "updatedAt": "2022-06-27T18:49:46Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOE6fLGM482PNF",
          "commit": {
            "abbreviatedOid": "08bc6ca"
          },
          "author": "LPardue",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-06-27T22:22:03Z",
          "updatedAt": "2022-06-27T22:22:04Z",
          "comments": [
            {
              "originalPosition": 135,
              "body": "encapsulated or encrypted?",
              "createdAt": "2022-06-27T22:22:03Z",
              "updatedAt": "2022-06-27T22:22:04Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOE6fLGM482j9U",
          "commit": {
            "abbreviatedOid": "08bc6ca"
          },
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "I think that this is confusing.  Not the change from encapsulated request/response to encrypted request/response, that is good, but the names for the outer pieces are difficult for me to swallow.\r\n\r\nI don't have a suggestion here.  I'm not even sure that we need a name for the outer piece.  \"HTTP request/response\" might do.\r\n\r\nThe change in the resource name is maybe confusing and maybe a bit one-sided (it does decapsulation too), but I can probably reconcile myself to calling it by the longer name if I hold my nose.  I'm not defending \"request resource\"; that's a bad name too.\r\n\r\nWould \"gateway\" resource be a better name?  Then we have roles that roughly align with similar functions in HTTP.  Or is that worse?",
          "createdAt": "2022-06-28T00:18:37Z",
          "updatedAt": "2022-06-28T01:46:22Z",
          "comments": [
            {
              "originalPosition": 62,
              "body": "Except that the request that is encrypted is also encapsulated.  The outer request is encapsulating, not encapsulated.",
              "createdAt": "2022-06-28T00:18:37Z",
              "updatedAt": "2022-06-28T01:46:23Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOE6fLGM484bjb",
          "commit": {
            "abbreviatedOid": "08bc6ca"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-06-28T09:32:54Z",
          "updatedAt": "2022-06-28T09:32:55Z",
          "comments": [
            {
              "originalPosition": 62,
              "body": "To clarify, what do you mean when you say it's also encapsulated, and why is that an important detail?",
              "createdAt": "2022-06-28T09:32:55Z",
              "updatedAt": "2022-06-28T09:32:55Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOE6fLGM4883mi",
          "commit": {
            "abbreviatedOid": "08bc6ca"
          },
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-06-28T23:49:04Z",
          "updatedAt": "2022-06-28T23:49:04Z",
          "comments": [
            {
              "originalPosition": 62,
              "body": "It's a word thing.  \"Encapsulated\" is a label you apply to something that has been put in a capsule.  The capsule and the thing it contains then becomes an encapsulation.  You don't encapsulate the capsule (except recursively, by putting into a larger capsule).\r\n\r\nIn this case, the request that was encrypted is the thing that has been encapsulated.  The thing you are calling the \"Encapsulated Request\" is a wrapper or encapsulation, it isn't encapsulated.  The outer request is maybe encapsulating (-ing), but that seems wrong for some reason too.\r\n\r\nWe generally don't have names for a container and their contents.  Which is what makes this hard.  A briefcase containing papers is just a briefcase.  A bus containing passengers is a bus.  A safe containing a valuable item is a safe.  A bathroom stall is still a bathroom stall, even when it is occupied.  But in all cases, the containing thing is not defined by its contents in quite the same way as we might like here.",
              "createdAt": "2022-06-28T23:49:04Z",
              "updatedAt": "2022-06-28T23:49:04Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOE6fLGM4884kd",
          "commit": {
            "abbreviatedOid": "08bc6ca"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-06-28T23:57:28Z",
          "updatedAt": "2022-06-28T23:57:29Z",
          "comments": [
            {
              "originalPosition": 62,
              "body": "Maybe instead of Encapsulated Request we call it a Proxied Request? The proxy would then take Proxy Requests as input and output Proxied Requests. \n\nI would prefer to keep the Encapsulation Resource name for now, as that's at least more precise than Request Resource. \n\nThoughts?",
              "createdAt": "2022-06-28T23:57:29Z",
              "updatedAt": "2022-06-28T23:57:29Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOE6fLGM48863_",
          "commit": {
            "abbreviatedOid": "08bc6ca"
          },
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-06-29T00:17:21Z",
          "updatedAt": "2022-06-29T00:17:21Z",
          "comments": [
            {
              "originalPosition": 62,
              "body": "But all of the requests are proxied, so it isn't very descriptive.  And I don't think that Encapsulation is better (it's not worse) than Request.\r\n\r\nThought: which of the requests are \"oblivious\"?  Could the outer one be oblivious?",
              "createdAt": "2022-06-29T00:17:21Z",
              "updatedAt": "2022-06-29T00:17:21Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOE6fLGM488_EY",
          "commit": {
            "abbreviatedOid": "08bc6ca"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-06-29T00:56:44Z",
          "updatedAt": "2022-06-29T00:56:44Z",
          "comments": [
            {
              "originalPosition": 62,
              "body": "Note that the client's request to the proxy in this proposal is a \"proxy request,\" as in, \"a request to have something proxied\", whereas the proxy's request to the target is a \"proxied request,\" as in, \"a request that has _been_ proxied.\" This distinction seems pretty clear to me. ",
              "createdAt": "2022-06-29T00:56:44Z",
              "updatedAt": "2022-06-29T00:56:44Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOE6fLGM488_dh",
          "commit": {
            "abbreviatedOid": "08bc6ca"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-06-29T01:00:29Z",
          "updatedAt": "2022-06-29T01:00:29Z",
          "comments": [
            {
              "originalPosition": 62,
              "body": "> Thought: which of the requests are \"oblivious\"?  Could the outer one be oblivious?\n\nThe problem with this question is that it's not specific to _which_ request. Is it the client to proxy request or the proxy to target request? I think we need different names for these two things. ",
              "createdAt": "2022-06-29T01:00:29Z",
              "updatedAt": "2022-06-29T01:00:29Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOE6fLGM49FAzY",
          "commit": {
            "abbreviatedOid": "08bc6ca"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-06-30T11:45:38Z",
          "updatedAt": "2022-06-30T11:45:38Z",
          "comments": [
            {
              "originalPosition": 62,
              "body": "Resolving based on latest email thread. Thanks for working through this!",
              "createdAt": "2022-06-30T11:45:38Z",
              "updatedAt": "2022-06-30T11:45:38Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOE6fLGM49FHuB",
          "commit": {
            "abbreviatedOid": "55f4215"
          },
          "author": "LPardue",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-06-30T12:05:14Z",
          "updatedAt": "2022-06-30T12:05:15Z",
          "comments": [
            {
              "originalPosition": 25,
              "body": "does `oblivious target resources` here need capitalization?",
              "createdAt": "2022-06-30T12:05:14Z",
              "updatedAt": "2022-06-30T12:05:15Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOE6fLGM49FMrF",
          "commit": {
            "abbreviatedOid": "55f4215"
          },
          "author": "LPardue",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-06-30T12:20:21Z",
          "updatedAt": "2022-06-30T12:20:21Z",
          "comments": [
            {
              "originalPosition": 147,
              "body": "is this correct? My understanding of the old text was comparing an \"end-to-end request\" (a request from client to target) with just a normal HTTP request operation. \r\n\r\nMaybe I was wrong before and the intent was to talk about the Gateway. But saying the Gateway requires two requests doesn't seem seem right either.\r\n",
              "createdAt": "2022-06-30T12:20:21Z",
              "updatedAt": "2022-06-30T12:20:21Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOE6fLGM49FNFG",
          "commit": {
            "abbreviatedOid": "55f4215"
          },
          "author": "LPardue",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-06-30T12:21:42Z",
          "updatedAt": "2022-06-30T12:21:43Z",
          "comments": [
            {
              "originalPosition": 174,
              "body": "Let's use content instead of body here and subsequent defs",
              "createdAt": "2022-06-30T12:21:42Z",
              "updatedAt": "2022-06-30T12:21:43Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOE6fLGM49FNSe",
          "commit": {
            "abbreviatedOid": "0f40539"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-06-30T12:22:24Z",
          "updatedAt": "2022-06-30T12:22:24Z",
          "comments": [
            {
              "originalPosition": 147,
              "body": "Good catch! This change is wrong. The original text is right.",
              "createdAt": "2022-06-30T12:22:24Z",
              "updatedAt": "2022-06-30T12:22:24Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOE6fLGM49FNUe",
          "commit": {
            "abbreviatedOid": "55f4215"
          },
          "author": "LPardue",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-06-30T12:22:30Z",
          "updatedAt": "2022-06-30T12:22:31Z",
          "comments": [
            {
              "originalPosition": 174,
              "body": "```suggestion\r\n: An HTTP request from Client to Relay that contains an encapsulated request as the content.\r\n```",
              "createdAt": "2022-06-30T12:22:30Z",
              "updatedAt": "2022-06-30T12:22:31Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOE6fLGM49FNVJ",
          "commit": {
            "abbreviatedOid": "0f40539"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-06-30T12:22:32Z",
          "updatedAt": "2022-06-30T12:22:33Z",
          "comments": [
            {
              "originalPosition": 147,
              "body": "```suggestion\r\n* Each oblivious request requires at least two regular HTTP requests, which adds\r\n```",
              "createdAt": "2022-06-30T12:22:32Z",
              "updatedAt": "2022-06-30T12:22:33Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOE6fLGM49FNii",
          "commit": {
            "abbreviatedOid": "4226db6"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-06-30T12:23:09Z",
          "updatedAt": "2022-06-30T12:23:10Z",
          "comments": [
            {
              "originalPosition": 174,
              "body": "ACK \ud83d\udc4d I'll do a pass over the doc to apply that change before we merge.",
              "createdAt": "2022-06-30T12:23:09Z",
              "updatedAt": "2022-06-30T12:23:10Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOE6fLGM49FOdW",
          "commit": {
            "abbreviatedOid": "4226db6"
          },
          "author": "LPardue",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-06-30T12:26:06Z",
          "updatedAt": "2022-06-30T12:26:07Z",
          "comments": [
            {
              "originalPosition": 291,
              "body": "```suggestion\r\nAn Oblivious Gateway Resource, if it receives any response from the Oblivious\r\nTarget Resource, sends a single 200 response containing the encapsulated\r\n```",
              "createdAt": "2022-06-30T12:26:06Z",
              "updatedAt": "2022-06-30T12:26:07Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOE6fLGM49FaWY",
          "commit": {
            "abbreviatedOid": "55f4215"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-06-30T12:59:27Z",
          "updatedAt": "2022-06-30T12:59:27Z",
          "comments": [
            {
              "originalPosition": 174,
              "body": "@LPardue applied this series of fixes",
              "createdAt": "2022-06-30T12:59:27Z",
              "updatedAt": "2022-06-30T12:59:27Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOE6fLGM49Fb1j",
          "commit": {
            "abbreviatedOid": "fa6e9e9"
          },
          "author": "LPardue",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2022-06-30T13:03:02Z",
          "updatedAt": "2022-06-30T13:03:02Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOE6fLGM49IsZ3",
          "commit": {
            "abbreviatedOid": "fa6e9e9"
          },
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "I think that we have some inconsistent encapsulated vs. encrypted stuff here.\r\n\r\nI'm also not that enthusiastic about Proper Nouns, but don't care enough to fight for any particular outcome, except the one where they are used consistently.  You seem to have missed a few, that is.",
          "createdAt": "2022-07-01T03:52:33Z",
          "updatedAt": "2022-07-01T04:00:00Z",
          "comments": [
            {
              "originalPosition": 5,
              "body": "```suggestion\r\nUse of an HTTP proxy can provide a degree of protection against servers\r\n```",
              "createdAt": "2022-07-01T03:52:34Z",
              "updatedAt": "2022-07-01T04:00:00Z"
            },
            {
              "originalPosition": 26,
              "body": "Let's talk capiTaLiZaTiOn.\r\n\r\nI was fairly uniform in terms of not being overly Germanic.  These are not proper nouns, just names.  But you seem to have taken the opposite approach.\r\n\r\nI prefer all lowercase, but I don't object to lending the names a little pomp and grandeur either.\r\n\r\nYou missed a s/resource/Resource here, that's all.",
              "createdAt": "2022-07-01T03:55:16Z",
              "updatedAt": "2022-07-01T04:00:00Z"
            },
            {
              "originalPosition": 77,
              "body": "```suggestion\r\n     | [+ Encrypted    |                    |              |\r\n```",
              "createdAt": "2022-07-01T03:55:40Z",
              "updatedAt": "2022-07-01T04:00:00Z"
            },
            {
              "originalPosition": 81,
              "body": "```suggestion\r\n     |                 | [+ Encrypted       |              |\r\n```",
              "createdAt": "2022-07-01T03:55:57Z",
              "updatedAt": "2022-07-01T04:00:00Z"
            },
            {
              "originalPosition": 89,
              "body": "```suggestion\r\n     |                 |       [+ Encrypted |              |\r\n```",
              "createdAt": "2022-07-01T03:56:19Z",
              "updatedAt": "2022-07-01T04:00:00Z"
            },
            {
              "originalPosition": 93,
              "body": "```suggestion\r\n     |    [+ Encrypted |                    |              |\r\n```",
              "createdAt": "2022-07-01T03:56:36Z",
              "updatedAt": "2022-07-01T04:00:00Z"
            },
            {
              "originalPosition": 43,
              "body": "```suggestion\r\n  for more information about the mapping between Oblivious Relay and Oblivious\r\n  Gateway Resources.\r\n```\r\n\r\nMaybe even\r\n\r\n```suggestion\r\n  for more information about the mapping between Oblivious Relay and Gateway\r\n  Resources.\r\n```",
              "createdAt": "2022-07-01T03:57:20Z",
              "updatedAt": "2022-07-01T04:00:00Z"
            },
            {
              "originalPosition": 46,
              "body": "Title Case Here As Well Perhaps?",
              "createdAt": "2022-07-01T03:57:39Z",
              "updatedAt": "2022-07-01T04:00:00Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOE6fLGM49KE9N",
          "commit": {
            "abbreviatedOid": "705c6b1"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-07-01T10:42:26Z",
          "updatedAt": "2022-07-01T10:42:26Z",
          "comments": [
            {
              "originalPosition": 5,
              "body": "We need something like this to make it clear that relay is basically a proxy, but I'll accept this suggestion and make a further change below.",
              "createdAt": "2022-07-01T10:42:26Z",
              "updatedAt": "2022-07-01T10:42:26Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOE6fLGM49KFNE",
          "commit": {
            "abbreviatedOid": "2863a49"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-07-01T10:43:28Z",
          "updatedAt": "2022-07-01T10:43:29Z",
          "comments": [
            {
              "originalPosition": 77,
              "body": "I kept Encapsulated here since that's the term we use to describe the Relay Request's content.",
              "createdAt": "2022-07-01T10:43:28Z",
              "updatedAt": "2022-07-01T10:43:29Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOE6fLGM49KFot",
          "commit": {
            "abbreviatedOid": "fa6e9e9"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-07-01T10:45:18Z",
          "updatedAt": "2022-07-01T10:45:18Z",
          "comments": [
            {
              "originalPosition": 26,
              "body": "Good catch -- fixed.",
              "createdAt": "2022-07-01T10:45:18Z",
              "updatedAt": "2022-07-01T10:45:18Z"
            }
          ]
        }
      ]
    },
    {
      "number": 129,
      "id": "PR_kwDOE6fLGM46ddWY",
      "title": "New new example",
      "url": "https://github.com/ietf-wg-ohai/oblivious-http/pull/129",
      "state": "MERGED",
      "author": "martinthomson",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Copy-paste error on my behalf trimmed the last three characters from\r\nprivate keys.  I almost made the same error again.  The output (which I\r\nwill add below) wraps in my terminal at exactly that point.  And this\r\nparticular terminal treats a wrapped string as two strings: yay.  Bug\r\nreport time.\r\n\r\nIn any case, I didn't miss the extra characters this time.  I think.\r\n\r\n```\r\n[TRACE ohttp::nss::hpke] Generated key pair: sk=PrivateKey 3cf36bbc17111f07e816aa895ff42de8d1a029af16580c232a68e15feefa1073 pk=PublicKey a2baf3a20a6c551df011f02e7b5e87afded5f9d584c1071e439abc1cc5ffc345\r\n[TRACE ohttp::test] Config: 010020a2baf3a20a6c551df011f02e7b5e87afded5f9d584c1071e439abc1cc5ffc34500080001000100010003\r\n[TRACE ohttp::nss::hpke] Generated key pair: sk=PrivateKey a9ebdb1efc14e3ea8956f8688b47b424160c1e93d82a0301dddbb710363b3941 pk=PublicKey 984880a3350e0223e10a56c37e95c77a77cd0e4a056405b5cdce8f813d562d06\r\n[TRACE ohttp::test] Request: 00034745540568747470730b6578616d706c652e636f6d012f\r\n[TRACE ohttp::test] Encapsulated Request: 01002000010001984880a3350e0223e10a56c37e95c77a77cd0e4a056405b5cdce8f813d562d06a76430f42315a26fe661b11b6d1ce64de152733af519628f4fe3cb3e239aa4f4c42729d165029e6c26\r\n[TRACE ohttp::nss::hkdf] HKDF extract: salt=984880a3350e0223e10a56c37e95c77a77cd0e4a056405b5cdce8f813d562d064bbf6a36b9a9783914cfdb66670419b9 ikm=cec71c150d58bdcadbf4a1d27a20967e prk=ea9b0f025b63d4d2693b23eea2ed9772acb483f05db7a95d99d6b4ef15c4b766\r\n[TRACE ohttp::nss::hkdf] HKDF expand_key: prk=ea9b0f025b63d4d2693b23eea2ed9772acb483f05db7a95d99d6b4ef15c4b766 info=6b6579 okm=afe1375849f14b7e7c7ab9f4b570c0b5\r\n[TRACE ohttp::nss::hkdf] HKDF expand_data: prk=ea9b0f025b63d4d2693b23eea2ed9772acb483f05db7a95d99d6b4ef15c4b766 info=6e6f6e6365 okm=88b2cf64bfcc447a9dd9b427\r\n[TRACE ohttp::nss::aead] New AEAD: key=afe1375849f14b7e7c7ab9f4b570c0b5 nonce_base=88b2cf64bfcc447a9dd9b427\r\n[TRACE ohttp::test] Encapsulated Response: 4bbf6a36b9a9783914cfdb66670419b9517faaa500d3c547a0da2cd407b77151421ef3\r\n[TRACE ohttp::nss::hkdf] HKDF extract: salt=984880a3350e0223e10a56c37e95c77a77cd0e4a056405b5cdce8f813d562d064bbf6a36b9a9783914cfdb66670419b9 ikm=cec71c150d58bdcadbf4a1d27a20967e prk=ea9b0f025b63d4d2693b23eea2ed9772acb483f05db7a95d99d6b4ef15c4b766\r\n[TRACE ohttp::nss::hkdf] HKDF expand_key: prk=ea9b0f025b63d4d2693b23eea2ed9772acb483f05db7a95d99d6b4ef15c4b766 info=6b6579 okm=afe1375849f14b7e7c7ab9f4b570c0b5\r\n[TRACE ohttp::nss::hkdf] HKDF expand_data: prk=ea9b0f025b63d4d2693b23eea2ed9772acb483f05db7a95d99d6b4ef15c4b766 info=6e6f6e6365 okm=88b2cf64bfcc447a9dd9b427\r\n[TRACE ohttp::nss::aead] New AEAD: key=afe1375849f14b7e7c7ab9f4b570c0b5 nonce_base=88b2cf64bfcc447a9dd9b427\r\n[TRACE ohttp::test] Response: 0140c8\r\ntest test::request_response ... ok\r\n```",
      "createdAt": "2022-06-28T01:34:56Z",
      "updatedAt": "2022-06-28T15:18:24Z",
      "baseRepository": "ietf-wg-ohai/oblivious-http",
      "baseRefName": "main",
      "baseRefOid": "17978ac4e4eaa34d6061a2b53f459d15ef435746",
      "headRepository": "martinthomson/oblivious-http",
      "headRefName": "new-example",
      "headRefOid": "51c448e81ace400467483e4958b492ba85b0e26e",
      "closedAt": "2022-06-28T15:18:24Z",
      "mergedAt": "2022-06-28T15:18:24Z",
      "mergedBy": "chris-wood",
      "mergeCommit": {
        "oid": "9970cad7de6f0c2b3348e1be8325f349473e0084"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOE6fLGM4827KZ",
          "commit": {
            "abbreviatedOid": "51c448e"
          },
          "author": "tfpauly",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2022-06-28T02:54:18Z",
          "updatedAt": "2022-06-28T02:54:18Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOE6fLGM486XdS",
          "commit": {
            "abbreviatedOid": "51c448e"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2022-06-28T15:18:19Z",
          "updatedAt": "2022-06-28T15:18:19Z",
          "comments": []
        }
      ]
    },
    {
      "number": 130,
      "id": "PR_kwDOE6fLGM46ovui",
      "title": "Add text about privacy considerations that come from differential treatment",
      "url": "https://github.com/ietf-wg-ohai/oblivious-http/pull/130",
      "state": "MERGED",
      "author": "chris-wood",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Closes #114.\r\n\r\nThis is a lot of words to explain the point, so I'm happy to take simplifying suggestions.\r\n\r\ncc @tireddy2",
      "createdAt": "2022-06-30T12:10:31Z",
      "updatedAt": "2022-07-05T12:19:30Z",
      "baseRepository": "ietf-wg-ohai/oblivious-http",
      "baseRefName": "main",
      "baseRefOid": "c2cc26f3d547bd78ea18e0aa7ff7cafa3fc06675",
      "headRepository": "ietf-wg-ohai/oblivious-http",
      "headRefName": "caw/differential-treatment",
      "headRefOid": "e23c215493b66a8092d6e4ffeb51f08cc66d01c3",
      "closedAt": "2022-07-05T12:19:29Z",
      "mergedAt": "2022-07-05T12:19:29Z",
      "mergedBy": "chris-wood",
      "mergeCommit": {
        "oid": "d2e6e57f91f7f75aa80a6f1455ed9ea26cdebe7a"
      },
      "comments": [
        {
          "author": "tireddy2",
          "authorAssociation": "NONE",
          "body": "Changes look good to me. I also updated Section 4.1 of https://github.com/tireddy2/ohai/blob/main/draft-rdb-ohai-feedback-to-proxy-03.txt to demonstrate how rate-limiting will not impact the privacy of benign clients.",
          "createdAt": "2022-07-01T07:56:25Z",
          "updatedAt": "2022-07-01T07:56:25Z"
        },
        {
          "author": "tireddy2",
          "authorAssociation": "NONE",
          "body": "To address the scenario of the target giving feedback to the gateway, I introduced a new header \"Ohttp-Outside-Encap\". The \"Ohttp-Outside-Encap\" header is added by the Oblivious request resource to the HTTP request to signal to the Oblivious target resource the list of header fields that it will be remove from the HTTP response. Please see Section 7 in https://github.com/tireddy2/ohai/blob/main/draft-rdb-ohai-feedback-to-proxy-03.txt for more details. ",
          "createdAt": "2022-07-01T12:13:55Z",
          "updatedAt": "2022-07-01T12:13:55Z"
        },
        {
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "body": "I think that we want some extra text here, probably before the last sentence about clients understanding the extent to which they might be treated differently.\r\n\r\n> Some patterns of abuse cannot be detected without access to the request that is made to the target resource.  This means that only the oblivious gateway or target resource are in a position to identify abuse.  An oblivious gateway resource MAY send signals toward the oblivious relay resource to provide feedback about specific requests.  An oblivious relay resource that acts on this feedback could - either inadvertently or by design - lead to clients being deanonymized.\r\n\r\nI don't know if this is worth adding, but a relay acting on the HTTP Retry-After header field is a great example of something that might destroy anonymity.\r\n\r\n... and now I think we have enough material for a new section.",
          "createdAt": "2022-07-05T01:34:15Z",
          "updatedAt": "2022-07-05T01:34:15Z"
        },
        {
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "body": "Applied @martinthomson's suggested text (as an addendum to the main content here, not inserted in the middle) and moved everything -- including proxies applying differential treatment to requests -- to a new subsection. Thanks, all!",
          "createdAt": "2022-07-05T12:19:26Z",
          "updatedAt": "2022-07-05T12:19:26Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOE6fLGM49HskW",
          "commit": {
            "abbreviatedOid": "088ff34"
          },
          "author": "tfpauly",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-06-30T19:59:00Z",
          "updatedAt": "2022-06-30T19:59:04Z",
          "comments": [
            {
              "originalPosition": 17,
              "body": "The target can't tell which requests are tied to the same client. How would the target recognize that a client is being rate-limited or blocked?",
              "createdAt": "2022-06-30T19:59:00Z",
              "updatedAt": "2022-06-30T19:59:04Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOE6fLGM49Hzy2",
          "commit": {
            "abbreviatedOid": "088ff34"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-06-30T20:29:08Z",
          "updatedAt": "2022-06-30T20:29:08Z",
          "comments": [
            {
              "originalPosition": 17,
              "body": "I gave a hypothetical example in the corresponding issue, but I'll give a simpler one here. Imagine there are two clients using a relay: one good and one bad. If the proxy decided to rate limit or block the bad client for whatever reason -- and the target knew the proxy would do this -- it can then conclude that requests which come _after_ the block is in place are the good client.\r\n\r\nThe underlying point is that differential treatment can change what clients interact with the target, and how they interact with it, which fundamentally leaks information to the target.",
              "createdAt": "2022-06-30T20:29:08Z",
              "updatedAt": "2022-06-30T20:29:08Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOE6fLGM49H6NV",
          "commit": {
            "abbreviatedOid": "088ff34"
          },
          "author": "tfpauly",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-06-30T20:56:47Z",
          "updatedAt": "2022-06-30T20:56:47Z",
          "comments": [
            {
              "originalPosition": 17,
              "body": "Got it. Yes, if the proxy only allows specific clients in that pass a certain bar of trust, then the target could know that the client is in that set of trusted clients.\r\n\r\nI think the blocking is an easier example here \u2014 rate limiting doesn't actually tell you as clearly, I think.",
              "createdAt": "2022-06-30T20:56:47Z",
              "updatedAt": "2022-06-30T20:56:47Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOE6fLGM49H6fY",
          "commit": {
            "abbreviatedOid": "088ff34"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-06-30T20:58:03Z",
          "updatedAt": "2022-06-30T20:58:03Z",
          "comments": [
            {
              "originalPosition": 17,
              "body": "Yeah, true. Should we give an example with blocking to make this more clear?",
              "createdAt": "2022-06-30T20:58:03Z",
              "updatedAt": "2022-06-30T20:58:03Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOE6fLGM49H7Ry",
          "commit": {
            "abbreviatedOid": "088ff34"
          },
          "author": "tfpauly",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-06-30T21:01:20Z",
          "updatedAt": "2022-06-30T21:01:20Z",
          "comments": [
            {
              "originalPosition": 17,
              "body": "I'd suggest simply changing this: \"proxy chooses to rate limit or block an abusive client\" to \"proxy chooses to block an abusive client\"?",
              "createdAt": "2022-06-30T21:01:20Z",
              "updatedAt": "2022-06-30T21:01:20Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOE6fLGM49IDVE",
          "commit": {
            "abbreviatedOid": "088ff34"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-06-30T21:41:25Z",
          "updatedAt": "2022-06-30T21:41:25Z",
          "comments": [
            {
              "originalPosition": 15,
              "body": "```suggestion\r\nclients at a target server. For example, if a proxy chooses to\r\n```",
              "createdAt": "2022-06-30T21:41:25Z",
              "updatedAt": "2022-06-30T21:41:25Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOE6fLGM49IDYj",
          "commit": {
            "abbreviatedOid": "41c1f48"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-06-30T21:41:42Z",
          "updatedAt": "2022-06-30T21:41:43Z",
          "comments": [
            {
              "originalPosition": 17,
              "body": "Done.",
              "createdAt": "2022-06-30T21:41:42Z",
              "updatedAt": "2022-06-30T21:41:43Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOE6fLGM49IIwg",
          "commit": {
            "abbreviatedOid": "41c1f48"
          },
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-06-30T22:13:45Z",
          "updatedAt": "2022-06-30T22:13:45Z",
          "comments": [
            {
              "originalPosition": 12,
              "body": "Check terminology: is target right? I think that gateway is now correct.",
              "createdAt": "2022-06-30T22:13:45Z",
              "updatedAt": "2022-06-30T22:13:46Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOE6fLGM49ILCx",
          "commit": {
            "abbreviatedOid": "41c1f48"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-06-30T22:29:37Z",
          "updatedAt": "2022-06-30T22:29:38Z",
          "comments": [
            {
              "originalPosition": 12,
              "body": "Yeah, I'll update this once we land the terminology PR. ",
              "createdAt": "2022-06-30T22:29:38Z",
              "updatedAt": "2022-06-30T22:29:38Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOE6fLGM49IM-6",
          "commit": {
            "abbreviatedOid": "41c1f48"
          },
          "author": "tfpauly",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "Approved, once the terminology aligns",
          "createdAt": "2022-06-30T22:44:43Z",
          "updatedAt": "2022-06-30T22:44:43Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOE6fLGM49Irgm",
          "commit": {
            "abbreviatedOid": "41c1f48"
          },
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "This is good.\r\n\r\nIt gives us a basis for thinking about how feedback might work.\r\n\r\nI don't know if you need to clarify the target->gateway->relay (target->request->proxy) feedback path though.  It seems like the distinction between target and gateway is a bit muddy here.",
          "createdAt": "2022-07-01T03:42:49Z",
          "updatedAt": "2022-07-01T03:48:20Z",
          "comments": [
            {
              "originalPosition": 12,
              "body": "I just wanted to get this clear.  Because target != gateway, which is important.\r\n\r\nIn the new terms, the relay might receive feedback from the gateway about specific requests.  If it does so and changes its treatment as a result, that generates a new type of signal.  The client needs to understand the sorts of changes in treatment that might occur and accept those before using a relay.\r\n\r\nThe target might also provide feedback to the gateway.  The gateway might use that feedback, but it is only if it forwards that information to the relay that it might have an effect on privacy.",
              "createdAt": "2022-07-01T03:42:49Z",
              "updatedAt": "2022-07-01T03:48:20Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOE6fLGM49KD4z",
          "commit": {
            "abbreviatedOid": "41c1f48"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-07-01T10:37:55Z",
          "updatedAt": "2022-07-01T10:37:56Z",
          "comments": [
            {
              "originalPosition": 12,
              "body": "Right -- the intent here is the gateway, not the target. ",
              "createdAt": "2022-07-01T10:37:55Z",
              "updatedAt": "2022-07-01T10:37:56Z"
            }
          ]
        }
      ]
    },
    {
      "number": 132,
      "id": "PR_kwDOE6fLGM46_qKh",
      "title": "Bind HPKE info to the configuration",
      "url": "https://github.com/ietf-wg-ohai/oblivious-http/pull/132",
      "state": "MERGED",
      "author": "martinthomson",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "We previously put the details from the key configuration (key id, KEM,\r\nKDF, AEAD) in the AAD for the request.  But @davidben noted that this\r\nmeant that this wasn't bound to the response.\r\n\r\nAnalysis shows that this isn't a security problem, but while that\r\ndepends on some very reasonable assumptions about how keys are used,\r\nthere is no reason not to do better.\r\n\r\nPerformance-wise, this change is a wash.  The AAD input is now empty,\r\nwhich should make this a tiny bit faster to execute.  The downside is\r\nthat the info is no longer static, which means that it is a tiny bit\r\nslower, especially on the server side where it is harder to just pass a\r\nconstant value into SetupBaseR and the bits from the header into the\r\nAAD.  But those are extraordinarily trivial differences.\r\n\r\nThe spec doesn't really change much either, though I've taken this\r\nchance to be a bit more explicit about what functions in HPKE are run\r\nand what their inputs are.\r\n\r\nI will do examples in a follow-up so that you can see the effect on\r\nthose (the numbers change, that's all).\r\n\r\nCode changes are fairly simple also, see\r\nhttps://github.com/martinthomson/ohttp/pull/21 for an example.  Note\r\nthat the biggest part of this is down to a structural choice, the actual\r\nchanges are minor.  Response handling doesn't change at all.\r\n\r\nCloses #131.",
      "createdAt": "2022-07-07T06:46:57Z",
      "updatedAt": "2022-07-11T02:51:30Z",
      "baseRepository": "ietf-wg-ohai/oblivious-http",
      "baseRefName": "main",
      "baseRefOid": "d2e6e57f91f7f75aa80a6f1455ed9ea26cdebe7a",
      "headRepository": "martinthomson/oblivious-http",
      "headRefName": "bind-info",
      "headRefOid": "c01ca5b78b92127f53f13754b0c4e43f0f8b5c45",
      "closedAt": "2022-07-11T02:51:27Z",
      "mergedAt": "2022-07-11T02:51:27Z",
      "mergedBy": "martinthomson",
      "mergeCommit": {
        "oid": "27f32012cce112c898ff0ee570eb847af1831686"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOE6fLGM49jUoI",
          "commit": {
            "abbreviatedOid": "c01ca5b"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "Verified [in my implementation](https://github.com/chris-wood/ohttp-go/pull/5).",
          "createdAt": "2022-07-08T09:42:13Z",
          "updatedAt": "2022-07-08T09:42:13Z",
          "comments": []
        }
      ]
    },
    {
      "number": 133,
      "id": "PR_kwDOE6fLGM46_t4Q",
      "title": "Consistency Is Important",
      "url": "https://github.com/ietf-wg-ohai/oblivious-http/pull/133",
      "state": "MERGED",
      "author": "martinthomson",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "I Found A Few Instances Where Oblivious Wasn't Capitalized Consistently,\r\nWhich Would Be Bad.  There Were Also A Few Occurrences of \"oblivious\r\nrequest resource\", Which Is Worse.",
      "createdAt": "2022-07-07T07:05:18Z",
      "updatedAt": "2022-07-07T13:59:50Z",
      "baseRepository": "ietf-wg-ohai/oblivious-http",
      "baseRefName": "main",
      "baseRefOid": "d2e6e57f91f7f75aa80a6f1455ed9ea26cdebe7a",
      "headRepository": "martinthomson/oblivious-http",
      "headRefName": "capital-consistency",
      "headRefOid": "8c52530e05089d25eb9c8d4cbe0ea1002176bfe4",
      "closedAt": "2022-07-07T13:59:50Z",
      "mergedAt": "2022-07-07T13:59:50Z",
      "mergedBy": "chris-wood",
      "mergeCommit": {
        "oid": "232cdab8ada9440e46c6cb80c5b36ce97eb08c17"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOE6fLGM49fWc5",
          "commit": {
            "abbreviatedOid": "8c52530"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2022-07-07T13:59:39Z",
          "updatedAt": "2022-07-07T13:59:39Z",
          "comments": []
        }
      ]
    },
    {
      "number": 134,
      "id": "PR_kwDOE6fLGM46_uvS",
      "title": "Just target",
      "url": "https://github.com/ietf-wg-ohai/oblivious-http/pull/134",
      "state": "MERGED",
      "author": "martinthomson",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "On top of #133 so that I don't have to deal with merge conflicts.",
      "createdAt": "2022-07-07T07:09:19Z",
      "updatedAt": "2022-07-08T10:05:52Z",
      "baseRepository": "ietf-wg-ohai/oblivious-http",
      "baseRefName": "main",
      "baseRefOid": "d2e6e57f91f7f75aa80a6f1455ed9ea26cdebe7a",
      "headRepository": "martinthomson/oblivious-http",
      "headRefName": "just-target",
      "headRefOid": "f874a55e81bb8dfafdef1fcd00cdae06b55b322a",
      "closedAt": "2022-07-07T14:00:01Z",
      "mergedAt": "2022-07-07T14:00:01Z",
      "mergedBy": "chris-wood",
      "mergeCommit": {
        "oid": "61e7302b4d82c8c02f09749e51c2d0bb3d645cbf"
      },
      "comments": [
        {
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "body": "Thanks @LPardue -- fixed directly on `main`.",
          "createdAt": "2022-07-08T10:05:52Z",
          "updatedAt": "2022-07-08T10:05:52Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOE6fLGM49fWSb",
          "commit": {
            "abbreviatedOid": "f874a55"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2022-07-07T13:59:16Z",
          "updatedAt": "2022-07-07T13:59:16Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOE6fLGM49gibD",
          "commit": {
            "abbreviatedOid": "f874a55"
          },
          "author": "LPardue",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-07-07T17:36:15Z",
          "updatedAt": "2022-07-07T17:36:15Z",
          "comments": [
            {
              "originalPosition": 31,
              "body": "missed an `an Target` here",
              "createdAt": "2022-07-07T17:36:15Z",
              "updatedAt": "2022-07-07T17:36:15Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOE6fLGM49gimS",
          "commit": {
            "abbreviatedOid": "f874a55"
          },
          "author": "LPardue",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-07-07T17:36:52Z",
          "updatedAt": "2022-07-07T17:36:53Z",
          "comments": [
            {
              "originalPosition": 31,
              "body": "few others peppered in the doc too",
              "createdAt": "2022-07-07T17:36:52Z",
              "updatedAt": "2022-07-07T17:36:53Z"
            }
          ]
        }
      ]
    },
    {
      "number": 137,
      "id": "PR_kwDOE6fLGM47uCam",
      "title": "Integrate request-date stuff",
      "url": "https://github.com/ietf-wg-ohai/oblivious-http/pull/137",
      "state": "MERGED",
      "author": "martinthomson",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "This includes the time correction piece.  I'm interested in whether\r\npeople think that it is OK to include that.  The section could be\r\nremoved along with the corresponding IANA piece, but given the\r\nprevalence of clock skew, I'm inclined to leave it in.",
      "createdAt": "2022-07-20T10:16:15Z",
      "updatedAt": "2022-07-26T17:39:03Z",
      "baseRepository": "ietf-wg-ohai/oblivious-http",
      "baseRefName": "main",
      "baseRefOid": "27f32012cce112c898ff0ee570eb847af1831686",
      "headRepository": "ietf-wg-ohai/oblivious-http",
      "headRefName": "date-integration",
      "headRefOid": "a85db2e4a25efbfd9ee25107557e2304e3f0090c",
      "closedAt": "2022-07-26T17:39:01Z",
      "mergedAt": "2022-07-26T17:39:01Z",
      "mergedBy": "martinthomson",
      "mergeCommit": {
        "oid": "aad02b907ea0e1078eb8bbb01b692c2d05148599"
      },
      "comments": [
        {
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "body": "The picture might help, but it is also a lot of vertical real estate to dedicate to this.  Let's see if I can't compress it a little.",
          "createdAt": "2022-07-24T17:39:47Z",
          "updatedAt": "2022-07-24T17:39:47Z"
        },
        {
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "body": "> The picture might help, but it is also a lot of vertical real estate to dedicate to this.  Let's see if I can't compress it a little.\n\nMaybe an alternative style is to just list the happy path actions in a list? Client sends request, gets back response with 4xx and date header, retires request with new HPKE context, and then stops based on response, or something. These four simple steps are just spread across a lot of lines right now. But this is purely editorial, so I trust your judgement here.",
          "createdAt": "2022-07-24T17:42:21Z",
          "updatedAt": "2022-07-24T17:42:21Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOE6fLGM4-aHxp",
          "commit": {
            "abbreviatedOid": "3f73757"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "This LGTM. I wonder if it would be helpful to show the retry dance in a picture. Something like:\r\n\r\n```\r\n~~~ aasvg\r\n+---------+       +----------+      +----------+      +----------+\r\n| Client  |       | Relay    |      | Gateway  |      | Target   |\r\n|         |       | Resource |      | Resource |      | Resource |\r\n+----+----+       +----+-----+      +-------+--+      +----+-----+\r\n     |                 |                    |              |\r\n     | Relay           |                    |              |\r\n     | Request         |                    |              |\r\n     | [+ Encapsulated |                    |              |\r\n     |    Request ]    |                    |              |\r\n     +---------------->| Gateway            |              |\r\n     |                 | Request            |              |\r\n     |                 | [+ Encapsulated    |              |\r\n     |                 |    Request ]       |              |\r\n     |                 +------------------->| Request      |\r\n     |                 |                    +------------->|\r\n     |                 |                    |              |\r\n     |                 |                    | 400 Response |\r\n     |                 |                    |       + Date |    \r\n     |                 |            Gateway |<-------------+\r\n     |                 |           Response |              |\r\n     |                 |    [+ Encapsulated |              |\r\n     |                 |         Response ] |              |\r\n     |           Relay |<-------------------+              |\r\n     |        Response |                    |              |\r\n     | [+ Encapsulated |                    |              |\r\n     |      Response ] |                    |              |\r\n     |<----------------+                    |              |\r\n     |                 |                    |              |\r\n   Client              |                    |              |\r\n correction            |                    |              |\r\n     |                 |                    |              |\r\n     | Relay           |                    |              |\r\n     | Request         |                    |              |\r\n     | [+ Encapsulated |                    |              |\r\n     |    Retry        |                    |              |\r\n     |    Request ]    |                    |              |\r\n     +---------------->|        ...         |     ...      |\r\n~~~\r\n{: #fig-overview title=\"Overview of Oblivious HTTP\"}\r\n```",
          "createdAt": "2022-07-21T19:25:21Z",
          "updatedAt": "2022-07-21T19:31:09Z",
          "comments": [
            {
              "originalPosition": 44,
              "body": "```suggestion\r\nheader field of the decapsulated request is outside of the current time window.\r\n```",
              "createdAt": "2022-07-21T19:25:21Z",
              "updatedAt": "2022-07-21T19:31:09Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOE6fLGM4-gW5V",
          "commit": {
            "abbreviatedOid": "3f73757"
          },
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-07-24T17:37:22Z",
          "updatedAt": "2022-07-24T17:37:23Z",
          "comments": [
            {
              "originalPosition": 44,
              "body": "```suggestion\r\nheader field of the decrypted request is outside of the current time window.\r\n```",
              "createdAt": "2022-07-24T17:37:22Z",
              "updatedAt": "2022-07-24T17:37:23Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOE6fLGM4-pB2v",
          "commit": {
            "abbreviatedOid": "0032c07"
          },
          "author": "ShivanKaul",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-07-26T13:02:21Z",
          "updatedAt": "2022-07-26T13:02:21Z",
          "comments": [
            {
              "originalPosition": 150,
              "body": "s/change/chance",
              "createdAt": "2022-07-26T13:02:21Z",
              "updatedAt": "2022-07-26T13:02:22Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOE6fLGM4-pDR2",
          "commit": {
            "abbreviatedOid": "0032c07"
          },
          "author": "ShivanKaul",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-07-26T13:06:14Z",
          "updatedAt": "2022-07-26T13:06:14Z",
          "comments": [
            {
              "originalPosition": 150,
              "body": "Could the Oblivious Gateway Resource also indicate the right time window to the client? This would allow a privacy-sensitive client to randomize the `Date` value correctly to prevent clock fingerprinting, and also reduce chances of rejection.",
              "createdAt": "2022-07-26T13:06:14Z",
              "updatedAt": "2022-07-26T13:06:14Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOE6fLGM4-pET9",
          "commit": {
            "abbreviatedOid": "0032c07"
          },
          "author": "tfpauly",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-07-26T13:09:02Z",
          "updatedAt": "2022-07-26T13:09:04Z",
          "comments": [
            {
              "originalPosition": 151,
              "body": "```suggestion\r\nvalue of their clock and reduce the chance of linking of requests over time.\r\n```",
              "createdAt": "2022-07-26T13:09:02Z",
              "updatedAt": "2022-07-26T13:09:04Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOE6fLGM4-pXUQ",
          "commit": {
            "abbreviatedOid": "0032c07"
          },
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-07-26T13:55:54Z",
          "updatedAt": "2022-07-26T13:55:55Z",
          "comments": [
            {
              "originalPosition": 150,
              "body": "I don't think that that is really necessary.  The idea is to carry the value of `now()`, which the response `Date` field does amply.  Having information about the window (e.g., 10s into the past, 5s into the future) might help if you have very long delays on request/response processing, but I don't see that as being very useful in most cases.  Anything less than 1s will just wash out.",
              "createdAt": "2022-07-26T13:55:55Z",
              "updatedAt": "2022-07-26T13:55:55Z"
            }
          ]
        }
      ]
    },
    {
      "number": 138,
      "id": "PR_kwDOE6fLGM4738fB",
      "title": "Typo fix",
      "url": "https://github.com/ietf-wg-ohai/oblivious-http/pull/138",
      "state": "MERGED",
      "author": "chris-wood",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2022-07-21T18:09:04Z",
      "updatedAt": "2022-07-22T08:56:00Z",
      "baseRepository": "ietf-wg-ohai/oblivious-http",
      "baseRefName": "main",
      "baseRefOid": "0cbccb7b980ecc6010abb2c14f0b194aa588c1a9",
      "headRepository": "ietf-wg-ohai/oblivious-http",
      "headRefName": "chris-wood-patch-1",
      "headRefOid": "6d656c90aed571f0ca2c59e5e2f173773a2f0ad3",
      "closedAt": "2022-07-22T08:55:59Z",
      "mergedAt": "2022-07-22T08:55:59Z",
      "mergedBy": "martinthomson",
      "mergeCommit": {
        "oid": "a8cfc319147c87e53423427e8788ee2596994060"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOE6fLGM4-Z15P",
          "commit": {
            "abbreviatedOid": "6d656c9"
          },
          "author": "rillian",
          "authorAssociation": "NONE",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2022-07-21T18:17:37Z",
          "updatedAt": "2022-07-21T18:17:37Z",
          "comments": []
        }
      ]
    },
    {
      "number": 140,
      "id": "PR_kwDOE6fLGM47_Pfn",
      "title": "Don't buffer encrypted messages on the client",
      "url": "https://github.com/ietf-wg-ohai/oblivious-http/pull/140",
      "state": "CLOSED",
      "author": "ShivanKaul",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Fix https://github.com/ietf-wg-ohai/oblivious-http/issues/139",
      "createdAt": "2022-07-23T23:15:17Z",
      "updatedAt": "2022-07-25T14:20:42Z",
      "baseRepository": "ietf-wg-ohai/oblivious-http",
      "baseRefName": "main",
      "baseRefOid": "a8cfc319147c87e53423427e8788ee2596994060",
      "headRepository": "ietf-wg-ohai/oblivious-http",
      "headRefName": "ShivanKaul-patch-1",
      "headRefOid": "9e086115a82e7b8ab8e46049b36d4f33ffbfa21b",
      "closedAt": "2022-07-25T14:20:42Z",
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [],
      "reviews": []
    },
    {
      "number": 142,
      "id": "PR_kwDOE6fLGM48IRer",
      "title": "The Date isn't needed if you know it isn't needed",
      "url": "https://github.com/ietf-wg-ohai/oblivious-http/pull/142",
      "state": "MERGED",
      "author": "martinthomson",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2022-07-26T17:42:04Z",
      "updatedAt": "2022-07-26T19:20:46Z",
      "baseRepository": "ietf-wg-ohai/oblivious-http",
      "baseRefName": "main",
      "baseRefOid": "aad02b907ea0e1078eb8bbb01b692c2d05148599",
      "headRepository": "ietf-wg-ohai/oblivious-http",
      "headRefName": "date-optional",
      "headRefOid": "cbc7782ac3c1557623a9c127df9dbf6dd291b783",
      "closedAt": "2022-07-26T19:20:46Z",
      "mergedAt": "2022-07-26T19:20:46Z",
      "mergedBy": "chris-wood",
      "mergeCommit": {
        "oid": "f95424a23ce45ad321779c0232be0c75772c1c07"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOE6fLGM4-rKe1",
          "commit": {
            "abbreviatedOid": "cbc7782"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2022-07-26T19:20:41Z",
          "updatedAt": "2022-07-26T19:20:41Z",
          "comments": []
        }
      ]
    },
    {
      "number": 143,
      "id": "PR_kwDOE6fLGM48IURk",
      "title": "Add text about deployment assumptions for servers",
      "url": "https://github.com/ietf-wg-ohai/oblivious-http/pull/143",
      "state": "MERGED",
      "author": "martinthomson",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "@bifurcation noted that it was important to note that the Gateway needs\r\nto be trusted if gateway != target.  As a practical matter, that means\r\nthat you probably want gateway == target.",
      "createdAt": "2022-07-26T17:56:18Z",
      "updatedAt": "2022-08-01T12:13:27Z",
      "baseRepository": "ietf-wg-ohai/oblivious-http",
      "baseRefName": "main",
      "baseRefOid": "aad02b907ea0e1078eb8bbb01b692c2d05148599",
      "headRepository": "ietf-wg-ohai/oblivious-http",
      "headRefName": "gateway-trust",
      "headRefOid": "42611ee77d02a77143897a6cfa21592eafb15e2a",
      "closedAt": "2022-08-01T12:13:27Z",
      "mergedAt": "2022-08-01T12:13:27Z",
      "mergedBy": "chris-wood",
      "mergeCommit": {
        "oid": "eb044ff9891ac84027c01ba95042038b86ac6880"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOE6fLGM4-rStF",
          "commit": {
            "abbreviatedOid": "36c2eeb"
          },
          "author": "tfpauly",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2022-07-26T19:53:05Z",
          "updatedAt": "2022-07-26T19:53:05Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOE6fLGM4-w-r1",
          "commit": {
            "abbreviatedOid": "36c2eeb"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "CHANGES_REQUESTED",
          "body": "The trust model content is good, but I don't think we should restrict this to \"https\" only. ",
          "createdAt": "2022-07-27T18:26:51Z",
          "updatedAt": "2022-07-27T18:27:19Z",
          "comments": [
            {
              "originalPosition": 20,
              "body": "```suggestion\r\n```\r\nI don't think we should restrict OHTTP in this way. It's like saying clients MUST NOT use \"http\" in the first place (if they weren't using OHTTP). The protocol still has benefits for clients even in the event that the target resource is only accessible over HTTP. ",
              "createdAt": "2022-07-27T18:26:51Z",
              "updatedAt": "2022-07-27T18:27:19Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOE6fLGM4-2C-d",
          "commit": {
            "abbreviatedOid": "36c2eeb"
          },
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-07-28T15:39:35Z",
          "updatedAt": "2022-07-28T15:39:36Z",
          "comments": [
            {
              "originalPosition": 20,
              "body": "I think that this is important.  Do you have some scenario in mind where this would be a problem?  Because I can easily see how sending requests (and responses) without integrity or confidentiality would be bad, but I can't see how it might be could be useful.",
              "createdAt": "2022-07-28T15:39:36Z",
              "updatedAt": "2022-07-28T15:39:36Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOE6fLGM4-2FOI",
          "commit": {
            "abbreviatedOid": "36c2eeb"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-07-28T15:45:52Z",
          "updatedAt": "2022-07-28T15:45:53Z",
          "comments": [
            {
              "originalPosition": 20,
              "body": "An example would be a client that wants to fetch an \"http\" resource. How is this materially different from accessing \"http\" resources without OHTTP? I don't think it is, and therefore this constraint seems unnecessarily restrictive, and is similar to requiring CONNECT only be used to access \"https\" resources. OHTTP is useful for _privacy_, not for response confidentiality.",
              "createdAt": "2022-07-28T15:45:53Z",
              "updatedAt": "2022-07-28T15:47:15Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOE6fLGM4-2FlQ",
          "commit": {
            "abbreviatedOid": "36c2eeb"
          },
          "author": "tfpauly",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-07-28T15:46:52Z",
          "updatedAt": "2022-07-28T15:46:53Z",
          "comments": [
            {
              "originalPosition": 20,
              "body": "@chris-wood I think this is OK to restrict in this way. Do we have any cases of unencrypted HTTP servers that need to be accessible over OHTTP?\r\n\r\nIn general, the gateway needs to be tightly associated with the target, not just some random server, since the HPKE key config effectively stands in for the TLS authentication and encryption that otherwise would occur to the target.\r\n\r\nIf the connection between the gateway and the target is something that traverses an open network, people could look at and modify the content. This might be OK if the client's only goal is the server not learning the client IP address, but the client would then need to be very very careful about what data this is. Writing the text to guide clients sounds hard, and doesn't seem to provide much benefit?",
              "createdAt": "2022-07-28T15:46:52Z",
              "updatedAt": "2022-07-28T15:46:53Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOE6fLGM4-2I2b",
          "commit": {
            "abbreviatedOid": "36c2eeb"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-07-28T15:56:09Z",
          "updatedAt": "2022-07-28T15:56:09Z",
          "comments": [
            {
              "originalPosition": 20,
              "body": "For what it's worth, I would be comfortable with a \"SHOULD NOT,\" but I am not OK with \"MUST NOT.\"",
              "createdAt": "2022-07-28T15:56:09Z",
              "updatedAt": "2022-07-28T15:56:09Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOE6fLGM4-2L-O",
          "commit": {
            "abbreviatedOid": "36c2eeb"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-07-28T16:05:15Z",
          "updatedAt": "2022-07-28T16:05:15Z",
          "comments": [
            {
              "originalPosition": 20,
              "body": "> In general, the gateway needs to be tightly associated with the target, not just some random server, since the HPKE key config effectively stands in for the TLS authentication and encryption that otherwise would occur to the target.\r\n\r\nThis is not the security model for OHTTP. The target can be _any_ type of resource for OHTTP to work as intended (hide the client IP address). \r\n\r\nOHTTP cannot provide the same authenticity guarantees as end-to-end TLS to the target, even with this constraint and under the assumption that the gateway is acting honestly. At the end of the day, end-to-end TLS between the target is a two party protocol between client and target. OHTTP with this constraint is still effectively a three-party protocol between client<>gateway<>target, which is fundamentally different. \r\n\r\nSaying it's not different basically amounts to saying that the gateway is an extension of the client, doing fetches on its behalf. And in that case, the gateway ought to be constrained (or not) the same way the client is constrained (or not) in its interaction with the target directly. In other words, if the target is only accessible over \"http\", then that should not influence how the client or the gateway directly interact with it. \r\n\r\nI'm OK changing this security model, but let's be clear about what OHTTP is and is not in its current form. The restriction proposed is not simply a clarification.",
              "createdAt": "2022-07-28T16:05:15Z",
              "updatedAt": "2022-07-28T17:18:10Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOE6fLGM4-2Moq",
          "commit": {
            "abbreviatedOid": "36c2eeb"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-07-28T16:07:12Z",
          "updatedAt": "2022-07-28T16:07:13Z",
          "comments": [
            {
              "originalPosition": 20,
              "body": "```suggestion\r\nNonsecure requests - such those with the \"http\" scheme as opposed to the \"https\"\r\nscheme - SHOULD NOT be used if the Oblivious Gateway and Target Resources are\r\noperated by different entities as that would expose both requests and response\r\nto modification or inspection by a network attacker.\r\n```",
              "createdAt": "2022-07-28T16:07:12Z",
              "updatedAt": "2022-07-28T16:07:13Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOE6fLGM4-2cOr",
          "commit": {
            "abbreviatedOid": "36c2eeb"
          },
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-07-28T16:56:47Z",
          "updatedAt": "2022-07-28T16:56:47Z",
          "comments": [
            {
              "originalPosition": 20,
              "body": "I just realized that maybe OHTTP could be used for CRL fetching, which a MUST NOT would exclude.  I'd still prefer something stronger, but I can live with this.",
              "createdAt": "2022-07-28T16:56:47Z",
              "updatedAt": "2022-07-28T16:56:47Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOE6fLGM4-2iQx",
          "commit": {
            "abbreviatedOid": "36c2eeb"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-07-28T17:14:16Z",
          "updatedAt": "2022-07-28T17:14:16Z",
          "comments": [
            {
              "originalPosition": 20,
              "body": "> If the connection between the gateway and the target is something that traverses an open network, people could look at and modify the content. This might be OK if the client's only goal is the server not learning the client IP address, but the client would then need to be very very careful about what data this is. Writing the text to guide clients sounds hard, and doesn't seem to provide much benefit?\r\n\r\nI think this is why a SHOULD NOT works here. Clients that don't follow the guidance risk sending plaintext application data exposed to a network, which is no different from sending plaintext application data over a network if they were not using OHTTP, with one exception: use of OHTTP changes where the attacker has access to that plaintext data. ",
              "createdAt": "2022-07-28T17:14:16Z",
              "updatedAt": "2022-07-28T17:14:16Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOE6fLGM4-2jr6",
          "commit": {
            "abbreviatedOid": "36c2eeb"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-07-28T17:19:19Z",
          "updatedAt": "2022-07-28T17:19:19Z",
          "comments": [
            {
              "originalPosition": 20,
              "body": "Bingo! Also, OCSP queries.",
              "createdAt": "2022-07-28T17:19:19Z",
              "updatedAt": "2022-07-28T17:19:29Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOE6fLGM4-2j3C",
          "commit": {
            "abbreviatedOid": "36c2eeb"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-07-28T17:19:55Z",
          "updatedAt": "2022-07-28T17:19:56Z",
          "comments": [
            {
              "originalPosition": 20,
              "body": "Citing CRL and OCSP queries as examples where the SHOULD is not followed seems like a good thing to do.",
              "createdAt": "2022-07-28T17:19:56Z",
              "updatedAt": "2022-07-28T17:19:56Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOE6fLGM4_A4uD",
          "commit": {
            "abbreviatedOid": "42611ee"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2022-08-01T12:13:23Z",
          "updatedAt": "2022-08-01T12:13:23Z",
          "comments": []
        }
      ]
    },
    {
      "number": 146,
      "id": "PR_kwDOE6fLGM48bw-z",
      "title": "Address relay traffic analysis",
      "url": "https://github.com/ietf-wg-ohai/oblivious-http/pull/146",
      "state": "MERGED",
      "author": "chris-wood",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Closes #144.",
      "createdAt": "2022-08-01T13:55:49Z",
      "updatedAt": "2022-08-02T08:10:50Z",
      "baseRepository": "ietf-wg-ohai/oblivious-http",
      "baseRefName": "main",
      "baseRefOid": "eb044ff9891ac84027c01ba95042038b86ac6880",
      "headRepository": "ietf-wg-ohai/oblivious-http",
      "headRefName": "caw/relay-ta",
      "headRefOid": "39cd03414597419dc7180d4f27af0e8e6e8fae75",
      "closedAt": "2022-08-02T08:10:49Z",
      "mergedAt": "2022-08-02T08:10:49Z",
      "mergedBy": "chris-wood",
      "mergeCommit": {
        "oid": "f1e2ff214561e7611241427663fdd8cf6eba3fbe"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOE6fLGM4_BuzW",
          "commit": {
            "abbreviatedOid": "7f37a81"
          },
          "author": "tfpauly",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2022-08-01T14:40:46Z",
          "updatedAt": "2022-08-01T14:40:46Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOE6fLGM4_D6xM",
          "commit": {
            "abbreviatedOid": "7f37a81"
          },
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "LGTM.  Spelling out names in full is a pain, but probably worthwhile.",
          "createdAt": "2022-08-02T00:41:31Z",
          "updatedAt": "2022-08-02T00:44:25Z",
          "comments": [
            {
              "originalPosition": 12,
              "body": "```suggestion\r\nOblivious Relay Resource, and Oblivious Gateway Resource is protected by HTTPS.  This protects information about which\r\n```",
              "createdAt": "2022-08-02T00:41:31Z",
              "updatedAt": "2022-08-02T00:44:25Z"
            },
            {
              "originalPosition": 33,
              "body": "```suggestion\r\nTraffic analysis is not restricted to network observers. A malicious Oblivious Relay Resource could\r\n```",
              "createdAt": "2022-08-02T00:42:48Z",
              "updatedAt": "2022-08-02T00:44:25Z"
            },
            {
              "originalPosition": 35,
              "body": "```suggestion\r\nand responses relayed between clients and gateways. An Oblivious Relay Resource terminates\r\n```",
              "createdAt": "2022-08-02T00:43:11Z",
              "updatedAt": "2022-08-02T00:44:26Z"
            },
            {
              "originalPosition": 36,
              "body": "```suggestion\r\nTLS connections from clients, so they see message boundaries. This privileged\r\n```",
              "createdAt": "2022-08-02T00:43:19Z",
              "updatedAt": "2022-08-02T00:44:26Z"
            }
          ]
        }
      ]
    },
    {
      "number": 147,
      "id": "PR_kwDOE6fLGM48b0qX",
      "title": "More differential treatment",
      "url": "https://github.com/ietf-wg-ohai/oblivious-http/pull/147",
      "state": "MERGED",
      "author": "chris-wood",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Closes #139 ",
      "createdAt": "2022-08-01T14:07:06Z",
      "updatedAt": "2022-08-02T08:14:06Z",
      "baseRepository": "ietf-wg-ohai/oblivious-http",
      "baseRefName": "main",
      "baseRefOid": "eb044ff9891ac84027c01ba95042038b86ac6880",
      "headRepository": "ietf-wg-ohai/oblivious-http",
      "headRefName": "caw/more-diff-treatment",
      "headRefOid": "1e8854fea97bcba40d0edac9b1b90e0bc69935eb",
      "closedAt": "2022-08-02T08:14:05Z",
      "mergedAt": "2022-08-02T08:14:05Z",
      "mergedBy": "chris-wood",
      "mergeCommit": {
        "oid": "9b1a27423ed0ee9c7924cfe34553234b4492a487"
      },
      "comments": [
        {
          "author": "ShivanKaul",
          "authorAssociation": "CONTRIBUTOR",
          "body": "This seems fine to me, but doesn't seem to include https://github.com/ietf-wg-ohai/oblivious-http/issues/139#issuecomment-1194108521?",
          "createdAt": "2022-08-01T21:54:48Z",
          "updatedAt": "2022-08-01T21:54:48Z"
        },
        {
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "body": "@ShivanKaul after trying to work that text in it became clear (to me) that a better outcome was modify the existing text we have about anonymity set reduction. So I went with that approach rather than open the can of consistency worms that @martinthomson alluded to.",
          "createdAt": "2022-08-01T22:46:19Z",
          "updatedAt": "2022-08-01T22:46:19Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOE6fLGM4_BucU",
          "commit": {
            "abbreviatedOid": "5c9073f"
          },
          "author": "tfpauly",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-08-01T14:39:47Z",
          "updatedAt": "2022-08-01T14:39:48Z",
          "comments": [
            {
              "originalPosition": 21,
              "body": "```suggestion\r\ndesign - lead to client deanonymization.\r\n```",
              "createdAt": "2022-08-01T14:39:48Z",
              "updatedAt": "2022-08-01T14:39:48Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOE6fLGM4_D7RC",
          "commit": {
            "abbreviatedOid": "1e8854f"
          },
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2022-08-02T00:46:02Z",
          "updatedAt": "2022-08-02T00:46:34Z",
          "comments": [
            {
              "originalPosition": 7,
              "body": "```suggestion\r\nwhat is already revealed in the content of a request - can reduce\r\n```",
              "createdAt": "2022-08-02T00:46:02Z",
              "updatedAt": "2022-08-02T00:46:34Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOE6fLGM4_EId0",
          "commit": {
            "abbreviatedOid": "1e8854f"
          },
          "author": "ShivanKaul",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2022-08-02T02:34:44Z",
          "updatedAt": "2022-08-02T02:34:44Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOE6fLGM4_FIhE",
          "commit": {
            "abbreviatedOid": "1e8854f"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-08-02T08:14:02Z",
          "updatedAt": "2022-08-02T08:14:02Z",
          "comments": [
            {
              "originalPosition": 7,
              "body": "I think we ought to keep this as is, since the motivating reason for this change was that the config used to encapsulate a request can partition the client anonymity set. ",
              "createdAt": "2022-08-02T08:14:02Z",
              "updatedAt": "2022-08-02T08:14:02Z"
            }
          ]
        }
      ]
    },
    {
      "number": 148,
      "id": "PR_kwDOE6fLGM48b3Xt",
      "title": "Add text about consistency and privacy reduction",
      "url": "https://github.com/ietf-wg-ohai/oblivious-http/pull/148",
      "state": "MERGED",
      "author": "chris-wood",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Closes #145.",
      "createdAt": "2022-08-01T14:15:03Z",
      "updatedAt": "2022-08-02T08:13:26Z",
      "baseRepository": "ietf-wg-ohai/oblivious-http",
      "baseRefName": "main",
      "baseRefOid": "eb044ff9891ac84027c01ba95042038b86ac6880",
      "headRepository": "ietf-wg-ohai/oblivious-http",
      "headRefName": "caw/consistency-text",
      "headRefOid": "dcd345f910d7f402197931321f000e88130a3e3e",
      "closedAt": "2022-08-02T08:13:25Z",
      "mergedAt": "2022-08-02T08:13:25Z",
      "mergedBy": "chris-wood",
      "mergeCommit": {
        "oid": "2ad8f815b9e9a7ce2132a8b2f983455ff6398ba2"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOE6fLGM4_BuKl",
          "commit": {
            "abbreviatedOid": "da928b9"
          },
          "author": "tfpauly",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2022-08-01T14:39:04Z",
          "updatedAt": "2022-08-01T14:39:04Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOE6fLGM4_D7Yx",
          "commit": {
            "abbreviatedOid": "da928b9"
          },
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2022-08-02T00:47:07Z",
          "updatedAt": "2022-08-02T00:52:11Z",
          "comments": [
            {
              "originalPosition": 16,
              "body": "```suggestion\r\nidentity of the Oblivious Gateway Resource. We refer to this set of information as the gateway's\r\n```",
              "createdAt": "2022-08-02T00:47:07Z",
              "updatedAt": "2022-08-02T00:52:11Z"
            },
            {
              "originalPosition": 16,
              "body": "Or\r\n```suggestion\r\nURI of the Oblivious Gateway Resource. We refer to this set of information as the gateway's\r\n```",
              "createdAt": "2022-08-02T00:47:27Z",
              "updatedAt": "2022-08-02T00:52:11Z"
            },
            {
              "originalPosition": 30,
              "body": "```suggestion\r\nanonymity sets consisting of clients that used one configuration and clients that used\r\nthe other configuration. If the size of each set is large enough, this may not be\r\na significant loss of privacy in practice. Ensuring that many clients share\r\na configuration is necessary to provide privacy for clients.\r\n```",
              "createdAt": "2022-08-02T00:50:35Z",
              "updatedAt": "2022-08-02T00:52:11Z"
            },
            {
              "originalPosition": 34,
              "body": "```suggestion\r\nspecification. Applications using this design MUST provide accommodations to mitigate tracking\r\n```",
              "createdAt": "2022-08-02T00:51:29Z",
              "updatedAt": "2022-08-02T00:52:11Z"
            },
            {
              "originalPosition": 37,
              "body": "```suggestion\r\nusing gateway configurations. {{?CONSISTENCY=I-D.wood-key-consistency}} provides\r\noptions for ensuring that configurations are consistent between clients.\r\n```",
              "createdAt": "2022-08-02T00:52:05Z",
              "updatedAt": "2022-08-02T00:52:11Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOE6fLGM4_FHxG",
          "commit": {
            "abbreviatedOid": "da928b9"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-08-02T08:11:48Z",
          "updatedAt": "2022-08-02T08:11:48Z",
          "comments": [
            {
              "originalPosition": 16,
              "body": "Right, I just left identity and URI out so it generally refers to \"the resource.\" I'm OK with URI though.",
              "createdAt": "2022-08-02T08:11:48Z",
              "updatedAt": "2022-08-02T08:11:48Z"
            }
          ]
        }
      ]
    },
    {
      "number": 150,
      "id": "PR_kwDOE6fLGM48eDuv",
      "title": "Move media type registrations to the bottom",
      "url": "https://github.com/ietf-wg-ohai/oblivious-http/pull/150",
      "state": "MERGED",
      "author": "martinthomson",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "I already wrote this up, so maybe it's OK to do now.\r\n\r\nCloses #135.",
      "createdAt": "2022-08-02T01:24:08Z",
      "updatedAt": "2022-08-02T08:15:37Z",
      "baseRepository": "ietf-wg-ohai/oblivious-http",
      "baseRefName": "main",
      "baseRefOid": "eb044ff9891ac84027c01ba95042038b86ac6880",
      "headRepository": "ietf-wg-ohai/oblivious-http",
      "headRefName": "move-media-iana",
      "headRefOid": "e17bb57a26ab4d1cd2520e8238ef4fff60981829",
      "closedAt": "2022-08-02T08:15:36Z",
      "mergedAt": "2022-08-02T08:15:36Z",
      "mergedBy": "chris-wood",
      "mergeCommit": {
        "oid": "9d1501d961c9a324108ea40a852fa5bdfdbdbd6e"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOE6fLGM4_FJBO",
          "commit": {
            "abbreviatedOid": "e17bb57"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2022-08-02T08:15:32Z",
          "updatedAt": "2022-08-02T08:15:32Z",
          "comments": []
        }
      ]
    },
    {
      "number": 151,
      "id": "PR_kwDOE6fLGM48fp4S",
      "title": "Rewrite privacy text",
      "url": "https://github.com/ietf-wg-ohai/oblivious-http/pull/151",
      "state": "MERGED",
      "author": "martinthomson",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "I was just going to add something about correlating requests based on\r\ntheir content, but then it seemed like the text was duplicated some.\r\n\r\nHere is my attempt at making this better.  I also expanded the notion of\r\n\"configuration\" to include the identity of the relay.  That made it a\r\nlittle tricky - we really do want diversity of relays - but it makes\r\nmore sense to talk about minimum anonymity set size rather than to imply\r\nthat there can be a single configuration, because that is unrealistic.\r\n\r\nCloses #149.",
      "createdAt": "2022-08-02T10:31:11Z",
      "updatedAt": "2022-08-03T01:44:20Z",
      "baseRepository": "ietf-wg-ohai/oblivious-http",
      "baseRefName": "main",
      "baseRefOid": "9d1501d961c9a324108ea40a852fa5bdfdbdbd6e",
      "headRepository": "ietf-wg-ohai/oblivious-http",
      "headRefName": "request-privacy",
      "headRefOid": "9b3c8d25ea86ed2aff6742eceab968b8d6d58ef6",
      "closedAt": "2022-08-03T01:44:20Z",
      "mergedAt": "2022-08-03T01:44:20Z",
      "mergedBy": "martinthomson",
      "mergeCommit": {
        "oid": "5033cd92d36176cea84d96a8ffbbef2df04978c0"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOE6fLGM4_GbFc",
          "commit": {
            "abbreviatedOid": "4829e73"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2022-08-02T12:07:20Z",
          "updatedAt": "2022-08-02T12:15:01Z",
          "comments": [
            {
              "originalPosition": 48,
              "body": "```suggestion\r\nResource URI, the Oblivious Gateway key configuration (KeyConfig), and Oblivious Gateway\r\n```",
              "createdAt": "2022-08-02T12:07:20Z",
              "updatedAt": "2022-08-02T12:15:01Z"
            },
            {
              "originalPosition": 48,
              "body": "... since it includes both public key and key ID",
              "createdAt": "2022-08-02T12:09:04Z",
              "updatedAt": "2022-08-02T12:15:02Z"
            },
            {
              "originalPosition": 49,
              "body": "```suggestion\r\nResource URI. A configuration is active if clients can successfully use it for interacting with with a target.\r\n```",
              "createdAt": "2022-08-02T12:10:37Z",
              "updatedAt": "2022-08-02T12:15:01Z"
            },
            {
              "originalPosition": 52,
              "body": "```suggestion\r\nconfiguration by matching `KeyConfig.key\\_id` or the Oblivious Gateway\r\n```",
              "createdAt": "2022-08-02T12:11:09Z",
              "updatedAt": "2022-08-02T12:15:02Z"
            },
            {
              "originalPosition": 60,
              "body": "```suggestion\r\nEach active client configuration partitions the client anonymity set. In practice,\r\nit is infeasible to reduce the number of active configurations to one. Enabling diversity in choice of\r\n```",
              "createdAt": "2022-08-02T12:13:42Z",
              "updatedAt": "2022-08-02T12:15:02Z"
            },
            {
              "originalPosition": 65,
              "body": "```suggestion\r\nClient privacy depends on having each configuration used by many other clients.\r\n```",
              "createdAt": "2022-08-02T12:14:12Z",
              "updatedAt": "2022-08-02T12:15:02Z"
            }
          ]
        }
      ]
    },
    {
      "number": 152,
      "id": "PR_kwDOE6fLGM48uRh-",
      "title": "Request encapsulation pseudocode fix.",
      "url": "https://github.com/ietf-wg-ohai/oblivious-http/pull/152",
      "state": "MERGED",
      "author": "bjschnei",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Pass `info` to SetupBasS.",
      "createdAt": "2022-08-05T14:40:43Z",
      "updatedAt": "2022-08-06T04:26:19Z",
      "baseRepository": "ietf-wg-ohai/oblivious-http",
      "baseRefName": "main",
      "baseRefOid": "5033cd92d36176cea84d96a8ffbbef2df04978c0",
      "headRepository": "bjschnei/oblivious-http",
      "headRefName": "patch-1",
      "headRefOid": "9c341d6c479e298b3ca8bafb995971fda27d79b8",
      "closedAt": "2022-08-06T04:26:19Z",
      "mergedAt": "2022-08-06T04:26:19Z",
      "mergedBy": "martinthomson",
      "mergeCommit": {
        "oid": "f7f5f1e46e3660549a95c190795fd229b95b5f61"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOE6fLGM4_b3LO",
          "commit": {
            "abbreviatedOid": "9c341d6"
          },
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2022-08-06T04:26:00Z",
          "updatedAt": "2022-08-06T04:26:00Z",
          "comments": []
        }
      ]
    },
    {
      "number": 153,
      "id": "PR_kwDOE6fLGM48x--u",
      "title": "Rework the intro/abstract a bit",
      "url": "https://github.com/ietf-wg-ohai/oblivious-http/pull/153",
      "state": "MERGED",
      "author": "mnot",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "I found this helpful, do with it what you will.",
      "createdAt": "2022-08-08T02:37:24Z",
      "updatedAt": "2022-08-08T11:48:33Z",
      "baseRepository": "ietf-wg-ohai/oblivious-http",
      "baseRefName": "main",
      "baseRefOid": "f7f5f1e46e3660549a95c190795fd229b95b5f61",
      "headRepository": "mnot/oblivious-http",
      "headRefName": "mnot/editorial",
      "headRefOid": "b958101cf30442d255e9cb6f2cb34c96ccc4fac6",
      "closedAt": "2022-08-08T11:48:33Z",
      "mergedAt": "2022-08-08T11:48:33Z",
      "mergedBy": "chris-wood",
      "mergeCommit": {
        "oid": "9e1464679070b8c39ff042e5570ae059232a2e08"
      },
      "comments": [
        {
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "body": "I'll merge and fix lints afterwards.",
          "createdAt": "2022-08-08T11:48:29Z",
          "updatedAt": "2022-08-08T11:48:29Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOE6fLGM4_c7X0",
          "commit": {
            "abbreviatedOid": "e70de76"
          },
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "LGTM.  Thanks Mark.",
          "createdAt": "2022-08-08T03:05:48Z",
          "updatedAt": "2022-08-08T03:07:35Z",
          "comments": [
            {
              "originalPosition": 58,
              "body": "```suggestion\r\nthe ability to correlate requests that share a connection.\r\n```",
              "createdAt": "2022-08-08T03:05:49Z",
              "updatedAt": "2022-08-08T03:07:35Z"
            },
            {
              "originalPosition": 80,
              "body": "```suggestion\r\nOblivious Relay Resource (see {{security}}), clients are assured that requests are not uniquely\r\n```",
              "createdAt": "2022-08-08T03:07:23Z",
              "updatedAt": "2022-08-08T03:07:35Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOE6fLGM4_e0-v",
          "commit": {
            "abbreviatedOid": "b958101"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2022-08-08T11:47:10Z",
          "updatedAt": "2022-08-08T11:47:10Z",
          "comments": []
        }
      ]
    },
    {
      "number": 154,
      "id": "PR_kwDOE6fLGM482ZzF",
      "title": "_An_ HTTP",
      "url": "https://github.com/ietf-wg-ohai/oblivious-http/pull/154",
      "state": "MERGED",
      "author": "LPardue",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "error on first character of spec body. Made my day",
      "createdAt": "2022-08-09T00:20:57Z",
      "updatedAt": "2022-08-09T05:53:25Z",
      "baseRepository": "ietf-wg-ohai/oblivious-http",
      "baseRefName": "main",
      "baseRefOid": "04fe48b5d9d0c367149b8a708eaff72d8567e4ab",
      "headRepository": "LPardue/oblivious-http",
      "headRefName": "patch-1",
      "headRefOid": "4b70833785b8b786d3fcb5c5a5cd14e46483ab1f",
      "closedAt": "2022-08-09T05:53:25Z",
      "mergedAt": "2022-08-09T05:53:24Z",
      "mergedBy": "martinthomson",
      "mergeCommit": {
        "oid": "37d38ca8519da987de491f66e80dd1074cdd3f1e"
      },
      "comments": [
        {
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "body": "Technically the second character...  \ud83d\ude1c",
          "createdAt": "2022-08-09T05:53:21Z",
          "updatedAt": "2022-08-09T05:53:21Z"
        }
      ],
      "reviews": []
    },
    {
      "number": 165,
      "id": "PR_kwDOE6fLGM4828Dq",
      "title": "Mandate HTTPS",
      "url": "https://github.com/ietf-wg-ohai/oblivious-http/pull/165",
      "state": "MERGED",
      "author": "martinthomson",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "The text noted in #155 was correct, but we didn't have a single place where we outlined this as a direct requirement.\r\n\r\nThe day where HTTP presupposes TLS has come for some, but not all of us.  Until then, we can be more careful.\r\n\r\n\r\nCloses #155.",
      "createdAt": "2022-08-09T04:47:57Z",
      "updatedAt": "2022-08-09T13:00:28Z",
      "baseRepository": "ietf-wg-ohai/oblivious-http",
      "baseRefName": "main",
      "baseRefOid": "04fe48b5d9d0c367149b8a708eaff72d8567e4ab",
      "headRepository": "martinthomson/oblivious-http",
      "headRefName": "https-comprehensive",
      "headRefOid": "15d2de6d42b83f53cfbb47bdad4efebf82cf3f3b",
      "closedAt": "2022-08-09T13:00:28Z",
      "mergedAt": "2022-08-09T13:00:28Z",
      "mergedBy": "chris-wood",
      "mergeCommit": {
        "oid": "ca6d643b11eaa3de034c41f45e3689d24503985c"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOE6fLGM4_kvTH",
          "commit": {
            "abbreviatedOid": "15d2de6"
          },
          "author": "LPardue",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2022-08-09T11:59:54Z",
          "updatedAt": "2022-08-09T11:59:54Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOE6fLGM4_lD_p",
          "commit": {
            "abbreviatedOid": "15d2de6"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-08-09T13:00:21Z",
          "updatedAt": "2022-08-09T13:00:21Z",
          "comments": [
            {
              "originalPosition": 6,
              "body": "In case it's helpful, the analysis showed that HTTPS is only needed between client and relay to achieve this property. But we're mandating it on both sides because it's just good practice.",
              "createdAt": "2022-08-09T13:00:21Z",
              "updatedAt": "2022-08-09T13:00:21Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOE6fLGM4_lEAv",
          "commit": {
            "abbreviatedOid": "15d2de6"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2022-08-09T13:00:24Z",
          "updatedAt": "2022-08-09T13:00:24Z",
          "comments": []
        }
      ]
    },
    {
      "number": 166,
      "id": "PR_kwDOE6fLGM4828gb",
      "title": "Fixup some \"request[s] of\" language",
      "url": "https://github.com/ietf-wg-ohai/oblivious-http/pull/166",
      "state": "MERGED",
      "author": "martinthomson",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Most of the text was correct in that we talk about making a request of a\r\nresource.  Where the text refers to making requests of a server, those\r\nusages seem to be correct.\r\n\r\nCloses #156.",
      "createdAt": "2022-08-09T04:51:08Z",
      "updatedAt": "2022-08-09T13:06:04Z",
      "baseRepository": "ietf-wg-ohai/oblivious-http",
      "baseRefName": "main",
      "baseRefOid": "7e7b670d140fc8e58d57da3ea40ec46f04d71d4f",
      "headRepository": "martinthomson/oblivious-http",
      "headRefName": "request-of",
      "headRefOid": "a9c492da2787b0704fe5d5130e698549c38ef467",
      "closedAt": "2022-08-09T13:06:03Z",
      "mergedAt": "2022-08-09T13:06:03Z",
      "mergedBy": "chris-wood",
      "mergeCommit": {
        "oid": "858a6f8a58c6c65960af6f4529876bc6bfac640c"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOE6fLGM4_kv0Q",
          "commit": {
            "abbreviatedOid": "d2bb3ed"
          },
          "author": "LPardue",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2022-08-09T12:01:36Z",
          "updatedAt": "2022-08-09T12:01:36Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOE6fLGM4_lFkj",
          "commit": {
            "abbreviatedOid": "d2bb3ed"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2022-08-09T13:04:25Z",
          "updatedAt": "2022-08-09T13:04:25Z",
          "comments": []
        }
      ]
    },
    {
      "number": 167,
      "id": "PR_kwDOE6fLGM48281u",
      "title": "Swap last two paragraphs of HTTP usage",
      "url": "https://github.com/ietf-wg-ohai/oblivious-http/pull/167",
      "state": "MERGED",
      "author": "martinthomson",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Closes #157.",
      "createdAt": "2022-08-09T04:53:43Z",
      "updatedAt": "2022-08-09T13:03:34Z",
      "baseRepository": "ietf-wg-ohai/oblivious-http",
      "baseRefName": "main",
      "baseRefOid": "d367e487b1a8baadb60d729fb5718696ca29353d",
      "headRepository": "martinthomson/oblivious-http",
      "headRefName": "http-usage-order",
      "headRefOid": "d98b4359e590098b09a7dc9ac096133ea149689b",
      "closedAt": "2022-08-09T13:03:34Z",
      "mergedAt": "2022-08-09T13:03:34Z",
      "mergedBy": "chris-wood",
      "mergeCommit": {
        "oid": "7e7b670d140fc8e58d57da3ea40ec46f04d71d4f"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOE6fLGM4_kv9W",
          "commit": {
            "abbreviatedOid": "ed5cfdc"
          },
          "author": "LPardue",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2022-08-09T12:02:06Z",
          "updatedAt": "2022-08-09T12:02:06Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOE6fLGM4_lEt4",
          "commit": {
            "abbreviatedOid": "ed5cfdc"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2022-08-09T13:02:16Z",
          "updatedAt": "2022-08-09T13:02:16Z",
          "comments": []
        }
      ]
    },
    {
      "number": 168,
      "id": "PR_kwDOE6fLGM482-rT",
      "title": "Define HPKE-dependent pieces correctly",
      "url": "https://github.com/ietf-wg-ohai/oblivious-http/pull/168",
      "state": "MERGED",
      "author": "martinthomson",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Closes #158.",
      "createdAt": "2022-08-09T05:06:10Z",
      "updatedAt": "2022-08-11T00:12:01Z",
      "baseRepository": "ietf-wg-ohai/oblivious-http",
      "baseRefName": "main",
      "baseRefOid": "04fe48b5d9d0c367149b8a708eaff72d8567e4ab",
      "headRepository": "martinthomson/oblivious-http",
      "headRefName": "hpkekdfid",
      "headRefOid": "2fb7b11dc6653ebf1f726a8aec6ed26d23a1b9d1",
      "closedAt": "2022-08-11T00:11:58Z",
      "mergedAt": "2022-08-11T00:11:58Z",
      "mergedBy": "martinthomson",
      "mergeCommit": {
        "oid": "573dd523668f32ba358997f89de12c3050dc0bc3"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOE6fLGM4_kzoG",
          "commit": {
            "abbreviatedOid": "8a278a5"
          },
          "author": "LPardue",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "This addresses the issue I created, thanks.\r\n\r\nI can't vouch for the correctness of the crypto pieces though",
          "createdAt": "2022-08-09T12:13:50Z",
          "updatedAt": "2022-08-09T12:13:50Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOE6fLGM4_k2i9",
          "commit": {
            "abbreviatedOid": "8a278a5"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "Approved pending changes. Thanks @LPardue!",
          "createdAt": "2022-08-09T12:22:23Z",
          "updatedAt": "2022-08-09T12:24:56Z",
          "comments": [
            {
              "originalPosition": 40,
              "body": "```suggestion\nnonce and key respectively, in bytes.  The Encapsulated Response nonce length is set to the larger of\n```\n",
              "createdAt": "2022-08-09T12:22:23Z",
              "updatedAt": "2022-08-09T12:24:56Z"
            },
            {
              "originalPosition": 41,
              "body": "```suggestion\nthese two lengths, i.e., max(Nn, Nk).\n```\n",
              "createdAt": "2022-08-09T12:24:35Z",
              "updatedAt": "2022-08-09T12:24:56Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOE6fLGM4_k3kJ",
          "commit": {
            "abbreviatedOid": "8a278a5"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-08-09T12:25:28Z",
          "updatedAt": "2022-08-09T12:25:36Z",
          "comments": [
            {
              "originalPosition": 28,
              "body": "```suggestion\n  Nonce (8 * max(Nn, Nk)),\n```\n",
              "createdAt": "2022-08-09T12:25:28Z",
              "updatedAt": "2022-08-09T12:25:36Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOE6fLGM4_oZX6",
          "commit": {
            "abbreviatedOid": "8a56901"
          },
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-08-10T01:42:34Z",
          "updatedAt": "2022-08-10T01:42:55Z",
          "comments": [
            {
              "originalPosition": 28,
              "body": "These are already defined in bits, so we don't need this change.",
              "createdAt": "2022-08-10T01:42:34Z",
              "updatedAt": "2022-08-10T01:42:55Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOE6fLGM4_p3T-",
          "commit": {
            "abbreviatedOid": "8a56901"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-08-10T09:09:06Z",
          "updatedAt": "2022-08-10T09:09:06Z",
          "comments": [
            {
              "originalPosition": 28,
              "body": "Nn and Nk are bytes, so this would yield the wrong number of bits here, wouldn't it? In other words, if `Nk = 16` and `Nn = 12`, then this would expand to:\r\n\r\n```\r\nNonce (max(16, 12)) = Nonce(16)\r\n```\r\n\r\nBut what I think we want is `Nonce(128)`, since the integer in the parentheses represents the number of bits. ",
              "createdAt": "2022-08-10T09:09:06Z",
              "updatedAt": "2022-08-10T12:56:15Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOE6fLGM4_uLLR",
          "commit": {
            "abbreviatedOid": "74de882"
          },
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-08-11T00:10:41Z",
          "updatedAt": "2022-08-11T00:11:42Z",
          "comments": [
            {
              "originalPosition": 41,
              "body": "```suggestion\r\nnonce and key respectively, in bytes.  The Encapsulated Response nonce length is\r\nset to the larger of these two lengths, i.e., max(Nn, Nk).\r\n```",
              "createdAt": "2022-08-11T00:10:41Z",
              "updatedAt": "2022-08-11T00:11:42Z"
            },
            {
              "originalPosition": 28,
              "body": "Sorry, you are right.  I should double check before making bad claims.",
              "createdAt": "2022-08-11T00:11:29Z",
              "updatedAt": "2022-08-11T00:11:42Z"
            }
          ]
        }
      ]
    },
    {
      "number": 169,
      "id": "PR_kwDOE6fLGM482_V9",
      "title": "Match prose and pseudocode for response encap",
      "url": "https://github.com/ietf-wg-ohai/oblivious-http/pull/169",
      "state": "MERGED",
      "author": "martinthomson",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Closes #159.",
      "createdAt": "2022-08-09T05:11:03Z",
      "updatedAt": "2022-08-09T13:01:57Z",
      "baseRepository": "ietf-wg-ohai/oblivious-http",
      "baseRefName": "main",
      "baseRefOid": "04fe48b5d9d0c367149b8a708eaff72d8567e4ab",
      "headRepository": "martinthomson/oblivious-http",
      "headRefName": "response-encap",
      "headRefOid": "d4edf0c94ef5c9a11e50bed57fd465439878be6c",
      "closedAt": "2022-08-09T13:01:56Z",
      "mergedAt": "2022-08-09T13:01:56Z",
      "mergedBy": "chris-wood",
      "mergeCommit": {
        "oid": "d367e487b1a8baadb60d729fb5718696ca29353d"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOE6fLGM4_k0ib",
          "commit": {
            "abbreviatedOid": "d4edf0c"
          },
          "author": "LPardue",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "LGTM",
          "createdAt": "2022-08-09T12:16:14Z",
          "updatedAt": "2022-08-09T12:16:14Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOE6fLGM4_lEkC",
          "commit": {
            "abbreviatedOid": "d4edf0c"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "Nice catch on s/request/response",
          "createdAt": "2022-08-09T13:01:52Z",
          "updatedAt": "2022-08-09T13:01:52Z",
          "comments": []
        }
      ]
    },
    {
      "number": 170,
      "id": "PR_kwDOE6fLGM483A4j",
      "title": "Don't prohibit cookies",
      "url": "https://github.com/ietf-wg-ohai/oblivious-http/pull/170",
      "state": "MERGED",
      "author": "martinthomson",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Not even once, down from two.\r\n\r\nUsing cookies is dumb, but we don't need to ban them so directly.  There\r\nare tons of ways in which information from a previous request might leak\r\nacross into the current one.  The point is to highlight the risk of\r\nusing them.\r\n\r\nA direct prohibition doesn't make sense if the use of the cookie is\r\nwell understood (not that attaining such an understanding is likely to\r\nbe easy).\r\n\r\nCloses #160.",
      "createdAt": "2022-08-09T05:22:54Z",
      "updatedAt": "2022-08-09T13:07:28Z",
      "baseRepository": "ietf-wg-ohai/oblivious-http",
      "baseRefName": "main",
      "baseRefOid": "04fe48b5d9d0c367149b8a708eaff72d8567e4ab",
      "headRepository": "martinthomson/oblivious-http",
      "headRefName": "no-cookies-we-really-mean-it",
      "headRefOid": "f135a2973fcf78cb6b8990d645a7cf0a9277f223",
      "closedAt": "2022-08-09T13:07:28Z",
      "mergedAt": "2022-08-09T13:07:28Z",
      "mergedBy": "chris-wood",
      "mergeCommit": {
        "oid": "ee68a7ceb7dfec1d49d06f4b5715cb526342928a"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOE6fLGM4_kwky",
          "commit": {
            "abbreviatedOid": "f135a29"
          },
          "author": "LPardue",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2022-08-09T12:04:08Z",
          "updatedAt": "2022-08-09T12:04:08Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOE6fLGM4_lGuG",
          "commit": {
            "abbreviatedOid": "f135a29"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "I'm OK with this relaxation. Clients who want to use OHTTP will presumably not do the dumb thing.",
          "createdAt": "2022-08-09T13:07:24Z",
          "updatedAt": "2022-08-09T13:07:24Z",
          "comments": []
        }
      ]
    },
    {
      "number": 171,
      "id": "PR_kwDOE6fLGM483BiJ",
      "title": "A bunch of the real usage requirements come later",
      "url": "https://github.com/ietf-wg-ohai/oblivious-http/pull/171",
      "state": "MERGED",
      "author": "martinthomson",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "So add some forward references.\r\n\r\nCloses #161.",
      "createdAt": "2022-08-09T05:27:47Z",
      "updatedAt": "2022-08-09T13:01:14Z",
      "baseRepository": "ietf-wg-ohai/oblivious-http",
      "baseRefName": "main",
      "baseRefOid": "04fe48b5d9d0c367149b8a708eaff72d8567e4ab",
      "headRepository": "martinthomson/oblivious-http",
      "headRefName": "responsibilities-is-usage",
      "headRefOid": "e14188311d9d7a8a002d9588390e4dabb4a4b8a0",
      "closedAt": "2022-08-09T13:01:14Z",
      "mergedAt": "2022-08-09T13:01:14Z",
      "mergedBy": "chris-wood",
      "mergeCommit": {
        "oid": "6b33d57619e1acaa4fbbea42a8cfa7e45ef6193b"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOE6fLGM4_kwwg",
          "commit": {
            "abbreviatedOid": "e141883"
          },
          "author": "LPardue",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2022-08-09T12:04:41Z",
          "updatedAt": "2022-08-09T12:04:41Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOE6fLGM4_lETC",
          "commit": {
            "abbreviatedOid": "e141883"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2022-08-09T13:01:10Z",
          "updatedAt": "2022-08-09T13:01:10Z",
          "comments": []
        }
      ]
    },
    {
      "number": 172,
      "id": "PR_kwDOE6fLGM483C-h",
      "title": "Remove bit about protection",
      "url": "https://github.com/ietf-wg-ohai/oblivious-http/pull/172",
      "state": "MERGED",
      "author": "martinthomson",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Especially when we already address this point a few paragraphs above and\r\nwe then directly contradict it in the next one.",
      "createdAt": "2022-08-09T05:38:06Z",
      "updatedAt": "2022-08-09T13:08:10Z",
      "baseRepository": "ietf-wg-ohai/oblivious-http",
      "baseRefName": "main",
      "baseRefOid": "04fe48b5d9d0c367149b8a708eaff72d8567e4ab",
      "headRepository": "martinthomson/oblivious-http",
      "headRefName": "remove-protection-contradiction",
      "headRefOid": "032dfe083d14017f7bfeb57895937647b3601d55",
      "closedAt": "2022-08-09T13:08:10Z",
      "mergedAt": "2022-08-09T13:08:10Z",
      "mergedBy": "chris-wood",
      "mergeCommit": {
        "oid": "50d8f2439f29448e37067151d666e204cf452527"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOE6fLGM4_lG_W",
          "commit": {
            "abbreviatedOid": "032dfe0"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2022-08-09T13:08:05Z",
          "updatedAt": "2022-08-09T13:08:05Z",
          "comments": []
        }
      ]
    },
    {
      "number": 173,
      "id": "PR_kwDOE6fLGM483D69",
      "title": "Fix HTTP/2 and /3 references",
      "url": "https://github.com/ietf-wg-ohai/oblivious-http/pull/173",
      "state": "MERGED",
      "author": "martinthomson",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "This would have been easier had I not forgotten how to do this.\r\n\r\nCloses #163.",
      "createdAt": "2022-08-09T05:44:34Z",
      "updatedAt": "2022-08-09T12:58:22Z",
      "baseRepository": "ietf-wg-ohai/oblivious-http",
      "baseRefName": "main",
      "baseRefOid": "04fe48b5d9d0c367149b8a708eaff72d8567e4ab",
      "headRepository": "martinthomson/oblivious-http",
      "headRefName": "http-refs",
      "headRefOid": "07c53ae33e56c4d0da4e92191d7884df9136841c",
      "closedAt": "2022-08-09T12:58:22Z",
      "mergedAt": "2022-08-09T12:58:22Z",
      "mergedBy": "chris-wood",
      "mergeCommit": {
        "oid": "abf52d9d24255861f4722a2a5c23c1625adebbd3"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOE6fLGM4_kxD0",
          "commit": {
            "abbreviatedOid": "07c53ae"
          },
          "author": "LPardue",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2022-08-09T12:05:39Z",
          "updatedAt": "2022-08-09T12:05:39Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOE6fLGM4_lDNa",
          "commit": {
            "abbreviatedOid": "07c53ae"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2022-08-09T12:58:18Z",
          "updatedAt": "2022-08-09T12:58:18Z",
          "comments": []
        }
      ]
    },
    {
      "number": 174,
      "id": "PR_kwDOE6fLGM483Eem",
      "title": "Add a heading for the date problem type registration",
      "url": "https://github.com/ietf-wg-ohai/oblivious-http/pull/174",
      "state": "MERGED",
      "author": "martinthomson",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "This was truly buried.  Let's not hide it.\r\n\r\nCloses #164.",
      "createdAt": "2022-08-09T05:48:13Z",
      "updatedAt": "2022-08-09T12:58:53Z",
      "baseRepository": "ietf-wg-ohai/oblivious-http",
      "baseRefName": "main",
      "baseRefOid": "04fe48b5d9d0c367149b8a708eaff72d8567e4ab",
      "headRepository": "martinthomson/oblivious-http",
      "headRefName": "date-problem-iana-heading",
      "headRefOid": "88d89070212c69fa6f373f307bc1b43795e6ce1a",
      "closedAt": "2022-08-09T12:58:53Z",
      "mergedAt": "2022-08-09T12:58:53Z",
      "mergedBy": "chris-wood",
      "mergeCommit": {
        "oid": "c837256c57e0f256c7a20173cd8e9cf57dda7d50"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOE6fLGM4_kyNO",
          "commit": {
            "abbreviatedOid": "88d8907"
          },
          "author": "LPardue",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2022-08-09T12:09:23Z",
          "updatedAt": "2022-08-09T12:09:23Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOE6fLGM4_lDZ_",
          "commit": {
            "abbreviatedOid": "88d8907"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2022-08-09T12:58:49Z",
          "updatedAt": "2022-08-09T12:58:49Z",
          "comments": []
        }
      ]
    },
    {
      "number": 175,
      "id": "PR_kwDOE6fLGM483Equ",
      "title": "Reword text about delays and traffic analysis",
      "url": "https://github.com/ietf-wg-ohai/oblivious-http/pull/175",
      "state": "MERGED",
      "author": "martinthomson",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Closes #162.",
      "createdAt": "2022-08-09T05:49:33Z",
      "updatedAt": "2022-08-09T13:00:55Z",
      "baseRepository": "ietf-wg-ohai/oblivious-http",
      "baseRefName": "main",
      "baseRefOid": "04fe48b5d9d0c367149b8a708eaff72d8567e4ab",
      "headRepository": "martinthomson/oblivious-http",
      "headRefName": "delay-protection",
      "headRefOid": "9f3b129f4b178ac56cd048c0e584dfad9b46b323",
      "closedAt": "2022-08-09T13:00:55Z",
      "mergedAt": "2022-08-09T13:00:55Z",
      "mergedBy": "chris-wood",
      "mergeCommit": {
        "oid": "f95e2098f14ed74ef1bc1e8fc729c673b5abc608"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOE6fLGM4_kygW",
          "commit": {
            "abbreviatedOid": "9f3b129"
          },
          "author": "LPardue",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "clearer, thanks",
          "createdAt": "2022-08-09T12:10:19Z",
          "updatedAt": "2022-08-09T12:10:19Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOE6fLGM4_lELk",
          "commit": {
            "abbreviatedOid": "9f3b129"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2022-08-09T13:00:51Z",
          "updatedAt": "2022-08-09T13:00:51Z",
          "comments": []
        }
      ]
    },
    {
      "number": 176,
      "id": "PR_kwDOE6fLGM483ErI",
      "title": "Remove a backslash",
      "url": "https://github.com/ietf-wg-ohai/oblivious-http/pull/176",
      "state": "MERGED",
      "author": "martinthomson",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2022-08-09T05:49:35Z",
      "updatedAt": "2022-08-09T12:57:59Z",
      "baseRepository": "ietf-wg-ohai/oblivious-http",
      "baseRefName": "main",
      "baseRefOid": "04fe48b5d9d0c367149b8a708eaff72d8567e4ab",
      "headRepository": "martinthomson/oblivious-http",
      "headRefName": "backslash_",
      "headRefOid": "1f7758b60b902de883a46224b8b50ca7475bbb50",
      "closedAt": "2022-08-09T12:57:59Z",
      "mergedAt": "2022-08-09T12:57:59Z",
      "mergedBy": "chris-wood",
      "mergeCommit": {
        "oid": "2273c578fbf9303946d7d61ca51648e1ea2217d2"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOE6fLGM4_lDEL",
          "commit": {
            "abbreviatedOid": "1f7758b"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2022-08-09T12:57:55Z",
          "updatedAt": "2022-08-09T12:57:55Z",
          "comments": []
        }
      ]
    },
    {
      "number": 177,
      "id": "PR_kwDOE6fLGM483Fid",
      "title": "Ack Lucas and Tommy",
      "url": "https://github.com/ietf-wg-ohai/oblivious-http/pull/177",
      "state": "MERGED",
      "author": "martinthomson",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "This wouldn't have been anywhere near as good without their input.",
      "createdAt": "2022-08-09T05:56:04Z",
      "updatedAt": "2022-08-09T12:57:45Z",
      "baseRepository": "ietf-wg-ohai/oblivious-http",
      "baseRefName": "main",
      "baseRefOid": "37d38ca8519da987de491f66e80dd1074cdd3f1e",
      "headRepository": "martinthomson/oblivious-http",
      "headRefName": "ack-lucas",
      "headRefOid": "babebac7b57fae03923a11e52cc364061602cebd",
      "closedAt": "2022-08-09T12:57:45Z",
      "mergedAt": "2022-08-09T12:57:45Z",
      "mergedBy": "chris-wood",
      "mergeCommit": {
        "oid": "f97db5ae8cd8734f0130bbf6bc32ccb9b4a996e9"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOE6fLGM4_kywy",
          "commit": {
            "abbreviatedOid": "babebac"
          },
          "author": "LPardue",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2022-08-09T12:11:04Z",
          "updatedAt": "2022-08-09T12:11:04Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOE6fLGM4_lC_B",
          "commit": {
            "abbreviatedOid": "babebac"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "\ud83c\udf89 ",
          "createdAt": "2022-08-09T12:57:41Z",
          "updatedAt": "2022-08-09T12:57:41Z",
          "comments": []
        }
      ]
    },
    {
      "number": 178,
      "id": "PR_kwDOE6fLGM49D62T",
      "title": "Trim spacing of registrations",
      "url": "https://github.com/ietf-wg-ohai/oblivious-http/pull/178",
      "state": "MERGED",
      "author": "martinthomson",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "This makes them easier to handle",
      "createdAt": "2022-08-12T00:33:55Z",
      "updatedAt": "2022-08-16T13:52:46Z",
      "baseRepository": "ietf-wg-ohai/oblivious-http",
      "baseRefName": "main",
      "baseRefOid": "573dd523668f32ba358997f89de12c3050dc0bc3",
      "headRepository": "martinthomson/oblivious-http",
      "headRefName": "compact-regs",
      "headRefOid": "ba1d8314a89e2855970ac49b1a5747ba19be9654",
      "closedAt": "2022-08-16T13:52:46Z",
      "mergedAt": "2022-08-16T13:52:46Z",
      "mergedBy": "chris-wood",
      "mergeCommit": {
        "oid": "785f34b0d4887e2ec13a159e772f56f4cfe5dac9"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOE6fLGM5ABl_1",
          "commit": {
            "abbreviatedOid": "ba1d831"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2022-08-16T13:52:41Z",
          "updatedAt": "2022-08-16T13:52:41Z",
          "comments": []
        }
      ]
    },
    {
      "number": 180,
      "id": "PR_kwDOE6fLGM49N2Wg",
      "title": "What happens when there is no response",
      "url": "https://github.com/ietf-wg-ohai/oblivious-http/pull/180",
      "state": "MERGED",
      "author": "martinthomson",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Pretty much what you might expect; see Section 7.6 of [HTTP].\r\n\r\n@LPardue, WDYT?",
      "createdAt": "2022-08-16T01:09:34Z",
      "updatedAt": "2022-08-16T21:30:16Z",
      "baseRepository": "ietf-wg-ohai/oblivious-http",
      "baseRefName": "main",
      "baseRefOid": "573dd523668f32ba358997f89de12c3050dc0bc3",
      "headRepository": "martinthomson/oblivious-http",
      "headRefName": "gateway-timeout",
      "headRefOid": "0c3021c8ce51b347ff562f308f9268f4b3b7e6e2",
      "closedAt": "2022-08-16T21:30:16Z",
      "mergedAt": "2022-08-16T21:30:16Z",
      "mergedBy": "martinthomson",
      "mergeCommit": {
        "oid": "8508e33cb1202f15c0eedce24f1611a779eb08df"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOE6fLGM4_-rVZ",
          "commit": {
            "abbreviatedOid": "7736511"
          },
          "author": "LPardue",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-08-16T01:29:44Z",
          "updatedAt": "2022-08-16T01:29:45Z",
          "comments": [
            {
              "originalPosition": 18,
              "body": "\"successfully receives a response\" reads a little odd to me (if a target response is failure status, that's still success, it think...). What about changing L679 to say\r\n\r\n> An Oblivious Gateway Resource that receives any response from the Target\r\n\r\nAnd then make this line consistent and opposite with\r\n\r\n> An Oblivious Gateway Resource that does not receive a response can itself\r\n",
              "createdAt": "2022-08-16T01:29:44Z",
              "updatedAt": "2022-08-16T01:30:11Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOE6fLGM5ABmih",
          "commit": {
            "abbreviatedOid": "0c3021c"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2022-08-16T13:53:55Z",
          "updatedAt": "2022-08-16T13:53:55Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOE6fLGM5AChvA",
          "commit": {
            "abbreviatedOid": "0c3021c"
          },
          "author": "tfpauly",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2022-08-16T16:10:13Z",
          "updatedAt": "2022-08-16T16:10:13Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOE6fLGM5ACmXS",
          "commit": {
            "abbreviatedOid": "0c3021c"
          },
          "author": "LPardue",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2022-08-16T16:23:09Z",
          "updatedAt": "2022-08-16T16:23:09Z",
          "comments": []
        }
      ]
    },
    {
      "number": 181,
      "id": "PR_kwDOE6fLGM49N8xX",
      "title": "Add some spacing for consistency",
      "url": "https://github.com/ietf-wg-ohai/oblivious-http/pull/181",
      "state": "MERGED",
      "author": "martinthomson",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2022-08-16T02:11:09Z",
      "updatedAt": "2022-08-16T13:53:01Z",
      "baseRepository": "ietf-wg-ohai/oblivious-http",
      "baseRefName": "main",
      "baseRefOid": "573dd523668f32ba358997f89de12c3050dc0bc3",
      "headRepository": "martinthomson/oblivious-http",
      "headRefName": "math-spacing",
      "headRefOid": "0a2c292add927cd2021e14b57f4c166d1870d01d",
      "closedAt": "2022-08-16T13:53:01Z",
      "mergedAt": "2022-08-16T13:53:01Z",
      "mergedBy": "chris-wood",
      "mergeCommit": {
        "oid": "66418023e1677c52d94cadec336ccf02a59625f4"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOE6fLGM5ABmHw",
          "commit": {
            "abbreviatedOid": "0a2c292"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2022-08-16T13:52:57Z",
          "updatedAt": "2022-08-16T13:52:57Z",
          "comments": []
        }
      ]
    },
    {
      "number": 182,
      "id": "PR_kwDOE6fLGM49Qakv",
      "title": "Fix media type header",
      "url": "https://github.com/ietf-wg-ohai/oblivious-http/pull/182",
      "state": "MERGED",
      "author": "chris-wood",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2022-08-16T14:36:51Z",
      "updatedAt": "2022-08-16T21:29:22Z",
      "baseRepository": "ietf-wg-ohai/oblivious-http",
      "baseRefName": "main",
      "baseRefOid": "66418023e1677c52d94cadec336ccf02a59625f4",
      "headRepository": "ietf-wg-ohai/oblivious-http",
      "headRefName": "chris-wood-patch-1",
      "headRefOid": "698c07fdf62e888b074cf607fbb93637b7d66b82",
      "closedAt": "2022-08-16T21:29:21Z",
      "mergedAt": "2022-08-16T21:29:21Z",
      "mergedBy": "martinthomson",
      "mergeCommit": {
        "oid": "39a85e73ea713ff736d8842bace6144cb55f05fc"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOE6fLGM5AChDW",
          "commit": {
            "abbreviatedOid": "698c07f"
          },
          "author": "tfpauly",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2022-08-16T16:08:13Z",
          "updatedAt": "2022-08-16T16:08:13Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOE6fLGM5AEB_8",
          "commit": {
            "abbreviatedOid": "698c07f"
          },
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2022-08-16T21:29:14Z",
          "updatedAt": "2022-08-16T21:29:14Z",
          "comments": []
        }
      ]
    },
    {
      "number": 183,
      "id": "PR_kwDOE6fLGM49Q7XN",
      "title": "Suggestions from WGLC review",
      "url": "https://github.com/ietf-wg-ohai/oblivious-http/pull/183",
      "state": "CLOSED",
      "author": "tfpauly",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2022-08-16T16:35:25Z",
      "updatedAt": "2022-08-24T14:13:47Z",
      "baseRepository": "ietf-wg-ohai/oblivious-http",
      "baseRefName": "main",
      "baseRefOid": "66418023e1677c52d94cadec336ccf02a59625f4",
      "headRepository": "ietf-wg-ohai/oblivious-http",
      "headRefName": "tfpauly-patch-1",
      "headRefOid": "6cce5bf8fe06ff22f824e157ab3138799ac6bf45",
      "closedAt": "2022-08-24T14:13:47Z",
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [
        {
          "author": "tfpauly",
          "authorAssociation": "COLLABORATOR",
          "body": "Closing in favor of #191 ",
          "createdAt": "2022-08-24T14:13:47Z",
          "updatedAt": "2022-08-24T14:13:47Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOE6fLGM5ACrft",
          "commit": {
            "abbreviatedOid": "262c21c"
          },
          "author": "tfpauly",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-08-16T16:36:32Z",
          "updatedAt": "2022-08-16T16:36:32Z",
          "comments": [
            {
              "originalPosition": 5,
              "body": "The \"which\" here didn't parse correctly for me \u2014 it sounds like it is referring to the transport layer? Happy to see this cleaned up in other ways too.",
              "createdAt": "2022-08-16T16:36:32Z",
              "updatedAt": "2022-08-16T16:36:33Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOE6fLGM5ACrxY",
          "commit": {
            "abbreviatedOid": "262c21c"
          },
          "author": "tfpauly",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-08-16T16:37:00Z",
          "updatedAt": "2022-08-16T16:37:01Z",
          "comments": [
            {
              "originalPosition": 15,
              "body": "I think it should be clear that the latency isn't due to extra round trips, but a \"bump\" in processing on the one round trip.",
              "createdAt": "2022-08-16T16:37:00Z",
              "updatedAt": "2022-08-16T16:37:01Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOE6fLGM5ACrjU",
          "commit": {
            "abbreviatedOid": "262c21c"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2022-08-16T16:36:37Z",
          "updatedAt": "2022-08-16T16:37:19Z",
          "comments": [
            {
              "originalPosition": 15,
              "body": "It could be latency do the different path itself, too, so I would keep this as-is. But I don't feel strongly.",
              "createdAt": "2022-08-16T16:36:37Z",
              "updatedAt": "2022-08-16T16:37:19Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOE6fLGM5ACr9u",
          "commit": {
            "abbreviatedOid": "262c21c"
          },
          "author": "tfpauly",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-08-16T16:37:40Z",
          "updatedAt": "2022-08-16T16:37:40Z",
          "comments": [
            {
              "originalPosition": 96,
              "body": "This is the one \"bug\" in the specification I saw, where we didn't update the info string suggestion",
              "createdAt": "2022-08-16T16:37:40Z",
              "updatedAt": "2022-08-16T16:37:40Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOE6fLGM5ACsES",
          "commit": {
            "abbreviatedOid": "262c21c"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-08-16T16:37:58Z",
          "updatedAt": "2022-08-16T16:37:59Z",
          "comments": [
            {
              "originalPosition": 15,
              "body": "But it could be due to extra round trips between intermediate hops on the path, right?",
              "createdAt": "2022-08-16T16:37:58Z",
              "updatedAt": "2022-08-16T16:37:59Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOE6fLGM5ACtXD",
          "commit": {
            "abbreviatedOid": "262c21c"
          },
          "author": "tfpauly",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-08-16T16:42:13Z",
          "updatedAt": "2022-08-16T16:42:13Z",
          "comments": [
            {
              "originalPosition": 15,
              "body": "I'm happy with a different wording here, but even latency due to a different path is quite different from having extra round trips. I'd like to make sure people don't think that it always has extra latency. Honestly, if your relay and gateway have a more optimized path, you may have *lower* latency.",
              "createdAt": "2022-08-16T16:42:13Z",
              "updatedAt": "2022-08-16T16:42:13Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOE6fLGM5ACwi6",
          "commit": {
            "abbreviatedOid": "262c21c"
          },
          "author": "LPardue",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-08-16T16:52:32Z",
          "updatedAt": "2022-08-16T16:52:33Z",
          "comments": [
            {
              "originalPosition": 15,
              "body": "Yes I agree with this point it _could_ be faster",
              "createdAt": "2022-08-16T16:52:33Z",
              "updatedAt": "2022-08-16T16:52:33Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOE6fLGM5ACxta",
          "commit": {
            "abbreviatedOid": "262c21c"
          },
          "author": "tfpauly",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-08-16T16:56:19Z",
          "updatedAt": "2022-08-16T16:56:19Z",
          "comments": [
            {
              "originalPosition": 15,
              "body": "Rather, there aren't any extra client-facing round trips.",
              "createdAt": "2022-08-16T16:56:19Z",
              "updatedAt": "2022-08-16T16:56:19Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOE6fLGM5ADtl6",
          "commit": {
            "abbreviatedOid": "262c21c"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-08-16T20:08:35Z",
          "updatedAt": "2022-08-16T20:08:36Z",
          "comments": [
            {
              "originalPosition": 15,
              "body": "I agree. The intro to this list says that OHTTP _adds_ cost, but this isn't true. It's a different cost, and that cost may be less than that of a direct connection. Maybe we can change the intro to say that OHTTP has different performance characteristics than a direct connection which vary based on things like having primed connections, more optimized paths, etc?",
              "createdAt": "2022-08-16T20:08:36Z",
              "updatedAt": "2022-08-16T20:08:36Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOE6fLGM5ADtot",
          "commit": {
            "abbreviatedOid": "262c21c"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-08-16T20:08:47Z",
          "updatedAt": "2022-08-16T20:08:47Z",
          "comments": [
            {
              "originalPosition": 15,
              "body": "Right \ud83d\udc4d ",
              "createdAt": "2022-08-16T20:08:47Z",
              "updatedAt": "2022-08-16T20:08:47Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOE6fLGM5AFAMS",
          "commit": {
            "abbreviatedOid": "4225d50"
          },
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "Overall, I find the many references to {{repurposing}} to be a bit hard to justify.\r\n\r\nThe other minor changes are good (thanks for catching the error.",
          "createdAt": "2022-08-17T05:22:54Z",
          "updatedAt": "2022-08-17T05:31:48Z",
          "comments": [
            {
              "originalPosition": 6,
              "body": "```suggestion\r\nat the transport layer, which is only useful for an application\r\nthat does not carry state between requests.\r\n```",
              "createdAt": "2022-08-17T05:22:54Z",
              "updatedAt": "2022-08-17T05:31:48Z"
            },
            {
              "originalPosition": 15,
              "body": "```suggestion\r\n* Each request requires at least two regular HTTP requests, which could\r\n  increase latency.\r\n```",
              "createdAt": "2022-08-17T05:23:41Z",
              "updatedAt": "2022-08-17T05:31:48Z"
            },
            {
              "originalPosition": 95,
              "body": "I'm not a fan of the additional links to the repurposing section here, aside from this one :)",
              "createdAt": "2022-08-17T05:24:55Z",
              "updatedAt": "2022-08-17T05:31:48Z"
            },
            {
              "originalPosition": 38,
              "body": "I'd prefer the original here - it's more direct.\r\n\r\nThe use of an alternative content type requires a bit more than just pointing to some advice about how to switch out the content.  That is, the repurposing section is information about how someone might start to build a new, but similar encapsulation format.",
              "createdAt": "2022-08-17T05:29:16Z",
              "updatedAt": "2022-08-17T05:31:49Z"
            },
            {
              "originalPosition": 102,
              "body": "Using normative language here was a mistake, I think.\r\n\r\n```suggestion\r\nmedia type, then the HPKE info string could be \"application/dns-message\r\n```",
              "createdAt": "2022-08-17T05:31:07Z",
              "updatedAt": "2022-08-17T05:31:49Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOE6fLGM5AHYif",
          "commit": {
            "abbreviatedOid": "4225d50"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-08-17T12:58:24Z",
          "updatedAt": "2022-08-17T12:58:25Z",
          "comments": [
            {
              "originalPosition": 15,
              "body": "I would also be fine with this proposal.",
              "createdAt": "2022-08-17T12:58:25Z",
              "updatedAt": "2022-08-17T12:58:25Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOE6fLGM5AHZjH",
          "commit": {
            "abbreviatedOid": "4225d50"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-08-17T13:01:05Z",
          "updatedAt": "2022-08-17T13:01:05Z",
          "comments": [
            {
              "originalPosition": 38,
              "body": "I think we ought to be clear that the inner content type can change as applications need it to change, whether that's done here or some other way. Repurposing the format should only require a label change and nothing else. If there's more that needs to be done, then we should update the repurposing section accordingly. ",
              "createdAt": "2022-08-17T13:01:05Z",
              "updatedAt": "2022-08-17T13:01:05Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOE6fLGM5AKoZY",
          "commit": {
            "abbreviatedOid": "4225d50"
          },
          "author": "tfpauly",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-08-17T23:28:18Z",
          "updatedAt": "2022-08-17T23:28:19Z",
          "comments": [
            {
              "originalPosition": 6,
              "body": "Yeah, this works better",
              "createdAt": "2022-08-17T23:28:19Z",
              "updatedAt": "2022-08-17T23:28:19Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOE6fLGM5AKodd",
          "commit": {
            "abbreviatedOid": "4225d50"
          },
          "author": "tfpauly",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-08-17T23:28:44Z",
          "updatedAt": "2022-08-17T23:28:45Z",
          "comments": [
            {
              "originalPosition": 15,
              "body": "Yes, I think this is a way out of it too =)",
              "createdAt": "2022-08-17T23:28:44Z",
              "updatedAt": "2022-08-17T23:28:45Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOE6fLGM5AKowt",
          "commit": {
            "abbreviatedOid": "6cce5bf"
          },
          "author": "tfpauly",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-08-17T23:31:16Z",
          "updatedAt": "2022-08-17T23:31:16Z",
          "comments": [
            {
              "originalPosition": 38,
              "body": "I agree with Chris. Since the \"new encapsulation format\" is just a matter of swapping the media type in the info strings and change the BHTTP content to another type, it's useful to be clear in the OHTTP spec which parts are the parts to swap out, and which are the parts that are constant across any contained media type.\r\n\r\nI don't think more needs to be done \u2014 if there is something else, I'd like to hear it.",
              "createdAt": "2022-08-17T23:31:16Z",
              "updatedAt": "2022-08-17T23:31:16Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOE6fLGM5AK6-K",
          "commit": {
            "abbreviatedOid": "4225d50"
          },
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-08-18T02:07:26Z",
          "updatedAt": "2022-08-18T02:07:27Z",
          "comments": [
            {
              "originalPosition": 38,
              "body": "This particular change is fine.  But the reuse thing is amply covered by the section; I just don't think we need quite so many references to it.\r\n\r\nFWIW, repurposing requires defining a new media type (`message/whatever-except-encrypted`) and then describing how that uses this document with a label based on the encapsulated type (`message/whatever`) instead of `message/bhttp`.",
              "createdAt": "2022-08-18T02:07:27Z",
              "updatedAt": "2022-08-18T02:07:27Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOE6fLGM5ALElb",
          "commit": {
            "abbreviatedOid": "4225d50"
          },
          "author": "tfpauly",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-08-18T03:06:34Z",
          "updatedAt": "2022-08-18T03:06:34Z",
          "comments": [
            {
              "originalPosition": 38,
              "body": "We can cut down the references if there's still some text to make it clear that this isn't _always_ Binary HTTP.\r\n\r\nAlso, regarding the requirements for using things other than BHTTP: currently, the text just says that you need to have the inner media type be used in the label for the info. I don't think there's any requirement that other payloads not use message/ohttp-req and message/ohttp-res for the outer types. They certainly _can_ define other media types for the outside if they want, particularly if two different types are supported by the same gateway. However, if the client knows about the gateway via out-of-band configuration, it could simply know the inner format to use and not need to have a relay in between know anything about the inner encapsulated payload being something other than binary HTTP.",
              "createdAt": "2022-08-18T03:06:34Z",
              "updatedAt": "2022-08-18T03:06:34Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOE6fLGM5ALTE2",
          "commit": {
            "abbreviatedOid": "4225d50"
          },
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-08-18T05:08:39Z",
          "updatedAt": "2022-08-18T05:08:39Z",
          "comments": [
            {
              "originalPosition": 38,
              "body": "Hmm.  This is partly why I made #91.  The content of this media type does not identify what it carries - including whether it contains a request or a response, which is why we define two - so you really can't use message/ohttp-re[qs] for anything other than a binary HTTP message.",
              "createdAt": "2022-08-18T05:08:39Z",
              "updatedAt": "2022-08-18T05:08:39Z"
            }
          ]
        }
      ]
    },
    {
      "number": 185,
      "id": "PR_kwDOE6fLGM49SXku",
      "title": "Index on important terms",
      "url": "https://github.com/ietf-wg-ohai/oblivious-http/pull/185",
      "state": "MERGED",
      "author": "martinthomson",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "In order to do this properly, I decided to capitalize Client where it\r\nrefers to an OHTTP Client.  That was a lot of changes.\r\n\r\nThis adds a beefy appendix to the document, but I have opened issues on xml2rfc that might eventually slim that down.",
      "createdAt": "2022-08-17T01:35:51Z",
      "updatedAt": "2022-08-19T12:05:17Z",
      "baseRepository": "ietf-wg-ohai/oblivious-http",
      "baseRefName": "main",
      "baseRefOid": "92a9e8405a189810f2b929114b16481f33fc7347",
      "headRepository": "martinthomson/oblivious-http",
      "headRefName": "index",
      "headRefOid": "d8689b25a484bf498e086a95c62faf7c0785cac8",
      "closedAt": "2022-08-19T12:05:17Z",
      "mergedAt": "2022-08-19T12:05:17Z",
      "mergedBy": "chris-wood",
      "mergeCommit": {
        "oid": "436697a96b5dfe1b4f6959319a6552f8d116a4a0"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOE6fLGM5AHXhz",
          "commit": {
            "abbreviatedOid": "3191aaf"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "CHANGES_REQUESTED",
          "body": "Caught some text that needed to be updated based on the terminology change. Otherwise this LGTM.",
          "createdAt": "2022-08-17T12:55:49Z",
          "updatedAt": "2022-08-17T12:57:45Z",
          "comments": [
            {
              "originalPosition": 288,
              "body": "```suggestion\r\n1. Requests and responses are known only to Clients and Oblivious Gateway Resource in possession\r\n```",
              "createdAt": "2022-08-17T12:55:49Z",
              "updatedAt": "2022-08-17T12:57:45Z"
            },
            {
              "originalPosition": 292,
              "body": "```suggestion\r\n   contents. Likewise, Oblivious Gateway Resources know only the Oblivious Relay Resource\r\n```",
              "createdAt": "2022-08-17T12:56:28Z",
              "updatedAt": "2022-08-17T12:57:45Z"
            },
            {
              "originalPosition": 294,
              "body": "```suggestion\r\n   and the decrypted request. Only the Client knows both the\r\n```",
              "createdAt": "2022-08-17T12:56:35Z",
              "updatedAt": "2022-08-17T12:57:45Z"
            },
            {
              "originalPosition": 295,
              "body": "```suggestion\r\n   plaintext request and response and its identity.\r\n```",
              "createdAt": "2022-08-17T12:57:13Z",
              "updatedAt": "2022-08-17T12:57:45Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOE6fLGM5AKw_F",
          "commit": {
            "abbreviatedOid": "3191aaf"
          },
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-08-18T00:41:16Z",
          "updatedAt": "2022-08-18T00:41:16Z",
          "comments": [
            {
              "originalPosition": 288,
              "body": "Isn't it the Target Resource also?  I left this because we defined \"server\" in this section as being an entity that operates both the gateway and the target.",
              "createdAt": "2022-08-18T00:41:16Z",
              "updatedAt": "2022-08-18T00:41:16Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOE6fLGM5AKxQV",
          "commit": {
            "abbreviatedOid": "3191aaf"
          },
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-08-18T00:43:49Z",
          "updatedAt": "2022-08-18T00:43:50Z",
          "comments": [
            {
              "originalPosition": 295,
              "body": "What is \"its\" in this context?  (Also, and and and is a bit strange.)",
              "createdAt": "2022-08-18T00:43:50Z",
              "updatedAt": "2022-08-18T00:43:50Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOE6fLGM5AKxZW",
          "commit": {
            "abbreviatedOid": "5d2aab0"
          },
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-08-18T00:45:08Z",
          "updatedAt": "2022-08-18T00:45:08Z",
          "comments": [
            {
              "originalPosition": 133,
              "body": "@chris-wood How would you feel about deleting these Xxx Request/Response definitions.  The index shows that we don't use them at all.",
              "createdAt": "2022-08-18T00:45:08Z",
              "updatedAt": "2022-08-18T00:45:08Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOE6fLGM5AKy6r",
          "commit": {
            "abbreviatedOid": "5d2aab0"
          },
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-08-18T01:00:13Z",
          "updatedAt": "2022-08-18T01:00:14Z",
          "comments": [
            {
              "originalPosition": 294,
              "body": "```suggestion\r\n   contents. Likewise, Oblivious Gateway Resources learns only the Oblivious Relay Resource\r\n```",
              "createdAt": "2022-08-18T01:00:14Z",
              "updatedAt": "2022-08-18T01:00:14Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOE6fLGM5AMvhG",
          "commit": {
            "abbreviatedOid": "3191aaf"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-08-18T10:07:53Z",
          "updatedAt": "2022-08-18T10:07:53Z",
          "comments": [
            {
              "originalPosition": 288,
              "body": "It is, but that's true without OHTTP too, so I think it's only really useful to focus on what the new entities see here.",
              "createdAt": "2022-08-18T10:07:53Z",
              "updatedAt": "2022-08-18T10:07:53Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOE6fLGM5AMvpN",
          "commit": {
            "abbreviatedOid": "9ad02dc"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-08-18T10:08:18Z",
          "updatedAt": "2022-08-18T10:08:18Z",
          "comments": [
            {
              "originalPosition": 133,
              "body": "If we don't use them then we can drop them. \ud83d\udc4d ",
              "createdAt": "2022-08-18T10:08:18Z",
              "updatedAt": "2022-08-18T10:08:18Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOE6fLGM5AMwEV",
          "commit": {
            "abbreviatedOid": "9ad02dc"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-08-18T10:09:42Z",
          "updatedAt": "2022-08-18T10:09:42Z",
          "comments": [
            {
              "originalPosition": 295,
              "body": "\"it\" is the client here. We say above that the gateway sees both plaintext request and response, but then here we say \"only the client sees plaintext request and response,\" which is clearly a contradiction. (It's not _only_ the client.) So adding the fact that the client knows its own identity distinguishes its view from that of the gateway.",
              "createdAt": "2022-08-18T10:09:42Z",
              "updatedAt": "2022-08-18T10:09:42Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOE6fLGM5ANHT6",
          "commit": {
            "abbreviatedOid": "3191aaf"
          },
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-08-18T11:27:26Z",
          "updatedAt": "2022-08-18T11:27:27Z",
          "comments": [
            {
              "originalPosition": 288,
              "body": "Then maybe ...\r\n\r\n```suggestion\r\n1. Requests and responses are known only to Clients and Target Resources, plus Oblivious Gateway Resources that possess\r\n```",
              "createdAt": "2022-08-18T11:27:26Z",
              "updatedAt": "2022-08-18T11:27:27Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOE6fLGM5ANI7-",
          "commit": {
            "abbreviatedOid": "3191aaf"
          },
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-08-18T11:33:26Z",
          "updatedAt": "2022-08-18T11:33:27Z",
          "comments": [
            {
              "originalPosition": 295,
              "body": "Ok, maybe instead,\r\n\r\n```suggestion\r\n   plaintext request. No other entity that can see these plaintext messages can attribute them to the client.\r\n```\r\n\r\nOr drop the tweak. I worry that we might need to qualify this further: this somewhat depends on there being multiple concurrent users of the same relay making similarly sized requests. That sort of thing.",
              "createdAt": "2022-08-18T11:33:27Z",
              "updatedAt": "2022-08-18T11:33:27Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOE6fLGM5ANJkm",
          "commit": {
            "abbreviatedOid": "2121ee4"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-08-18T11:35:41Z",
          "updatedAt": "2022-08-18T11:35:42Z",
          "comments": [
            {
              "originalPosition": 289,
              "body": "```suggestion\r\n   the corresponding response encapsulation key and HPKE keying material.\r\n```",
              "createdAt": "2022-08-18T11:35:42Z",
              "updatedAt": "2022-08-18T11:35:42Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOE6fLGM5ANKFD",
          "commit": {
            "abbreviatedOid": "b325643"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-08-18T11:37:33Z",
          "updatedAt": "2022-08-18T11:37:33Z",
          "comments": [
            {
              "originalPosition": 295,
              "body": "That's better, but still contradictory. The text still says that \"_only_ the client knows both the plaintext request and response,\" which is false since both the gateway and target see the plaintext request and response. Maybe we just drop \"Only the client...\" and instead write \"No entity that can see plaintext messages can attribute them to the client which generated them\"?",
              "createdAt": "2022-08-18T11:37:33Z",
              "updatedAt": "2022-08-18T11:37:33Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOE6fLGM5AQvUt",
          "commit": {
            "abbreviatedOid": "3191aaf"
          },
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-08-19T00:00:27Z",
          "updatedAt": "2022-08-19T00:00:28Z",
          "comments": [
            {
              "originalPosition": 295,
              "body": "Sold.",
              "createdAt": "2022-08-19T00:00:27Z",
              "updatedAt": "2022-08-19T00:00:28Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOE6fLGM5AS-xi",
          "commit": {
            "abbreviatedOid": "384ab84"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2022-08-19T12:04:34Z",
          "updatedAt": "2022-08-19T12:04:34Z",
          "comments": []
        }
      ]
    },
    {
      "number": 186,
      "id": "PR_kwDOE6fLGM49TJUF",
      "title": "Cryptographic *overhead*",
      "url": "https://github.com/ietf-wg-ohai/oblivious-http/pull/186",
      "state": "MERGED",
      "author": "martinthomson",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Closes #184.",
      "createdAt": "2022-08-17T07:22:53Z",
      "updatedAt": "2022-08-17T12:54:48Z",
      "baseRepository": "ietf-wg-ohai/oblivious-http",
      "baseRefName": "main",
      "baseRefOid": "8508e33cb1202f15c0eedce24f1611a779eb08df",
      "headRepository": "ietf-wg-ohai/oblivious-http",
      "headRefName": "missing-noun",
      "headRefOid": "30131fef6645ddead5328ab36577a1c69a2bb86f",
      "closedAt": "2022-08-17T12:54:47Z",
      "mergedAt": "2022-08-17T12:54:47Z",
      "mergedBy": "chris-wood",
      "mergeCommit": {
        "oid": "fdad25244f966e3b359d97112306aa268cfa5fb9"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOE6fLGM5AHXIJ",
          "commit": {
            "abbreviatedOid": "30131fe"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2022-08-17T12:54:43Z",
          "updatedAt": "2022-08-17T12:54:43Z",
          "comments": []
        }
      ]
    },
    {
      "number": 187,
      "id": "PR_kwDOE6fLGM49UpO9",
      "title": "Clarify Gateway errors",
      "url": "https://github.com/ietf-wg-ohai/oblivious-http/pull/187",
      "state": "CLOSED",
      "author": "chris-wood",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "401 has proven useful as a signal that the client has an outdated configuration, so I think we ought to recommend it here. ",
      "createdAt": "2022-08-17T13:10:44Z",
      "updatedAt": "2022-08-19T10:59:24Z",
      "baseRepository": "ietf-wg-ohai/oblivious-http",
      "baseRefName": "main",
      "baseRefOid": "fdad25244f966e3b359d97112306aa268cfa5fb9",
      "headRepository": "ietf-wg-ohai/oblivious-http",
      "headRefName": "chris-wood-patch-1",
      "headRefOid": "bbfa52b8bd91281d68cfcd6d0f4889e3916133df",
      "closedAt": "2022-08-19T10:59:24Z",
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [
        {
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "body": "Well, as mentioned earlier, an explicit signal for outdated configuration has been incredibly useful in practice. It's what clients use to drive key update. Yes, it can be used to partition the anonymity set, but not by any meaningful amount. ",
          "createdAt": "2022-08-19T00:21:48Z",
          "updatedAt": "2022-08-19T00:21:48Z"
        },
        {
          "author": "LPardue",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Meta comment: as a reletive bystander in the WG  there's a lot of discussion going on a PR that has no issue. What are these chunks of text addressing as we hit the tail end of the WGLC? Are other following along this journey?",
          "createdAt": "2022-08-19T00:32:20Z",
          "updatedAt": "2022-08-19T00:32:20Z"
        },
        {
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "body": "Thanks for the reminder @LPardue.\r\n\r\nI think that we should take the easy part here, but take the hard piece to the list (and open an issue).",
          "createdAt": "2022-08-19T00:59:06Z",
          "updatedAt": "2022-08-19T00:59:06Z"
        },
        {
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "body": "Yep, that works for me.",
          "createdAt": "2022-08-19T00:59:42Z",
          "updatedAt": "2022-08-19T00:59:42Z"
        },
        {
          "author": "LPardue",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Sounds good, thanks ",
          "createdAt": "2022-08-19T01:04:57Z",
          "updatedAt": "2022-08-19T01:04:57Z"
        },
        {
          "author": "tfpauly",
          "authorAssociation": "COLLABORATOR",
          "body": "Hitting a case where the key rotates and a client has an outdated key is certainly common and important in practice. We often hit it, in clients that have been asleep for a long time, etc. Knowing that the key is bad and that you need to refresh the key is very important. \n\nI agree that the refresh needs to take consistency into account, but any mechanism for fetching the key needs to do that. So I think it is useful to mention the errors for the automated refresh. This should not be left to human intervention only. ",
          "createdAt": "2022-08-19T02:18:06Z",
          "updatedAt": "2022-08-19T02:18:06Z"
        },
        {
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "body": "@tfpauly, do you hit the case where you know that the record is expired before using it, or do you have to try to use it before you learn that?",
          "createdAt": "2022-08-19T02:41:20Z",
          "updatedAt": "2022-08-19T02:41:20Z"
        },
        {
          "author": "tfpauly",
          "authorAssociation": "COLLABORATOR",
          "body": "@martinthomson I'm not sure what you mean by \"the record\". I assume you mean the key configuration?\r\n\r\nThe key configs themselves don't include any expiration, etc. We currently get these configs as part of a larger blob of data (think JSON, protobuf) with various pieces of information that we refresh periodically. We refresh the blob roughly daily or twice daily. The oblivious configs themselves don't change on every refresh \u2014\u00a0those have a slightly longer cadence.\r\n\r\nNormally everything is fine, and the client grabs a new key config before their old key config expires. But on machines that go to sleep for long periods of time and wake up, there can be times where we don't know if a config is stale or not, and the system may be in the middle of trying to refresh the overall config blob. Due to timing and ordering, it is sometimes possible to end up with a few requests using old keys, which will fail. We use the signal to mean \"really, we need to get a new config now\".\r\n\r\nFor that case, I can see the argument that things will eventually work themselves out, and the error status here is more about logging or knowing what's really going on. But early on, we did have some cases where we had \"less graceful\" key rotations, and one can certainly imagine that a key may need to be forcefully rotated if there's a concern of compromise, etc. In such cases, clients may think they have a longer grace period, but now need to go fetch the new copy.\r\n\r\nHow to ensure the new copy is trusted is its own question, but that's a matter of key config distribution, which is beyond the scope of the base OHTTP spec.",
          "createdAt": "2022-08-19T02:49:32Z",
          "updatedAt": "2022-08-19T02:49:32Z"
        },
        {
          "author": "tfpauly",
          "authorAssociation": "COLLABORATOR",
          "body": "However, @martinthomson I do agree that we don't want to add the new error signaling mechanism that this PR is defining \u2014 I think more it is just useful to have some standard guidance for what range or set of statuses a client can assume means \"you probably have an old / bogus config\".",
          "createdAt": "2022-08-19T02:54:23Z",
          "updatedAt": "2022-08-19T02:54:31Z"
        },
        {
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "body": "Sorry, I meant config, not record.\r\n\r\nI had assumed that configs would be published with some information about how the client is expected to refresh them.  Like an Expires or max-age in HTTP.\r\n\r\nYou could treat anything older than the usual refresh cycle as potentially outdated, which means that you might retry with a fresh config if you got any sort of non-encapsulated response.\r\n\r\nI'm not opposed to defining a problem type (RFC 7807) or something like that for this.  I'm just objecting to the scope creep.",
          "createdAt": "2022-08-19T02:55:15Z",
          "updatedAt": "2022-08-19T02:55:15Z"
        },
        {
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "body": "Mid-air collision.  I hope that #193 is closer to something we can agree to.",
          "createdAt": "2022-08-19T02:56:01Z",
          "updatedAt": "2022-08-19T02:56:01Z"
        },
        {
          "author": "tfpauly",
          "authorAssociation": "COLLABORATOR",
          "body": "Yeah, I think #193 is definitely better in scope. We don't want the extra error types.\r\n\r\nI think the one thing #193 is missing is any mention of the key config being stale/wrong/etc. It only mentions \"the request is malformed\", which sounds more like a client syntax error. If we just mention that one of the main reasons you'd see a failure is key config mismatch, and that you should consider that on the client, then I'd support #193's approach. (The learning being that almost all of the errors we've ever seen in the wild are key config mismatches. And those are themselves pretty rare, but they do happen.)",
          "createdAt": "2022-08-19T02:59:22Z",
          "updatedAt": "2022-08-19T02:59:22Z"
        },
        {
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "body": "Closing in favor of #193.",
          "createdAt": "2022-08-19T10:59:24Z",
          "updatedAt": "2022-08-19T10:59:24Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOE6fLGM5AHdWH",
          "commit": {
            "abbreviatedOid": "40d411e"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-08-17T13:10:58Z",
          "updatedAt": "2022-08-17T13:10:58Z",
          "comments": [
            {
              "originalPosition": 17,
              "body": "```suggestion\r\nbecause the Encapsulated Request key ID is invalid SHOULD send a 401 status code.\r\nAny other error that occurs prior to decapsulation SHOULD yield a response\r\n```",
              "createdAt": "2022-08-17T13:10:58Z",
              "updatedAt": "2022-08-17T13:10:58Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOE6fLGM5AHdaF",
          "commit": {
            "abbreviatedOid": "334968b"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-08-17T13:11:07Z",
          "updatedAt": "2022-08-17T13:11:08Z",
          "comments": [
            {
              "originalPosition": 31,
              "body": "```suggestion\r\nEncapsulated Response.\r\n```",
              "createdAt": "2022-08-17T13:11:07Z",
              "updatedAt": "2022-08-17T13:11:08Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOE6fLGM5AHdfT",
          "commit": {
            "abbreviatedOid": "157a394"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-08-17T13:11:21Z",
          "updatedAt": "2022-08-17T13:11:21Z",
          "comments": [
            {
              "originalPosition": 27,
              "body": "```suggestion\r\n```",
              "createdAt": "2022-08-17T13:11:21Z",
              "updatedAt": "2022-08-17T13:11:21Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOE6fLGM5AK3g-",
          "commit": {
            "abbreviatedOid": "6a190f7"
          },
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "state": "CHANGES_REQUESTED",
          "body": "",
          "createdAt": "2022-08-18T01:38:28Z",
          "updatedAt": "2022-08-18T01:39:43Z",
          "comments": [
            {
              "originalPosition": 12,
              "body": "This is a little confused.\r\n\r\nWe have two cases to talk about here:\r\n\r\n1. The gateway failed to process the request in a way that prevents it from encapsulating the response.  Here it would send a cleartext response to the relay.\r\n2. The gateway decrypted the request and so can encapsulate the response, but something else went wrong.  Here it can encapsulate the response.\r\n\r\n\r\nIn the first case, there is no other option.  In the second, the gateway might still decide to send a cleartext response.  However, the relay probably isn't in a good position to do much with a cleartext response - it might treat that as a failure (then see above) - so we might suggest encapsulating a response where possible.",
              "createdAt": "2022-08-18T01:38:28Z",
              "updatedAt": "2022-08-18T01:39:43Z"
            },
            {
              "originalPosition": 15,
              "body": "I don't think that 401 is appropriate here.  I would avoid being too specific and say 4xx for any errors with decapsulation.",
              "createdAt": "2022-08-18T01:39:33Z",
              "updatedAt": "2022-08-18T01:39:43Z"
            },
            {
              "originalPosition": 14,
              "body": "```suggestion\r\nAn Oblivious Gateway Resource which fails to decapsulate as described in {{request}}\r\n```",
              "createdAt": "2022-08-18T01:39:40Z",
              "updatedAt": "2022-08-18T01:39:43Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOE6fLGM5AK35p",
          "commit": {
            "abbreviatedOid": "7360f1e"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-08-18T01:41:57Z",
          "updatedAt": "2022-08-18T01:41:57Z",
          "comments": [
            {
              "originalPosition": 15,
              "body": "It's been useful in practice to distinguish failures due to bad configuration from other failures. What would you suggest we do to allow that?",
              "createdAt": "2022-08-18T01:41:57Z",
              "updatedAt": "2022-08-18T01:41:57Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOE6fLGM5AK4AZ",
          "commit": {
            "abbreviatedOid": "7360f1e"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-08-18T01:42:48Z",
          "updatedAt": "2022-08-18T01:42:49Z",
          "comments": [
            {
              "originalPosition": 12,
              "body": "I agree with what you said, but I don't see how the proposed text conflicts with it. What specifically about the proposed text do you think needs to change?",
              "createdAt": "2022-08-18T01:42:48Z",
              "updatedAt": "2022-08-18T01:42:49Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOE6fLGM5AK4cV",
          "commit": {
            "abbreviatedOid": "6a190f7"
          },
          "author": "tfpauly",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-08-18T01:46:40Z",
          "updatedAt": "2022-08-18T01:46:41Z",
          "comments": [
            {
              "originalPosition": 15,
              "body": "Yeah 4XX is probably better here. If the key implies client \u201cauthentication\u201d then 401 makes sense, but that\u2019s not really a general interpretation.",
              "createdAt": "2022-08-18T01:46:40Z",
              "updatedAt": "2022-08-18T01:46:41Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOE6fLGM5AK4mu",
          "commit": {
            "abbreviatedOid": "7360f1e"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-08-18T01:48:06Z",
          "updatedAt": "2022-08-18T01:48:06Z",
          "comments": [
            {
              "originalPosition": 15,
              "body": "4xx doesn't seem sufficient here since that would admit 400, which wouldn't allow the client to distinguish configuration mismatch from other failures. ",
              "createdAt": "2022-08-18T01:48:06Z",
              "updatedAt": "2022-08-18T01:48:06Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOE6fLGM5ALc4h",
          "commit": {
            "abbreviatedOid": "6a190f7"
          },
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-08-18T06:05:43Z",
          "updatedAt": "2022-08-18T06:05:43Z",
          "comments": [
            {
              "originalPosition": 15,
              "body": "Welcome to HTTP.  The usual way we deal with that is that we include details in the body of the response.",
              "createdAt": "2022-08-18T06:05:43Z",
              "updatedAt": "2022-08-18T06:05:43Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOE6fLGM5ALd1t",
          "commit": {
            "abbreviatedOid": "6a190f7"
          },
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-08-18T06:10:58Z",
          "updatedAt": "2022-08-18T06:10:58Z",
          "comments": [
            {
              "originalPosition": 12,
              "body": "OK, I'll be more concrete.\r\n\r\nYour text says, roughly:\r\n\r\n```\r\nif (a: cannot decapsulate) or (b: receives no response from upstream):\r\n  generate a response with an error status code\r\n  encapsulate response\r\n  send encapsulated response\r\n```\r\n\r\nHowever, the encapsulation is not possible in case (a).\r\n\r\nMy comment was more broadly about how you might structure text:\r\n\r\n1. distinguish between decapsulation failure (a) and other failures (b)\r\n2. identify appropriate handling\r\n   a. for case (a)\r\n   b. for case (b), or when a server has case (a) and feels like it; but note the limitations of this\r\n",
              "createdAt": "2022-08-18T06:10:58Z",
              "updatedAt": "2022-08-18T06:10:58Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOE6fLGM5AMpme",
          "commit": {
            "abbreviatedOid": "7360f1e"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-08-18T09:49:36Z",
          "updatedAt": "2022-08-18T09:49:36Z",
          "comments": [
            {
              "originalPosition": 15,
              "body": "Sure, but we're defining a protocol here, and I think it's important that there be a very clear signal to clients in this case. Letting implementations do this any way they want using the body is a bad outcome. ",
              "createdAt": "2022-08-18T09:49:36Z",
              "updatedAt": "2022-08-18T09:49:36Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOE6fLGM5AMrN5",
          "commit": {
            "abbreviatedOid": "7360f1e"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-08-18T09:54:35Z",
          "updatedAt": "2022-08-18T09:54:36Z",
          "comments": [
            {
              "originalPosition": 15,
              "body": "I'll just crib what ACME did for errors here. We probably should have done that in the first place. And I'll split that out into a separate PR.",
              "createdAt": "2022-08-18T09:54:36Z",
              "updatedAt": "2022-08-18T10:10:20Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOE6fLGM5AMrv9",
          "commit": {
            "abbreviatedOid": "7360f1e"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-08-18T09:56:13Z",
          "updatedAt": "2022-08-18T09:56:13Z",
          "comments": [
            {
              "originalPosition": 12,
              "body": "This is probably a parsing issue, as that's not what the text says. Failure to process the _decapsulated_ request is not the same as failing to process the encapsulated request, where the latter is decapsulation failure.",
              "createdAt": "2022-08-18T09:56:13Z",
              "updatedAt": "2022-08-18T09:56:13Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOE6fLGM5AM6vv",
          "commit": {
            "abbreviatedOid": "7360f1e"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-08-18T10:45:49Z",
          "updatedAt": "2022-08-18T10:45:49Z",
          "comments": [
            {
              "originalPosition": 12,
              "body": "I pushed a change that reworks this. Please have a look.",
              "createdAt": "2022-08-18T10:45:49Z",
              "updatedAt": "2022-08-18T10:45:49Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOE6fLGM5AM6yC",
          "commit": {
            "abbreviatedOid": "7360f1e"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-08-18T10:45:56Z",
          "updatedAt": "2022-08-18T10:45:56Z",
          "comments": [
            {
              "originalPosition": 15,
              "body": "Done. Please have a look.",
              "createdAt": "2022-08-18T10:45:56Z",
              "updatedAt": "2022-08-18T10:45:56Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOE6fLGM5AQvjU",
          "commit": {
            "abbreviatedOid": "bbfa52b"
          },
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "state": "CHANGES_REQUESTED",
          "body": "I think that the error signaling is way too much.\r\n\r\nThe piece talking about encapsulating error responses is great.  We should definitely do that.\r\n\r\nThere are three problems I see with the error signaling:\r\n\r\n1. I don't want to invent a new error signaling scheme (we already use RFC 7807 in the document).\r\n2. I'm not sure that the message will get through anyway.\r\n3. I'm not sure that we have any need for this mechanism (yet).\r\n\r\nIf it were just the first, I'd suggest that you fix this and we'd all move on.\r\n\r\nBut the second is somewhat more difficult.  Anything a gateway says to the relay is ultimately quite risky to have sent to the client.  This information is unauthenticated, which comes with its own risks, but any action the client takes also comes with a risk to their privacy.\r\n\r\nLet's say that the client makes a request with a bad configuration.  The gateway responds and indicates this specific condition.  The relay forwards it, the client then refreshes its view of what the key_id is, makes a new request and that succeeds.  Sounds fine.\r\n\r\nWell maybe.  Imagine that the relay wants to split its client population into smaller cohorts.  It can do this using this mechanism: because the client acts on this feedback directly, the gateway can arrange to have a time-limited change to configuration in place.  We're much more reliant on the consistency mechanisms now for ensuring that clients aren't divided, and I'm not sure that these will save us completely.\r\n\r\nThis mechanism gives the gateway the ability to selectively nudge a subset of clients to a new configuration.  Say it found a very interesting request from one client, it can roll its configuration, nudge that client over to it, but no others.  There would be some amount of organic migration to the new configuration, but the anonymity set that the targeted client finds itself in might be very small - at least for some time.\r\n\r\nFinally, I am just not sure that we'll need this.  Maybe I'll be proven wrong by deployment experience, but this is something that can be retrofitted fairly easily if I'm wrong.",
          "createdAt": "2022-08-19T00:02:42Z",
          "updatedAt": "2022-08-19T00:19:55Z",
          "comments": [
            {
              "originalPosition": 7,
              "body": "```suggestion\r\nIn particular, an Oblivious Gateway Resource which fails to decapsulate as described\r\n```",
              "createdAt": "2022-08-19T00:02:42Z",
              "updatedAt": "2022-08-19T00:19:55Z"
            },
            {
              "originalPosition": 19,
              "body": "\ud83d\udc4d This bit is a keeper.",
              "createdAt": "2022-08-19T00:04:43Z",
              "updatedAt": "2022-08-19T00:19:55Z"
            }
          ]
        }
      ]
    },
    {
      "number": 188,
      "id": "PR_kwDOE6fLGM49W_Y-",
      "title": "Add aasvg properly",
      "url": "https://github.com/ietf-wg-ohai/oblivious-http/pull/188",
      "state": "MERGED",
      "author": "martinthomson",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2022-08-18T01:48:44Z",
      "updatedAt": "2022-08-18T10:20:41Z",
      "baseRepository": "ietf-wg-ohai/oblivious-http",
      "baseRefName": "main",
      "baseRefOid": "fdad25244f966e3b359d97112306aa268cfa5fb9",
      "headRepository": "ietf-wg-ohai/oblivious-http",
      "headRefName": "npm-i-aasvg",
      "headRefOid": "e6df32d016ad377061da6919e8415bada4b0ebc6",
      "closedAt": "2022-08-18T10:20:40Z",
      "mergedAt": "2022-08-18T10:20:40Z",
      "mergedBy": "chris-wood",
      "mergeCommit": {
        "oid": "a08e78dd20d86743f1e0add7805387e81c6e267c"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOE6fLGM5AMzqG",
          "commit": {
            "abbreviatedOid": "e6df32d"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2022-08-18T10:20:36Z",
          "updatedAt": "2022-08-18T10:20:36Z",
          "comments": []
        }
      ]
    },
    {
      "number": 189,
      "id": "PR_kwDOE6fLGM49XDHe",
      "title": "Spell it out rather than use the symbol",
      "url": "https://github.com/ietf-wg-ohai/oblivious-http/pull/189",
      "state": "MERGED",
      "author": "martinthomson",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "This was the only case we used the TLS-style dot notation, but we don't need to pull in a new concept.",
      "createdAt": "2022-08-18T02:10:19Z",
      "updatedAt": "2022-08-18T10:20:25Z",
      "baseRepository": "ietf-wg-ohai/oblivious-http",
      "baseRefName": "main",
      "baseRefOid": "fdad25244f966e3b359d97112306aa268cfa5fb9",
      "headRepository": "ietf-wg-ohai/oblivious-http",
      "headRefName": "quote-special-stuff",
      "headRefOid": "4288f3dff9101ec9868893ba3958e2a5a7dd7f42",
      "closedAt": "2022-08-18T10:20:24Z",
      "mergedAt": "2022-08-18T10:20:24Z",
      "mergedBy": "chris-wood",
      "mergeCommit": {
        "oid": "188540d53e06fb663ce847d15e107d8b3026c137"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOE6fLGM5AMzkr",
          "commit": {
            "abbreviatedOid": "4288f3d"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2022-08-18T10:20:20Z",
          "updatedAt": "2022-08-18T10:20:20Z",
          "comments": []
        }
      ]
    },
    {
      "number": 190,
      "id": "PR_kwDOE6fLGM49XDf1",
      "title": "Use snake_case for identifiers",
      "url": "https://github.com/ietf-wg-ohai/oblivious-http/pull/190",
      "state": "MERGED",
      "author": "martinthomson",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "RFC 9180 does use skR/pkR/skS/skR, so I didn't change everything to use\r\nsnake_case, but this is more consistent with how we identify things in\r\nother places.  Also, it reads better and we don't have to grapple with\r\nwhether it should be keyId or keyID.",
      "createdAt": "2022-08-18T02:14:13Z",
      "updatedAt": "2022-08-18T10:21:27Z",
      "baseRepository": "ietf-wg-ohai/oblivious-http",
      "baseRefName": "main",
      "baseRefOid": "fdad25244f966e3b359d97112306aa268cfa5fb9",
      "headRepository": "ietf-wg-ohai/oblivious-http",
      "headRefName": "snake_case",
      "headRefOid": "fbd525bec47e3c1d688fb0e3c998a9801dd0df59",
      "closedAt": "2022-08-18T10:21:26Z",
      "mergedAt": "2022-08-18T10:21:26Z",
      "mergedBy": "chris-wood",
      "mergeCommit": {
        "oid": "94f1d221074a51840b99b37d30806fa182f1c53e"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOE6fLGM5AMz3m",
          "commit": {
            "abbreviatedOid": "fbd525b"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2022-08-18T10:21:22Z",
          "updatedAt": "2022-08-18T10:21:22Z",
          "comments": []
        }
      ]
    },
    {
      "number": 191,
      "id": "PR_kwDOE6fLGM49XE55",
      "title": "This might be a clearer version of Tommy's change",
      "url": "https://github.com/ietf-wg-ohai/oblivious-http/pull/191",
      "state": "MERGED",
      "author": "martinthomson",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "This is a lot more disruptive, but I think it is a clearer description\r\nof how you might repurpose this design.\r\n\r\nI'm still a little unsure about using application/dns-message, but I can\r\nlive with it.",
      "createdAt": "2022-08-18T02:28:52Z",
      "updatedAt": "2022-09-01T23:58:18Z",
      "baseRepository": "ietf-wg-ohai/oblivious-http",
      "baseRefName": "main",
      "baseRefOid": "fdad25244f966e3b359d97112306aa268cfa5fb9",
      "headRepository": "ietf-wg-ohai/oblivious-http",
      "headRefName": "repurpose-mt",
      "headRefOid": "1eee92130c266179916e54bcaa7f12d62e12da43",
      "closedAt": "2022-09-01T23:58:18Z",
      "mergedAt": "2022-09-01T23:58:18Z",
      "mergedBy": "martinthomson",
      "mergeCommit": {
        "oid": "1eee92130c266179916e54bcaa7f12d62e12da43"
      },
      "comments": [
        {
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "body": "If this is acceptable, I might cherry-pick some of the other changes from #183 rather than take it wholesale.",
          "createdAt": "2022-08-18T02:31:12Z",
          "updatedAt": "2022-08-18T02:31:12Z"
        },
        {
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "body": "OK, I think that I understand what you are looking for and I agree, we can say more about that.  But we probably don't need to say heaps more.  Is the latest commit what you are looking for?",
          "createdAt": "2022-08-18T06:26:59Z",
          "updatedAt": "2022-08-18T06:26:59Z"
        },
        {
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "body": "@martinthomson I think it's closer, but I genuinely don't see why noting precisely where things need to change in the spec is harmful. I prefer Tommy's original change here.",
          "createdAt": "2022-08-18T10:06:49Z",
          "updatedAt": "2022-08-18T10:06:49Z"
        },
        {
          "author": "tfpauly",
          "authorAssociation": "COLLABORATOR",
          "body": "Yeah, this still doesn't solve the problem of letting implementers know which parts of the encapsulated request processing are the bits that can become generic to handle other media types.\r\n\r\nAnother way to look at this is, for another spec to define how to use another media type, it should be easy to simply say \"the OHTTP spec explains the couple places where the media type can be changed from BHTTP to something else \u2014 and this use of OHTTP tells you to use a different media type in those spots\". We should avoid having new specs like this need to wholesale copy the sections of the OHTTP document that define how to use HPKE, etc, and just have one subtle difference.",
          "createdAt": "2022-08-18T15:52:27Z",
          "updatedAt": "2022-08-18T15:52:27Z"
        },
        {
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "body": "> Yeah, this still doesn't solve the problem of letting implementers know which parts of the encapsulated request processing are the bits that can become generic to handle other media types.\r\n\r\nI'm not seeing that.  I realize that I missed the padding piece (though I don't consider that particularly important, it's worth mentioning).\r\n\r\nFor a generic format, the only adaptation required is replacing the constant strings.  This describes how that might work.  That we don't burden the reader of the algorithm piece with this detail at the time is a feature, not a bug, as far as I'm concerned.",
          "createdAt": "2022-08-19T00:35:20Z",
          "updatedAt": "2022-08-19T00:35:20Z"
        },
        {
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "body": "> For a generic format, the only adaptation required is replacing the constant strings. This describes how that might work. That we don't burden the reader of the algorithm piece with this detail at the time is a feature, not a bug, as far as I'm concerned.\r\n\r\nI don't consider it a burden. I think it's an important piece for someone who's implementing OHTTP since it has API implications. For example, one could implement the main encap and decap algorithms using the fixed \"message/bhttp\" content type and then find they have to either duplicate code later on adjust their encap and decap APIs (or something else) to accommodate another type of application encoding. The inline hints from the original suggestion in #183 suggest that implementers might want to allow for changes to the content type string so they don't run into this situation down the road, and they're minimally invasive hints at that. ",
          "createdAt": "2022-08-22T20:24:49Z",
          "updatedAt": "2022-08-22T20:24:49Z"
        },
        {
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "body": "I've added the pointers, as requested.  (I only skipped one on the decapsulation process as that seemed redundant.)",
          "createdAt": "2022-08-24T06:18:44Z",
          "updatedAt": "2022-08-24T06:18:44Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOE6fLGM5ALCY8",
          "commit": {
            "abbreviatedOid": "85ad8ae"
          },
          "author": "tfpauly",
          "authorAssociation": "COLLABORATOR",
          "state": "CHANGES_REQUESTED",
          "body": "I don't think this really solves the issue earlier in the spec.\r\n\r\nTo be clear, I'm happy to not have the other PR taken wholesale, and I'm also happy to have the authors change that branch in whatever way is needed.\r\n\r\nHowever, the problem with the text in the rest of the document is that it binds every description to binary HTTP, and doesn't explain that this media type can be swapped out.\r\n\r\n\"An encapsulated HTTP request contains a binary-encoded HTTP message\", \"Build info by concatenating the ASCII-encoded string \"message/bhttp request\", a zero byte, and the header.\", etc.\r\n\r\nBinary HTTP is the format that is being defined along with OHTTP as the first/default media type to contain, but there isn't anything about the OHTTP encapsulation and encryption details that is actually bound to Binary HTTP. It just needs the media type.\r\n\r\nFor someone reading the spec, they should know that the encapsulated request is really an opaque blob that will generally contain something generated by binary HTTP; and that the info string needs to be determined by the media type of the opaque blob.",
          "createdAt": "2022-08-18T02:48:24Z",
          "updatedAt": "2022-08-18T02:56:44Z",
          "comments": [
            {
              "originalPosition": 30,
              "body": "Well, the specification doesn't need a _new_ media type. It can certainly use other or existing media types. It just needs to be tied to a particular media type.",
              "createdAt": "2022-08-18T02:48:25Z",
              "updatedAt": "2022-08-18T02:56:44Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOE6fLGM5ALeSZ",
          "commit": {
            "abbreviatedOid": "85ad8ae"
          },
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-08-18T06:13:17Z",
          "updatedAt": "2022-08-18T06:13:17Z",
          "comments": [
            {
              "originalPosition": 30,
              "body": "It really does.  Unless it decides that it can use some other way to identify how the payload of the message should be interpreted.  In the OHTTP case - and likely in others - you can use ambient information, like the fact that the message appears in an HTTP request and for a particular resource, but that isn't particular portable, nor does it permit changing the format of content.",
              "createdAt": "2022-08-18T06:13:17Z",
              "updatedAt": "2022-08-18T06:13:17Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOE6fLGM5Amu0_",
          "commit": {
            "abbreviatedOid": "1eee921"
          },
          "author": "tfpauly",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "Thanks, latest changes look good to me",
          "createdAt": "2022-08-24T14:13:08Z",
          "updatedAt": "2022-08-24T14:13:08Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOE6fLGM5AyP-c",
          "commit": {
            "abbreviatedOid": "1eee921"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2022-08-26T12:54:58Z",
          "updatedAt": "2022-08-26T12:54:58Z",
          "comments": []
        }
      ]
    },
    {
      "number": 192,
      "id": "PR_kwDOE6fLGM49bjR6",
      "title": "Take the easy bits of #183",
      "url": "https://github.com/ietf-wg-ohai/oblivious-http/pull/192",
      "state": "MERGED",
      "author": "martinthomson",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "These bits are not connected to the rest of it and are unambiguously good.",
      "createdAt": "2022-08-19T01:52:49Z",
      "updatedAt": "2022-08-19T02:40:25Z",
      "baseRepository": "ietf-wg-ohai/oblivious-http",
      "baseRefName": "main",
      "baseRefOid": "94f1d221074a51840b99b37d30806fa182f1c53e",
      "headRepository": "ietf-wg-ohai/oblivious-http",
      "headRefName": "easy-fixes-183",
      "headRefOid": "cebef7af4310dc88471fcd54bf27929654b9dd2a",
      "closedAt": "2022-08-19T02:40:25Z",
      "mergedAt": "2022-08-19T02:40:25Z",
      "mergedBy": "martinthomson",
      "mergeCommit": {
        "oid": "92a9e8405a189810f2b929114b16481f33fc7347"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOE6fLGM5AQ_Jk",
          "commit": {
            "abbreviatedOid": "cebef7a"
          },
          "author": "tfpauly",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2022-08-19T02:14:17Z",
          "updatedAt": "2022-08-19T02:14:17Z",
          "comments": []
        }
      ]
    },
    {
      "number": 193,
      "id": "PR_kwDOE6fLGM49bleY",
      "title": "A scaled back version of the error signaling changes.",
      "url": "https://github.com/ietf-wg-ohai/oblivious-http/pull/193",
      "state": "MERGED",
      "author": "martinthomson",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "This starts by moving the good text from #187 to the \"Errors\" section, where I realized that it duplicated some of that language.  It was more complete, so I merged the two.\r\n\r\nI then added some language about what happens to errors prior to decapsulation.  This doesn't define an error signaling format.  Though that might be useful, it is also a lot more work and I'm leery of scope creep in this document.\r\n\r\nMy view: if you get an error, you have screwed up somewhere.  You probably want to have a human look at what is going on.  The privacy consequences of automated responses are difficult to work out properly.  Hence this proposed change.\r\n\r\nCloses #187.",
      "createdAt": "2022-08-19T02:11:32Z",
      "updatedAt": "2022-08-24T05:44:51Z",
      "baseRepository": "ietf-wg-ohai/oblivious-http",
      "baseRefName": "main",
      "baseRefOid": "94f1d221074a51840b99b37d30806fa182f1c53e",
      "headRepository": "ietf-wg-ohai/oblivious-http",
      "headRefName": "easy-bits-187",
      "headRefOid": "7b77e023337765af50683afc8337ec4db4152368",
      "closedAt": "2022-08-24T05:44:51Z",
      "mergedAt": "2022-08-24T05:44:51Z",
      "mergedBy": "martinthomson",
      "mergeCommit": {
        "oid": "5553e4a3330f7b511495ad43e13b7da14452109c"
      },
      "comments": [
        {
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "body": "This is an improvement but still insufficient with respect to configuration mismatch signaling.",
          "createdAt": "2022-08-19T11:00:33Z",
          "updatedAt": "2022-08-19T11:00:39Z"
        },
        {
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "body": "Let's start with this one and I'll look at addressing the open issue in a follow-up.",
          "createdAt": "2022-08-24T05:44:47Z",
          "updatedAt": "2022-08-24T05:44:47Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOE6fLGM5ARQ4j",
          "commit": {
            "abbreviatedOid": "6324441"
          },
          "author": "tfpauly",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "Thanks, I think this is clear enough now.",
          "createdAt": "2022-08-19T04:40:27Z",
          "updatedAt": "2022-08-19T04:40:27Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOE6fLGM5ATIqW",
          "commit": {
            "abbreviatedOid": "6324441"
          },
          "author": "LPardue",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-08-19T12:40:41Z",
          "updatedAt": "2022-08-19T12:40:42Z",
          "comments": [
            {
              "originalPosition": 10,
              "body": "```suggestion\r\nHTTP}} and {{Section 15.6.5 of HTTP}}, respectively).  This response is\r\n```",
              "createdAt": "2022-08-19T12:40:42Z",
              "updatedAt": "2022-08-19T12:40:42Z"
            }
          ]
        }
      ]
    },
    {
      "number": 196,
      "id": "PR_kwDOE6fLGM49sRq_",
      "title": "Define a problem type for key configurations",
      "url": "https://github.com/ietf-wg-ohai/oblivious-http/pull/196",
      "state": "MERGED",
      "author": "martinthomson",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "We debated this at some length.  This defines an optional-to-use\r\nsignaling method for the gateway so that it can inform the client when\r\nthe key configuration is not acceptable.  Clients can use this as a\r\nprompt to refresh their configuration.\r\n\r\nCloses #194.",
      "createdAt": "2022-08-24T06:05:46Z",
      "updatedAt": "2022-09-01T23:58:28Z",
      "baseRepository": "ietf-wg-ohai/oblivious-http",
      "baseRefName": "main",
      "baseRefOid": "5553e4a3330f7b511495ad43e13b7da14452109c",
      "headRepository": "ietf-wg-ohai/oblivious-http",
      "headRefName": "bad-key-problem",
      "headRefOid": "c17986c5786a934177de943fbb391761ac477dd7",
      "closedAt": "2022-09-01T23:58:28Z",
      "mergedAt": "2022-09-01T23:58:28Z",
      "mergedBy": "martinthomson",
      "mergeCommit": {
        "oid": "2b875bff08c140758784faeadc5937c298546af3"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOE6fLGM5Alk1h",
          "commit": {
            "abbreviatedOid": "ff12bc0"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "This looks great -- thanks!",
          "createdAt": "2022-08-24T11:05:44Z",
          "updatedAt": "2022-08-24T11:05:44Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOE6fLGM5AmIPJ",
          "commit": {
            "abbreviatedOid": "ff12bc0"
          },
          "author": "LPardue",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2022-08-24T12:40:58Z",
          "updatedAt": "2022-08-24T12:42:25Z",
          "comments": [
            {
              "originalPosition": 28,
              "body": "```suggestion\r\nRelay Resource.  A Client might manage the risk of an outdated key configuration\r\n```",
              "createdAt": "2022-08-24T12:40:58Z",
              "updatedAt": "2022-08-24T12:42:25Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOE6fLGM5Amvih",
          "commit": {
            "abbreviatedOid": "ff12bc0"
          },
          "author": "tfpauly",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2022-08-24T14:14:45Z",
          "updatedAt": "2022-08-24T14:14:45Z",
          "comments": []
        }
      ]
    },
    {
      "number": 197,
      "id": "PR_kwDOE6fLGM4-GjUI",
      "title": "Be consistent in how we represent empty inputs",
      "url": "https://github.com/ietf-wg-ohai/oblivious-http/pull/197",
      "state": "MERGED",
      "author": "martinthomson",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "In a few places we use `\"\"`, but others used `[]`.  I think that the\r\nformer is what TLS uses, so let's stick with that.",
      "createdAt": "2022-08-31T05:04:59Z",
      "updatedAt": "2022-08-31T13:18:43Z",
      "baseRepository": "ietf-wg-ohai/oblivious-http",
      "baseRefName": "main",
      "baseRefOid": "5553e4a3330f7b511495ad43e13b7da14452109c",
      "headRepository": "ietf-wg-ohai/oblivious-http",
      "headRefName": "empty-input-consistency",
      "headRefOid": "d9c9087210eefd3fc725177eaaed60b1b73e7620",
      "closedAt": "2022-08-31T13:18:42Z",
      "mergedAt": "2022-08-31T13:18:42Z",
      "mergedBy": "chris-wood",
      "mergeCommit": {
        "oid": "10fd71f66a448876c0a94bc3a9ed89445e2edc7b"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOE6fLGM5BFKDp",
          "commit": {
            "abbreviatedOid": "d9c9087"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2022-08-31T13:18:38Z",
          "updatedAt": "2022-08-31T13:18:38Z",
          "comments": []
        }
      ]
    },
    {
      "number": 198,
      "id": "PR_kwDOE6fLGM4-GkB1",
      "title": "Make the description of encapsulation clearer",
      "url": "https://github.com/ietf-wg-ohai/oblivious-http/pull/198",
      "state": "MERGED",
      "author": "martinthomson",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "This adds a little structure to the section on encapsulation and tries to make the relationship between different media types more distinct.\r\n\r\nThis builds on top of #191 (which we are going to merge soon) because that hits all the same text and we have already effectively agreed to those changes.\r\n\r\nYou can review [a single commit](https://github.com/ietf-wg-ohai/oblivious-http/commit/3373bce07660b762050ba34c6051ac8dd86048cd) to see what the substance of these changes are.  Alternatively, just look at the top of the \"HPKE Encapsulation\" section (the other changes are unrelated).",
      "createdAt": "2022-08-31T05:08:49Z",
      "updatedAt": "2022-09-01T23:58:17Z",
      "baseRepository": "ietf-wg-ohai/oblivious-http",
      "baseRefName": "main",
      "baseRefOid": "5553e4a3330f7b511495ad43e13b7da14452109c",
      "headRepository": "ietf-wg-ohai/oblivious-http",
      "headRefName": "clearer-encapsulation-desc",
      "headRefOid": "3373bce07660b762050ba34c6051ac8dd86048cd",
      "closedAt": "2022-09-01T23:58:16Z",
      "mergedAt": "2022-09-01T23:58:16Z",
      "mergedBy": "martinthomson",
      "mergeCommit": {
        "oid": "3301df36c307b060cce1190f15bed3c9f9895f04"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOE6fLGM5BHqIv",
          "commit": {
            "abbreviatedOid": "3373bce"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2022-08-31T21:20:11Z",
          "updatedAt": "2022-08-31T21:20:11Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOE6fLGM5BIhW-",
          "commit": {
            "abbreviatedOid": "3373bce"
          },
          "author": "tfpauly",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2022-09-01T04:26:16Z",
          "updatedAt": "2022-09-01T04:26:16Z",
          "comments": []
        }
      ]
    },
    {
      "number": 199,
      "id": "PR_kwDOE6fLGM4-GwVM",
      "title": "Acknowledge Ralph",
      "url": "https://github.com/ietf-wg-ohai/oblivious-http/pull/199",
      "state": "MERGED",
      "author": "martinthomson",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Might as well get it out there.\r\n\r\nAlso, apparently we need more mustaches.",
      "createdAt": "2022-08-31T06:15:40Z",
      "updatedAt": "2022-08-31T13:18:20Z",
      "baseRepository": "ietf-wg-ohai/oblivious-http",
      "baseRefName": "main",
      "baseRefOid": "5553e4a3330f7b511495ad43e13b7da14452109c",
      "headRepository": "ietf-wg-ohai/oblivious-http",
      "headRefName": "ack-ralph",
      "headRefOid": "ab3136de370c71051c51b7b774e5fe282dbdee8e",
      "closedAt": "2022-08-31T13:18:19Z",
      "mergedAt": "2022-08-31T13:18:19Z",
      "mergedBy": "chris-wood",
      "mergeCommit": {
        "oid": "463bde09cb1fb5738e0b96c14b95ddfef0e44be4"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 200,
      "id": "PR_kwDOE6fLGM4-NyDn",
      "title": "Note that the request body MUST be non-empty",
      "url": "https://github.com/ietf-wg-ohai/oblivious-http/pull/200",
      "state": "MERGED",
      "author": "chris-wood",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Forwarding an empty request will always yield a failure on the gateway, so just don't do it.",
      "createdAt": "2022-09-01T14:15:31Z",
      "updatedAt": "2022-09-01T23:58:36Z",
      "baseRepository": "ietf-wg-ohai/oblivious-http",
      "baseRefName": "main",
      "baseRefOid": "10fd71f66a448876c0a94bc3a9ed89445e2edc7b",
      "headRepository": "ietf-wg-ohai/oblivious-http",
      "headRefName": "chris-wood-patch-2",
      "headRefOid": "1cc8fc74251e313d25fa35194dadc9633a695a2f",
      "closedAt": "2022-09-01T23:57:56Z",
      "mergedAt": "2022-09-01T23:57:56Z",
      "mergedBy": "martinthomson",
      "mergeCommit": {
        "oid": "92fe943b4d716705fe91585dac36208c3adfbaea"
      },
      "comments": [
        {
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "body": "> Seems fine. What was the motivation here?\r\n\r\nA request without a body is basically malformed, and the gateway will treat it that way. I think relays should be encouraged to reject malformed requests (invalid method, content type, or content body) so this burden doesn't fall on the gateway. ",
          "createdAt": "2022-09-01T16:39:21Z",
          "updatedAt": "2022-09-01T16:39:21Z"
        },
        {
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "body": "This seems a little bit strange to single out.  Do we really need to mandate this?  If the relay forwards the request anyway, the gateway will be unable to decrypt it.  This creates a shorter and more immediate feedback loop, but it sort of leads to the next question: how much validation do we rely on the relay to do?\r\n\r\nWhat if the content-type is not acceptable?  Enforcing that choice might be sensible, but it can also lead to ossification, where the relay's view of what is acceptable prevents new options from being deployed.\r\n\r\nI would have said that it would be better to say something like \"A [relay] MAY reject requests that are obviously invalid, such as a request with no content.\"  Obviously, the relay is going to do some amount of denial of service protection on behalf of the gateway, and blocking empty content is a fairly trivial thing to do there, but so is 1 byte of content or a content-type of `application/x-www-form-urlencoded`.  We probably don't need to enumerate all the ways and nor do we need to be so strict about what to do.",
          "createdAt": "2022-09-01T23:49:15Z",
          "updatedAt": "2022-09-01T23:49:15Z"
        },
        {
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "body": "Your proposed text works for me.\n\nOn Thu, Sep 1, 2022, at 7:49 PM, Martin Thomson wrote:\n> This seems a little bit strange to single out. Do we really need to \n> mandate this? If the relay forwards the request anyway, the gateway \n> will be unable to decrypt it. This creates a shorter and more immediate \n> feedback loop, but it sort of leads to the next question: how much \n> validation do we rely on the relay to do?\n>\n> What if the content-type is not acceptable? Enforcing that choice might \n> be sensible, but it can also lead to ossification, where the relay's \n> view of what is acceptable prevents new options from being deployed.\n>\n> I would have said that it would be better to say something like \"A \n> [relay] MAY reject requests that are obviously invalid, such as a \n> request with no content.\" Obviously, the relay is going to do some \n> amount of denial of service protection on behalf of the gateway, and \n> blocking empty content is a fairly trivial thing to do there, but so is \n> 1 byte of content or a content-type of \n> `application/x-www-form-urlencoded`. We probably don't need to \n> enumerate all the ways and nor do we need to be so strict about what to \n> do.\n>\n> \u2014\n> Reply to this email directly, view it on GitHub \n> <https://github.com/ietf-wg-ohai/oblivious-http/pull/200#issuecomment-1234918308>, \n> or unsubscribe \n> <https://github.com/notifications/unsubscribe-auth/AAQSJEBINJIM5EQTVPKIL3LV4E6ILANCNFSM6AAAAAAQCM3XBI>.\n> You are receiving this because you authored the thread.Message ID: \n> ***@***.***>\n",
          "createdAt": "2022-09-01T23:52:08Z",
          "updatedAt": "2022-09-01T23:52:08Z"
        },
        {
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "body": "OK, I'll work out how to make that change.  I want to submit an update today.",
          "createdAt": "2022-09-01T23:54:13Z",
          "updatedAt": "2022-09-01T23:54:13Z"
        },
        {
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "body": "@martinthomson already applied the suggestion!",
          "createdAt": "2022-09-01T23:55:17Z",
          "updatedAt": "2022-09-01T23:55:17Z"
        },
        {
          "author": "tfpauly",
          "authorAssociation": "COLLABORATOR",
          "body": "Yeah, this is much better.",
          "createdAt": "2022-09-01T23:58:36Z",
          "updatedAt": "2022-09-01T23:58:36Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOE6fLGM5BMNAT",
          "commit": {
            "abbreviatedOid": "17038b8"
          },
          "author": "tfpauly",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "Seems fine. What was the motivation here?",
          "createdAt": "2022-09-01T16:27:50Z",
          "updatedAt": "2022-09-01T16:27:50Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOE6fLGM5BN8iw",
          "commit": {
            "abbreviatedOid": "17038b8"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-09-01T23:54:54Z",
          "updatedAt": "2022-09-01T23:54:55Z",
          "comments": [
            {
              "originalPosition": 10,
              "body": "```suggestion\r\ncontent of this request is copied from the Client.  An Oblivious Relay Resource MAY reject\r\nrequests that are obviously invalid, such as a request with no content. The Oblivious Relay\r\n```",
              "createdAt": "2022-09-01T23:54:54Z",
              "updatedAt": "2022-09-01T23:54:55Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOE6fLGM5BN83N",
          "commit": {
            "abbreviatedOid": "1cc8fc7"
          },
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "Perfect, thanks!",
          "createdAt": "2022-09-01T23:57:52Z",
          "updatedAt": "2022-09-01T23:57:52Z",
          "comments": []
        }
      ]
    },
    {
      "number": 202,
      "id": "PR_kwDOE6fLGM4-QTGX",
      "title": "Fix duplicate references",
      "url": "https://github.com/ietf-wg-ohai/oblivious-http/pull/202",
      "state": "MERGED",
      "author": "martinthomson",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Closes #201.",
      "createdAt": "2022-09-02T03:42:30Z",
      "updatedAt": "2022-09-02T09:11:59Z",
      "baseRepository": "ietf-wg-ohai/oblivious-http",
      "baseRefName": "main",
      "baseRefOid": "2b875bff08c140758784faeadc5937c298546af3",
      "headRepository": "ietf-wg-ohai/oblivious-http",
      "headRefName": "dup-refs",
      "headRefOid": "149b7afef8f4185c9c483d5a00700681a1a4a387",
      "closedAt": "2022-09-02T09:11:58Z",
      "mergedAt": "2022-09-02T09:11:58Z",
      "mergedBy": "chris-wood",
      "mergeCommit": {
        "oid": "07ded8f983970d540b7bca83cfb59d6bb45498d6"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOE6fLGM5BPbMJ",
          "commit": {
            "abbreviatedOid": "149b7af"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2022-09-02T09:11:53Z",
          "updatedAt": "2022-09-02T09:11:53Z",
          "comments": []
        }
      ]
    },
    {
      "number": 204,
      "id": "PR_kwDOE6fLGM4-93dS",
      "title": "Update draft metadata...again",
      "url": "https://github.com/ietf-wg-ohai/oblivious-http/pull/204",
      "state": "MERGED",
      "author": "martinthomson",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2022-09-14T18:10:13Z",
      "updatedAt": "2022-09-14T23:03:40Z",
      "baseRepository": "ietf-wg-ohai/oblivious-http",
      "baseRefName": "main",
      "baseRefOid": "07ded8f983970d540b7bca83cfb59d6bb45498d6",
      "headRepository": "ietf-wg-ohai/oblivious-http",
      "headRefName": "v3",
      "headRefOid": "55eb576a627625f2a384f80d053462b540afa4e5",
      "closedAt": "2022-09-14T23:03:39Z",
      "mergedAt": "2022-09-14T23:03:39Z",
      "mergedBy": "chris-wood",
      "mergeCommit": {
        "oid": "85137ef8867c59d7d17d2f10d08d9245c0dbe22e"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOE6fLGM5CC3UO",
          "commit": {
            "abbreviatedOid": "55eb576"
          },
          "author": "tfpauly",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2022-09-14T18:54:06Z",
          "updatedAt": "2022-09-14T18:54:06Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOE6fLGM5CD3e5",
          "commit": {
            "abbreviatedOid": "55eb576"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2022-09-14T23:03:33Z",
          "updatedAt": "2022-09-14T23:03:33Z",
          "comments": []
        }
      ]
    },
    {
      "number": 205,
      "id": "PR_kwDOE6fLGM4--Cj9",
      "title": "Use a less circular definition of Client",
      "url": "https://github.com/ietf-wg-ohai/oblivious-http/pull/205",
      "state": "MERGED",
      "author": "martinthomson",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Closes #203.",
      "createdAt": "2022-09-14T18:56:50Z",
      "updatedAt": "2022-09-15T00:51:26Z",
      "baseRepository": "ietf-wg-ohai/oblivious-http",
      "baseRefName": "main",
      "baseRefOid": "07ded8f983970d540b7bca83cfb59d6bb45498d6",
      "headRepository": "ietf-wg-ohai/oblivious-http",
      "headRefName": "ourobouros",
      "headRefOid": "35c967f992d792fea981545396ef712d0fcc1803",
      "closedAt": "2022-09-15T00:32:13Z",
      "mergedAt": "2022-09-15T00:32:13Z",
      "mergedBy": "martinthomson",
      "mergeCommit": {
        "oid": "18218732ada6c7931714ad4004e7e70e270d6151"
      },
      "comments": [
        {
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "body": "Oops, I should have let @DavidSchinazi comment.  Please do David and I'll get around to addressing any concerns you might have.",
          "createdAt": "2022-09-15T00:32:52Z",
          "updatedAt": "2022-09-15T00:32:52Z"
        },
        {
          "author": "DavidSchinazi",
          "authorAssociation": "NONE",
          "body": "No worries. This text LGTM",
          "createdAt": "2022-09-15T00:51:26Z",
          "updatedAt": "2022-09-15T00:51:26Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOE6fLGM5CD3br",
          "commit": {
            "abbreviatedOid": "35c967f"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2022-09-14T23:03:12Z",
          "updatedAt": "2022-09-14T23:03:12Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOE6fLGM5CD3xF",
          "commit": {
            "abbreviatedOid": "35c967f"
          },
          "author": "tfpauly",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2022-09-14T23:05:09Z",
          "updatedAt": "2022-09-14T23:05:09Z",
          "comments": []
        }
      ]
    },
    {
      "number": 206,
      "id": "PR_kwDOE6fLGM4_PEDs",
      "title": "draft-ietf-httpbis-binary-message => RFC9292",
      "url": "https://github.com/ietf-wg-ohai/oblivious-http/pull/206",
      "state": "MERGED",
      "author": "ShivanKaul",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2022-09-19T23:38:37Z",
      "updatedAt": "2022-09-21T00:20:57Z",
      "baseRepository": "ietf-wg-ohai/oblivious-http",
      "baseRefName": "main",
      "baseRefOid": "18218732ada6c7931714ad4004e7e70e270d6151",
      "headRepository": "ietf-wg-ohai/oblivious-http",
      "headRefName": "ShivanKaul-patch-2",
      "headRefOid": "3120de9377ad6d4a7a7b241d9a219ee96a4f4573",
      "closedAt": "2022-09-21T00:20:56Z",
      "mergedAt": "2022-09-21T00:20:56Z",
      "mergedBy": "chris-wood",
      "mergeCommit": {
        "oid": "f0360d1f654e6956919debf78fbdab7c1c204c77"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOE6fLGM5CVwty",
          "commit": {
            "abbreviatedOid": "3120de9"
          },
          "author": "tfpauly",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2022-09-20T00:06:29Z",
          "updatedAt": "2022-09-20T00:06:29Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOE6fLGM5Cb3-U",
          "commit": {
            "abbreviatedOid": "3120de9"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2022-09-21T00:20:51Z",
          "updatedAt": "2022-09-21T00:20:52Z",
          "comments": []
        }
      ]
    },
    {
      "number": 214,
      "id": "PR_kwDOE6fLGM5Dr6fK",
      "title": "Add pointers to the relevant HPKE registries",
      "url": "https://github.com/ietf-wg-ohai/oblivious-http/pull/214",
      "state": "MERGED",
      "author": "martinthomson",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Closes #207.",
      "createdAt": "2022-11-25T06:52:56Z",
      "updatedAt": "2022-11-29T01:50:45Z",
      "baseRepository": "ietf-wg-ohai/oblivious-http",
      "baseRefName": "main",
      "baseRefOid": "f0360d1f654e6956919debf78fbdab7c1c204c77",
      "headRepository": "ietf-wg-ohai/oblivious-http",
      "headRefName": "hpke-registries",
      "headRefOid": "78277962e49cae126ff1fa1cceb935b6d8648ec1",
      "closedAt": "2022-11-29T01:50:44Z",
      "mergedAt": "2022-11-29T01:50:44Z",
      "mergedBy": "martinthomson",
      "mergeCommit": {
        "oid": "b2a68e9881b8fd36b7187d3686db416d6534682f"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOE6fLGM5HSP0P",
          "commit": {
            "abbreviatedOid": "7827796"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2022-11-28T14:58:04Z",
          "updatedAt": "2022-11-28T14:58:04Z",
          "comments": []
        }
      ]
    },
    {
      "number": 215,
      "id": "PR_kwDOE6fLGM5Dr65_",
      "title": "This error is a 4xx",
      "url": "https://github.com/ietf-wg-ohai/oblivious-http/pull/215",
      "state": "MERGED",
      "author": "martinthomson",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Might as well say that.\r\n\r\nCloses #208.",
      "createdAt": "2022-11-25T06:55:43Z",
      "updatedAt": "2022-11-29T07:14:56Z",
      "baseRepository": "ietf-wg-ohai/oblivious-http",
      "baseRefName": "main",
      "baseRefOid": "f0360d1f654e6956919debf78fbdab7c1c204c77",
      "headRepository": "ietf-wg-ohai/oblivious-http",
      "headRefName": "server-error-4xx",
      "headRefOid": "65de6026389b675a6cc232226ba785b8285a46c4",
      "closedAt": "2022-11-29T07:14:55Z",
      "mergedAt": "2022-11-29T07:14:55Z",
      "mergedBy": "martinthomson",
      "mergeCommit": {
        "oid": "b98b6626e2b3b0d252aabb5af616778fa12e327a"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOE6fLGM5HSPjB",
          "commit": {
            "abbreviatedOid": "65de602"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2022-11-28T14:57:28Z",
          "updatedAt": "2022-11-28T14:57:28Z",
          "comments": []
        }
      ]
    },
    {
      "number": 216,
      "id": "PR_kwDOE6fLGM5Dr7Uw",
      "title": "Be a little clearer about exporter inputs",
      "url": "https://github.com/ietf-wg-ohai/oblivious-http/pull/216",
      "state": "MERGED",
      "author": "martinthomson",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Closes #209.",
      "createdAt": "2022-11-25T06:58:33Z",
      "updatedAt": "2022-11-29T07:15:26Z",
      "baseRepository": "ietf-wg-ohai/oblivious-http",
      "baseRefName": "main",
      "baseRefOid": "f0360d1f654e6956919debf78fbdab7c1c204c77",
      "headRepository": "ietf-wg-ohai/oblivious-http",
      "headRefName": "secretsecret",
      "headRefOid": "872444de6a1b592274f5d053004f115d0e469587",
      "closedAt": "2022-11-29T07:15:25Z",
      "mergedAt": "2022-11-29T07:15:25Z",
      "mergedBy": "martinthomson",
      "mergeCommit": {
        "oid": "f7933a4e5e416a2f5660b7ea8ae34ae54c4b59a2"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOE6fLGM5HSPOo",
          "commit": {
            "abbreviatedOid": "3a3fd1f"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2022-11-28T14:56:47Z",
          "updatedAt": "2022-11-28T14:56:50Z",
          "comments": [
            {
              "originalPosition": 8,
              "body": "```suggestion\r\n   response\" as the `exporter_context` parameter to `context.Export`; see\r\n```",
              "createdAt": "2022-11-28T14:56:47Z",
              "updatedAt": "2022-11-28T14:56:51Z"
            }
          ]
        }
      ]
    },
    {
      "number": 217,
      "id": "PR_kwDOE6fLGM5Dr7gC",
      "title": "There is no need to use 'OHTTP'",
      "url": "https://github.com/ietf-wg-ohai/oblivious-http/pull/217",
      "state": "MERGED",
      "author": "martinthomson",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Closes #210.",
      "createdAt": "2022-11-25T06:59:47Z",
      "updatedAt": "2022-11-29T07:15:38Z",
      "baseRepository": "ietf-wg-ohai/oblivious-http",
      "baseRefName": "main",
      "baseRefOid": "f0360d1f654e6956919debf78fbdab7c1c204c77",
      "headRepository": "ietf-wg-ohai/oblivious-http",
      "headRefName": "ohttp-acronym",
      "headRefOid": "493b3b016e2754894d6fa08f3cbe64fb5af3b348",
      "closedAt": "2022-11-29T07:15:37Z",
      "mergedAt": "2022-11-29T07:15:37Z",
      "mergedBy": "martinthomson",
      "mergeCommit": {
        "oid": "812aadf63e06ed6eca7edb1cbffaece84b0f3a2e"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOE6fLGM5HSOuW",
          "commit": {
            "abbreviatedOid": "493b3b0"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2022-11-28T14:55:38Z",
          "updatedAt": "2022-11-28T14:55:38Z",
          "comments": []
        }
      ]
    },
    {
      "number": 218,
      "id": "PR_kwDOE6fLGM5Dr72A",
      "title": "There might extra fields",
      "url": "https://github.com/ietf-wg-ohai/oblivious-http/pull/218",
      "state": "MERGED",
      "author": "martinthomson",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Remove a \"MUST\" in this sentence and lean more heavily on the requirement later.\r\n\r\nCloses #211.",
      "createdAt": "2022-11-25T07:01:34Z",
      "updatedAt": "2022-11-29T01:51:30Z",
      "baseRepository": "ietf-wg-ohai/oblivious-http",
      "baseRefName": "main",
      "baseRefOid": "f0360d1f654e6956919debf78fbdab7c1c204c77",
      "headRepository": "ietf-wg-ohai/oblivious-http",
      "headRefName": "which-fields",
      "headRefOid": "7446daeec8abd758204cd134b9aec2cb3b011842",
      "closedAt": "2022-11-29T01:51:29Z",
      "mergedAt": "2022-11-29T01:51:29Z",
      "mergedBy": "martinthomson",
      "mergeCommit": {
        "oid": "38c64a58f936a2bb9c5f5180470719f1d2619e51"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOE6fLGM5HSOhg",
          "commit": {
            "abbreviatedOid": "7446dae"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2022-11-28T14:55:12Z",
          "updatedAt": "2022-11-28T14:55:12Z",
          "comments": []
        }
      ]
    },
    {
      "number": 219,
      "id": "PR_kwDOE6fLGM5Dr8TD",
      "title": "No SHOULD for time slop",
      "url": "https://github.com/ietf-wg-ohai/oblivious-http/pull/219",
      "state": "MERGED",
      "author": "martinthomson",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "This really just needs a good explanation of what might happen.\r\n\r\nCloses #212.",
      "createdAt": "2022-11-25T07:03:47Z",
      "updatedAt": "2022-11-29T07:15:57Z",
      "baseRepository": "ietf-wg-ohai/oblivious-http",
      "baseRefName": "main",
      "baseRefOid": "f0360d1f654e6956919debf78fbdab7c1c204c77",
      "headRepository": "ietf-wg-ohai/oblivious-http",
      "headRefName": "should-time",
      "headRefOid": "fdaf75d7c5d48edd77b90a49f68f4e61b81780fe",
      "closedAt": "2022-11-29T07:15:57Z",
      "mergedAt": "2022-11-29T07:15:57Z",
      "mergedBy": "martinthomson",
      "mergeCommit": {
        "oid": "5c8e97cc01a405ede9c33f5ad1f13796f81d7dd6"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOE6fLGM5HSQLV",
          "commit": {
            "abbreviatedOid": "fdaf75d"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2022-11-28T14:58:53Z",
          "updatedAt": "2022-11-28T14:58:53Z",
          "comments": []
        }
      ]
    },
    {
      "number": 220,
      "id": "PR_kwDOE6fLGM5Dr8w-",
      "title": "Fix up some nits",
      "url": "https://github.com/ietf-wg-ohai/oblivious-http/pull/220",
      "state": "MERGED",
      "author": "martinthomson",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Closes #213.",
      "createdAt": "2022-11-25T07:06:16Z",
      "updatedAt": "2022-11-29T01:17:06Z",
      "baseRepository": "ietf-wg-ohai/oblivious-http",
      "baseRefName": "main",
      "baseRefOid": "f0360d1f654e6956919debf78fbdab7c1c204c77",
      "headRepository": "ietf-wg-ohai/oblivious-http",
      "headRefName": "fpalombinits",
      "headRefOid": "c9cc0c0f5253421e0c649a3ccfb1411471c09682",
      "closedAt": "2022-11-29T01:17:05Z",
      "mergedAt": "2022-11-29T01:17:05Z",
      "mergedBy": "martinthomson",
      "mergeCommit": {
        "oid": "2d59fa585d57b8f0bb3d6ed42cd2d109b3a33558"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOE6fLGM5HSOHm",
          "commit": {
            "abbreviatedOid": "c9cc0c0"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2022-11-28T14:54:19Z",
          "updatedAt": "2022-11-28T14:54:19Z",
          "comments": []
        }
      ]
    },
    {
      "number": 221,
      "id": "PR_kwDOE6fLGM5D636x",
      "title": "ARTART review nits",
      "url": "https://github.com/ietf-wg-ohai/oblivious-http/pull/221",
      "state": "MERGED",
      "author": "seanturner",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Suggestion to fix my ARTART review nits.",
      "createdAt": "2022-11-29T20:37:03Z",
      "updatedAt": "2022-11-30T00:02:40Z",
      "baseRepository": "ietf-wg-ohai/oblivious-http",
      "baseRefName": "main",
      "baseRefOid": "5c8e97cc01a405ede9c33f5ad1f13796f81d7dd6",
      "headRepository": "seanturner/oblivious-http",
      "headRefName": "patch-1",
      "headRefOid": "799af005a8c3716e33ac1a33791ace5a315369ab",
      "closedAt": "2022-11-30T00:02:40Z",
      "mergedAt": "2022-11-30T00:02:40Z",
      "mergedBy": "martinthomson",
      "mergeCommit": {
        "oid": "3dfaf44af1cce18cc44c31f4b4f3ac6715822cbd"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOE6fLGM5Hb-DE",
          "commit": {
            "abbreviatedOid": "799af00"
          },
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "Thanks Sean, very helpful.",
          "createdAt": "2022-11-30T00:02:03Z",
          "updatedAt": "2022-11-30T00:02:26Z",
          "comments": [
            {
              "originalPosition": 26,
              "body": "This is tricky, we might need parentheses.  Leave it with me.",
              "createdAt": "2022-11-30T00:02:03Z",
              "updatedAt": "2022-11-30T00:02:26Z"
            }
          ]
        }
      ]
    },
    {
      "number": 222,
      "id": "PR_kwDOE6fLGM5ERZm0",
      "title": "HTTP/1.1 provides no \"didn't process\" signal",
      "url": "https://github.com/ietf-wg-ohai/oblivious-http/pull/222",
      "state": "MERGED",
      "author": "martinthomson",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Sean's question makes this worth noting.",
      "createdAt": "2022-12-04T22:45:23Z",
      "updatedAt": "2022-12-05T21:57:59Z",
      "baseRepository": "ietf-wg-ohai/oblivious-http",
      "baseRefName": "main",
      "baseRefOid": "3dfaf44af1cce18cc44c31f4b4f3ac6715822cbd",
      "headRepository": "ietf-wg-ohai/oblivious-http",
      "headRefName": "h1-no-processing",
      "headRefOid": "5e6c3747389a8f6c8e7cbff8dddd904cc3a32072",
      "closedAt": "2022-12-05T21:57:58Z",
      "mergedAt": "2022-12-05T21:57:58Z",
      "mergedBy": "martinthomson",
      "mergeCommit": {
        "oid": "604b5a384826e00d734b604f8de1162c60430e12"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOE6fLGM5H0UWn",
          "commit": {
            "abbreviatedOid": "5e6c374"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2022-12-05T16:44:22Z",
          "updatedAt": "2022-12-05T16:44:22Z",
          "comments": []
        }
      ]
    },
    {
      "number": 223,
      "id": "PR_kwDOE6fLGM5ERiwk",
      "title": " Mark Nottingham's improved introductory text ",
      "url": "https://github.com/ietf-wg-ohai/oblivious-http/pull/223",
      "state": "MERGED",
      "author": "martinthomson",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2022-12-04T23:37:03Z",
      "updatedAt": "2022-12-12T23:46:33Z",
      "baseRepository": "ietf-wg-ohai/oblivious-http",
      "baseRefName": "main",
      "baseRefOid": "3dfaf44af1cce18cc44c31f4b4f3ac6715822cbd",
      "headRepository": "ietf-wg-ohai/oblivious-http",
      "headRefName": "mnot-intro",
      "headRefOid": "4bd3387cc53221167f2903f83ae0c5d0896ab4a0",
      "closedAt": "2022-12-12T23:46:32Z",
      "mergedAt": "2022-12-12T23:46:32Z",
      "mergedBy": "martinthomson",
      "mergeCommit": {
        "oid": "cfbab20eb20c966ae9361ce8454e88dec6f29a97"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOE6fLGM5H0Uzg",
          "commit": {
            "abbreviatedOid": "d01f5b4"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "CHANGES_REQUESTED",
          "body": "This new text seems to distinguish encapsulation and encryption, but they are two words for the same thing. Indeed, the section that describes encapsulation via encryption is titled \"HPKE Encapsulation\" and says: \r\n\r\n> This document defines how a binary-encoded HTTP message {{BINARY}} is\r\n encapsulated using HPKE {{HPKE}}\r\n\r\n(note word encapsulated)\r\n\r\nI'm requesting changes to make sure we're on the same page here. My suggestions use the word \"encapsulation\" for the process of protecting messages with encryption.",
          "createdAt": "2022-12-05T16:45:05Z",
          "updatedAt": "2022-12-05T17:00:19Z",
          "comments": [
            {
              "originalPosition": 17,
              "body": "```suggestion\r\nTo overcome these limitations, this document defines how binary\r\n```\r\nHPKE is the thing that encapsulates the messages, it doesn't take encapsulated messages as input.",
              "createdAt": "2022-12-05T16:45:05Z",
              "updatedAt": "2022-12-05T16:48:29Z"
            },
            {
              "originalPosition": 23,
              "body": "```suggestion\r\nresponses and sending them back to the client. Critically, the encapsulated\r\nmessages are sent through a separate Oblivious Relay Resource to\r\n```",
              "createdAt": "2022-12-05T16:45:44Z",
              "updatedAt": "2022-12-05T16:48:29Z"
            },
            {
              "originalPosition": 18,
              "body": "```suggestion\r\nHTTP messages {{BINARY}} can be encapsulated using Hybrid Public Key Encryption\r\n```",
              "createdAt": "2022-12-05T16:48:11Z",
              "updatedAt": "2022-12-05T16:48:29Z"
            },
            {
              "originalPosition": 20,
              "body": "```suggestion\r\nan Oblivious Gateway Resource, which is responsible for forwarding decapsulated\r\n```",
              "createdAt": "2022-12-05T16:48:20Z",
              "updatedAt": "2022-12-05T16:48:29Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOE6fLGM5H2EBm",
          "commit": {
            "abbreviatedOid": "e373be9"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "LGTM pending one final nit.",
          "createdAt": "2022-12-05T21:58:57Z",
          "updatedAt": "2022-12-05T21:59:17Z",
          "comments": [
            {
              "originalPosition": 22,
              "body": "```suggestion\r\nresponses with encryption and sending them back to the client. Critically, the encapsulated\r\n```",
              "createdAt": "2022-12-05T21:58:57Z",
              "updatedAt": "2022-12-05T21:59:17Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOE6fLGM5H2SSl",
          "commit": {
            "abbreviatedOid": "e373be9"
          },
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-12-05T22:44:20Z",
          "updatedAt": "2022-12-05T22:44:21Z",
          "comments": [
            {
              "originalPosition": 22,
              "body": "That would have it say \"encrypting the corresponding responses with encryption\".  Did you mean to suggest \"encapsulating the corresponding responses [with encryption] and sending them back to the client\" ?  I don't think you need the \"with encryption\" here.",
              "createdAt": "2022-12-05T22:44:20Z",
              "updatedAt": "2022-12-05T22:44:21Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOE6fLGM5H2p8q",
          "commit": {
            "abbreviatedOid": "e373be9"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-12-06T00:04:40Z",
          "updatedAt": "2022-12-06T00:04:40Z",
          "comments": [
            {
              "originalPosition": 22,
              "body": "Yeah, sorry, I meant it to say \"encapsulating the request with encryption\" (or whatever).",
              "createdAt": "2022-12-06T00:04:40Z",
              "updatedAt": "2022-12-06T00:04:40Z"
            }
          ]
        }
      ]
    },
    {
      "number": 224,
      "id": "PR_kwDOE6fLGM5ERoht",
      "title": "Less use of Title Case",
      "url": "https://github.com/ietf-wg-ohai/oblivious-http/pull/224",
      "state": "CLOSED",
      "author": "martinthomson",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "This is a big change, but I think that I like it.  The cost is fairly minimal, but it reads a little better in my view.\r\n\r\nAlso, I fixed a few very minor typos.  If we don't go this way, then I'll have to find those and fix them.\r\n\r\nOn the other hand, there are open pull requests that will need to be fixed in line with this change if we do.",
      "createdAt": "2022-12-05T00:13:07Z",
      "updatedAt": "2022-12-16T00:04:54Z",
      "baseRepository": "ietf-wg-ohai/oblivious-http",
      "baseRefName": "main",
      "baseRefOid": "3dfaf44af1cce18cc44c31f4b4f3ac6715822cbd",
      "headRepository": "ietf-wg-ohai/oblivious-http",
      "headRefName": "less-caps",
      "headRefOid": "f1ef0314467cdee2b9ef8acfbd02af78acc995bd",
      "closedAt": "2022-12-16T00:04:53Z",
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [
        {
          "author": "mnot",
          "authorAssociation": "CONTRIBUTOR",
          "body": "+1 this reads much more clearly.",
          "createdAt": "2022-12-05T00:24:46Z",
          "updatedAt": "2022-12-05T00:24:46Z"
        },
        {
          "author": "tfpauly",
          "authorAssociation": "COLLABORATOR",
          "body": "Hm, I don't think this is an improvement \u2014\u00a0it particularly seems odd to force lowercase all of the terms in definitions, even where it seems more correct to have them capitalized.",
          "createdAt": "2022-12-05T17:19:34Z",
          "updatedAt": "2022-12-05T17:19:34Z"
        },
        {
          "author": "mnot",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I Think It's An Improvement, But Obviously This Is A Matter Of Taste.",
          "createdAt": "2022-12-06T01:35:36Z",
          "updatedAt": "2022-12-06T01:36:11Z"
        },
        {
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "body": "We're at something of an impasse here, so in the interests of getting shit done, I'm dropping this.  I'll have to read through and find those tiny tweaks and apply them again.",
          "createdAt": "2022-12-16T00:04:53Z",
          "updatedAt": "2022-12-16T00:04:53Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOE6fLGM5H0Xd6",
          "commit": {
            "abbreviatedOid": "f1ef031"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "I don't think we should take this change this late in the process. This document went through WGLC and the consensus at the time was to treat the terms as proper nouns. I don't think it's appropriate to change it now on the basis of a single review. Beyond that, I don't think this meaningfully improves readability, but I don't feel strongly about it.",
          "createdAt": "2022-12-05T16:52:07Z",
          "updatedAt": "2022-12-05T16:52:38Z",
          "comments": []
        }
      ]
    },
    {
      "number": 225,
      "id": "PR_kwDOE6fLGM5E2E3c",
      "title": "Work a little on terminology",
      "url": "https://github.com/ietf-wg-ohai/oblivious-http/pull/225",
      "state": "MERGED",
      "author": "martinthomson",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Based on feedback from @squarooticus and his TSV directorate review.",
      "createdAt": "2022-12-09T00:20:12Z",
      "updatedAt": "2022-12-15T19:31:51Z",
      "baseRepository": "ietf-wg-ohai/oblivious-http",
      "baseRefName": "main",
      "baseRefOid": "604b5a384826e00d734b604f8de1162c60430e12",
      "headRepository": "ietf-wg-ohai/oblivious-http",
      "headRefName": "colloq",
      "headRefOid": "7089b9f846761777a4d95dcbae82da486c6fa847",
      "closedAt": "2022-12-15T19:31:50Z",
      "mergedAt": "2022-12-15T19:31:50Z",
      "mergedBy": "chris-wood",
      "mergeCommit": {
        "oid": "85315d6dfe353e9e663cef876f872b1856dcd5bf"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOE6fLGM5ItR2l",
          "commit": {
            "abbreviatedOid": "7089b9f"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2022-12-15T19:31:46Z",
          "updatedAt": "2022-12-15T19:31:46Z",
          "comments": []
        }
      ]
    },
    {
      "number": 226,
      "id": "PR_kwDOE6fLGM5E2FJD",
      "title": "It is simply 'comprises'",
      "url": "https://github.com/ietf-wg-ohai/oblivious-http/pull/226",
      "state": "MERGED",
      "author": "martinthomson",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Thanks @squarooticus.",
      "createdAt": "2022-12-09T00:21:14Z",
      "updatedAt": "2022-12-15T19:22:19Z",
      "baseRepository": "ietf-wg-ohai/oblivious-http",
      "baseRefName": "main",
      "baseRefOid": "604b5a384826e00d734b604f8de1162c60430e12",
      "headRepository": "ietf-wg-ohai/oblivious-http",
      "headRefName": "comprises",
      "headRefOid": "50078d253c559fb2da9384fed76fafa859561ff9",
      "closedAt": "2022-12-15T19:22:18Z",
      "mergedAt": "2022-12-15T19:22:18Z",
      "mergedBy": "chris-wood",
      "mergeCommit": {
        "oid": "edcdee8a836ec91eeffeefc8c14395d423e61544"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOE6fLGM5ItOog",
          "commit": {
            "abbreviatedOid": "50078d2"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2022-12-15T19:22:14Z",
          "updatedAt": "2022-12-15T19:22:14Z",
          "comments": []
        }
      ]
    },
    {
      "number": 227,
      "id": "PR_kwDOE6fLGM5E2HTZ",
      "title": "Avoid using \"before\" for gateway->relay errors",
      "url": "https://github.com/ietf-wg-ohai/oblivious-http/pull/227",
      "state": "MERGED",
      "author": "martinthomson",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "This is based on the observation from @squarooticus that we're presuming a specific processing order at the gateway, which is unnecessary.",
      "createdAt": "2022-12-09T00:30:59Z",
      "updatedAt": "2022-12-15T19:24:02Z",
      "baseRepository": "ietf-wg-ohai/oblivious-http",
      "baseRefName": "main",
      "baseRefOid": "604b5a384826e00d734b604f8de1162c60430e12",
      "headRepository": "ietf-wg-ohai/oblivious-http",
      "headRefName": "error-to-relay",
      "headRefOid": "2a94ad297205aa13b09f35da4bb05193336af165",
      "closedAt": "2022-12-15T19:24:01Z",
      "mergedAt": "2022-12-15T19:24:01Z",
      "mergedBy": "chris-wood",
      "mergeCommit": {
        "oid": "c33185136b215e7d0ded59024bf19850f2fe2edf"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOE6fLGM5ItPH1",
          "commit": {
            "abbreviatedOid": "2a94ad2"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2022-12-15T19:23:57Z",
          "updatedAt": "2022-12-15T19:23:57Z",
          "comments": []
        }
      ]
    },
    {
      "number": 228,
      "id": "PR_kwDOE6fLGM5E2bNM",
      "title": "More on unsecured requests",
      "url": "https://github.com/ietf-wg-ohai/oblivious-http/pull/228",
      "state": "MERGED",
      "author": "martinthomson",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "As @squarooticus observes in his review, \"same entity\" is more or less meaningless when it comes to ensuring that forwarding doesn't happen in the clear.  This narrows the recommendation to a concrete \"same origin\", but notes that even that is not sufficient in all cases.",
      "createdAt": "2022-12-09T01:22:40Z",
      "updatedAt": "2022-12-16T00:02:16Z",
      "baseRepository": "ietf-wg-ohai/oblivious-http",
      "baseRefName": "main",
      "baseRefOid": "604b5a384826e00d734b604f8de1162c60430e12",
      "headRepository": "ietf-wg-ohai/oblivious-http",
      "headRefName": "nonsecure-qualify",
      "headRefOid": "7e9da058f6bad68c4f566f19ce652bd5fc0c3f64",
      "closedAt": "2022-12-16T00:02:15Z",
      "mergedAt": "2022-12-16T00:02:15Z",
      "mergedBy": "chris-wood",
      "mergeCommit": {
        "oid": "c0a8cc97872600f521853b3d5b94da6a69dc27ea"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOE6fLGM5ItRmH",
          "commit": {
            "abbreviatedOid": "d6a4ca4"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "CHANGES_REQUESTED",
          "body": "",
          "createdAt": "2022-12-15T19:30:48Z",
          "updatedAt": "2022-12-15T19:30:51Z",
          "comments": [
            {
              "originalPosition": 15,
              "body": "```suggestion\r\nmodified by a network attacker.\r\n```\r\nI don't think this advice is helpful without being more specific about what \"other means\" might mean. Beyond that, there's also nothing that stops a gateway or target from posting the request contents on Twitter or whatever, so there's not much clients can meaningfully do here. I think simply noting the possibility of network-layer tampering or eavesdropping if the request traverses an unencrypted path is sufficient.",
              "createdAt": "2022-12-15T19:30:48Z",
              "updatedAt": "2022-12-15T19:30:51Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOE6fLGM5IuWcH",
          "commit": {
            "abbreviatedOid": "d6a4ca4"
          },
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-12-15T23:59:52Z",
          "updatedAt": "2022-12-15T23:59:53Z",
          "comments": [
            {
              "originalPosition": 15,
              "body": "Would you be ok with...\r\n\r\n```suggestion\r\nmodified by a network attacker.  Note that two resources that share an\r\norigin do not guarantee that requests are not forwarded without protection.\r\n```",
              "createdAt": "2022-12-15T23:59:52Z",
              "updatedAt": "2022-12-15T23:59:53Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOE6fLGM5IuWok",
          "commit": {
            "abbreviatedOid": "d6a4ca4"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-12-16T00:01:19Z",
          "updatedAt": "2022-12-16T00:01:19Z",
          "comments": [
            {
              "originalPosition": 15,
              "body": "Yep, this works for me.",
              "createdAt": "2022-12-16T00:01:19Z",
              "updatedAt": "2022-12-16T00:01:19Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOE6fLGM5IuWqW",
          "commit": {
            "abbreviatedOid": "7e9da05"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2022-12-16T00:01:31Z",
          "updatedAt": "2022-12-16T00:01:31Z",
          "comments": []
        }
      ]
    },
    {
      "number": 229,
      "id": "PR_kwDOE6fLGM5E2jwq",
      "title": "IANA prefer IETF as change controller",
      "url": "https://github.com/ietf-wg-ohai/oblivious-http/pull/229",
      "state": "MERGED",
      "author": "martinthomson",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "As opposed to \"IESG\"",
      "createdAt": "2022-12-09T01:54:27Z",
      "updatedAt": "2022-12-15T19:25:18Z",
      "baseRepository": "ietf-wg-ohai/oblivious-http",
      "baseRefName": "main",
      "baseRefOid": "604b5a384826e00d734b604f8de1162c60430e12",
      "headRepository": "ietf-wg-ohai/oblivious-http",
      "headRefName": "ietf-cc",
      "headRefOid": "9c34ae720248efc32b5279a9d49ff75f078d694d",
      "closedAt": "2022-12-15T19:25:17Z",
      "mergedAt": "2022-12-15T19:25:17Z",
      "mergedBy": "chris-wood",
      "mergeCommit": {
        "oid": "7a27812df975ffc3b1e3e9a656f20be35f18448d"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOE6fLGM5ItPZj",
          "commit": {
            "abbreviatedOid": "9c34ae7"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2022-12-15T19:24:57Z",
          "updatedAt": "2022-12-15T19:24:57Z",
          "comments": []
        }
      ]
    },
    {
      "number": 230,
      "id": "PR_kwDOE6fLGM5E29rS",
      "title": "Alexey's media type tweaks",
      "url": "https://github.com/ietf-wg-ohai/oblivious-http/pull/230",
      "state": "MERGED",
      "author": "martinthomson",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "This is something I should have noted before IANA reviewed the document, but I'm assuming that it is OK to make this sort of change.\r\n\r\nIn any case, these are easy tweaks.",
      "createdAt": "2022-12-09T03:36:43Z",
      "updatedAt": "2022-12-15T19:24:22Z",
      "baseRepository": "ietf-wg-ohai/oblivious-http",
      "baseRefName": "main",
      "baseRefOid": "604b5a384826e00d734b604f8de1162c60430e12",
      "headRepository": "ietf-wg-ohai/oblivious-http",
      "headRefName": "alexey-media",
      "headRefOid": "04290d8cc42cb82428e1b14c0a5b6933b37a2544",
      "closedAt": "2022-12-15T19:24:22Z",
      "mergedAt": "2022-12-15T19:24:22Z",
      "mergedBy": "chris-wood",
      "mergeCommit": {
        "oid": "c4bb8a7b08e11c65a1bb854f65a168ded3ec7ad6"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOE6fLGM5ItPON",
          "commit": {
            "abbreviatedOid": "04290d8"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2022-12-15T19:24:18Z",
          "updatedAt": "2022-12-15T19:24:18Z",
          "comments": []
        }
      ]
    },
    {
      "number": 231,
      "id": "PR_kwDOE6fLGM5E2-uf",
      "title": "Remove warning about overriding HTTP11 reference",
      "url": "https://github.com/ietf-wg-ohai/oblivious-http/pull/231",
      "state": "MERGED",
      "author": "martinthomson",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2022-12-09T03:41:16Z",
      "updatedAt": "2022-12-15T19:24:44Z",
      "baseRepository": "ietf-wg-ohai/oblivious-http",
      "baseRefName": "main",
      "baseRefOid": "604b5a384826e00d734b604f8de1162c60430e12",
      "headRepository": "ietf-wg-ohai/oblivious-http",
      "headRefName": "http11-citation",
      "headRefOid": "332e0ed64fe500d173a03a23ea7785347f33f155",
      "closedAt": "2022-12-15T19:24:43Z",
      "mergedAt": "2022-12-15T19:24:43Z",
      "mergedBy": "chris-wood",
      "mergeCommit": {
        "oid": "71e2d4b568bcb372b7ff5aa5c1494d8ceded88a1"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOE6fLGM5ItPUF",
          "commit": {
            "abbreviatedOid": "332e0ed"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2022-12-15T19:24:38Z",
          "updatedAt": "2022-12-15T19:24:38Z",
          "comments": []
        }
      ]
    },
    {
      "number": 232,
      "id": "PR_kwDOE6fLGM5FH36k",
      "title": "More capitalization",
      "url": "https://github.com/ietf-wg-ohai/oblivious-http/pull/232",
      "state": "MERGED",
      "author": "martinthomson",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "We weren't always capitalizing \"Encapsulated Request\".  This does more, in direct opposition to the changes in #224.  If we don't take that (it seems we at an impasse there), then we should at least be consistent.",
      "createdAt": "2022-12-12T00:46:40Z",
      "updatedAt": "2022-12-16T00:00:57Z",
      "baseRepository": "ietf-wg-ohai/oblivious-http",
      "baseRefName": "main",
      "baseRefOid": "85315d6dfe353e9e663cef876f872b1856dcd5bf",
      "headRepository": "ietf-wg-ohai/oblivious-http",
      "headRefName": "more-caps",
      "headRefOid": "5ee9c8caa0e8d32906523b2ed3809edab38cb48f",
      "closedAt": "2022-12-16T00:00:57Z",
      "mergedAt": "2022-12-16T00:00:56Z",
      "mergedBy": "martinthomson",
      "mergeCommit": {
        "oid": "460e36060744980e2d9e5bd6ae0466a2636ea804"
      },
      "comments": [
        {
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "body": "@martinthomson I resolved conflicts, but please double check the intro paragraph that had Mark's proposed changes.",
          "createdAt": "2022-12-15T19:36:57Z",
          "updatedAt": "2022-12-15T19:36:57Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOE6fLGM5ItSDs",
          "commit": {
            "abbreviatedOid": "a48c34e"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2022-12-15T19:32:28Z",
          "updatedAt": "2022-12-15T19:32:28Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOE6fLGM5IuWka",
          "commit": {
            "abbreviatedOid": "5ee9c8c"
          },
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "Awesome, thanks for the rebase.",
          "createdAt": "2022-12-16T00:00:52Z",
          "updatedAt": "2022-12-16T00:00:52Z",
          "comments": []
        }
      ]
    },
    {
      "number": 233,
      "id": "PR_kwDOE6fLGM5FKque",
      "title": "Opsdir review nits",
      "url": "https://github.com/ietf-wg-ohai/oblivious-http/pull/233",
      "state": "MERGED",
      "author": "martinthomson",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2022-12-12T09:32:38Z",
      "updatedAt": "2022-12-15T19:39:44Z",
      "baseRepository": "ietf-wg-ohai/oblivious-http",
      "baseRefName": "main",
      "baseRefOid": "85315d6dfe353e9e663cef876f872b1856dcd5bf",
      "headRepository": "ietf-wg-ohai/oblivious-http",
      "headRefName": "opsdir",
      "headRefOid": "5c2279be4bbce0a8b6b48d7303f917c17ba929a3",
      "closedAt": "2022-12-15T19:39:43Z",
      "mergedAt": "2022-12-15T19:39:43Z",
      "mergedBy": "chris-wood",
      "mergeCommit": {
        "oid": "858212638862028efd73ba4de1a56de00594d1bc"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOE6fLGM5ItTfy",
          "commit": {
            "abbreviatedOid": "b8e2c00"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2022-12-15T19:37:15Z",
          "updatedAt": "2022-12-15T19:37:15Z",
          "comments": []
        }
      ]
    },
    {
      "number": 234,
      "id": "PR_kwDOE6fLGM5FmB8O",
      "title": "Fix a typo and use \"resource\" more",
      "url": "https://github.com/ietf-wg-ohai/oblivious-http/pull/234",
      "state": "MERGED",
      "author": "martinthomson",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2022-12-16T00:26:41Z",
      "updatedAt": "2022-12-16T00:26:54Z",
      "baseRepository": "ietf-wg-ohai/oblivious-http",
      "baseRefName": "main",
      "baseRefOid": "c0a8cc97872600f521853b3d5b94da6a69dc27ea",
      "headRepository": "ietf-wg-ohai/oblivious-http",
      "headRefName": "typos",
      "headRefOid": "8a39b78f91bd61009ba5e1e4d4273ea199c33fc9",
      "closedAt": "2022-12-16T00:26:53Z",
      "mergedAt": "2022-12-16T00:26:53Z",
      "mergedBy": "martinthomson",
      "mergeCommit": {
        "oid": "64ce1c4f66546f19891fe0501a70489a685361a3"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 235,
      "id": "PR_kwDOE6fLGM5FnGyK",
      "title": "Editorial nits from Peter Yee",
      "url": "https://github.com/ietf-wg-ohai/oblivious-http/pull/235",
      "state": "MERGED",
      "author": "martinthomson",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Lots of little things here, but very good, all of them.",
      "createdAt": "2022-12-16T06:06:03Z",
      "updatedAt": "2022-12-19T14:44:03Z",
      "baseRepository": "ietf-wg-ohai/oblivious-http",
      "baseRefName": "main",
      "baseRefOid": "64ce1c4f66546f19891fe0501a70489a685361a3",
      "headRepository": "ietf-wg-ohai/oblivious-http",
      "headRefName": "yee",
      "headRefOid": "abbad2d2bb457b183885274040576a2b0dde54bd",
      "closedAt": "2022-12-19T14:44:02Z",
      "mergedAt": "2022-12-19T14:44:02Z",
      "mergedBy": "chris-wood",
      "mergeCommit": {
        "oid": "8779230d2545048d252752f8255ec5e01471340f"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOE6fLGM5I5do-",
          "commit": {
            "abbreviatedOid": "abbad2d"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "Many good things!",
          "createdAt": "2022-12-19T14:43:30Z",
          "updatedAt": "2022-12-19T14:43:30Z",
          "comments": []
        }
      ]
    },
    {
      "number": 236,
      "id": "PR_kwDOE6fLGM5FnOz3",
      "title": "Better describe the content of various things",
      "url": "https://github.com/ietf-wg-ohai/oblivious-http/pull/236",
      "state": "MERGED",
      "author": "martinthomson",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "We previously only had figures, which are sort of illustrative only, they don't really work as normative specification. The content of these really needs to have words that describe what was intended.\r\n\r\nThe definition for the request was already sort-of there, so what I've added is a tiny bit repetitive, but I think that it's OK in this case to have the descriptions at different levels of specificity.\r\n\r\nThe big error here was that the length field in the key configuration was impossible to decipher.  We never said whether it was length in bytes (what has been implemented) or length in number of items.  The bounds on the field length were not helpful here as they were not correct in any way.  I've corrected this value, but would appreciate a sanity check.\r\n\r\nNo one identified this as a problem in the reviews.  I guess that means that the QUIC format is clear and understandable.  Maybe I should have made it less so.  The TLS format is consistently misunderstood, which I used to think was a disadvantage...",
      "createdAt": "2022-12-16T06:49:37Z",
      "updatedAt": "2022-12-20T00:57:34Z",
      "baseRepository": "ietf-wg-ohai/oblivious-http",
      "baseRefName": "main",
      "baseRefOid": "8779230d2545048d252752f8255ec5e01471340f",
      "headRepository": "ietf-wg-ohai/oblivious-http",
      "headRefName": "describe-config-content",
      "headRefOid": "c7a28e2011495a718d08a981896d760a46ccd20b",
      "closedAt": "2022-12-20T00:57:34Z",
      "mergedAt": "2022-12-20T00:57:33Z",
      "mergedBy": "martinthomson",
      "mergeCommit": {
        "oid": "5e3d754f14544fd9d956fd0fd0af877a779fce7e"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOE6fLGM5I5e1l",
          "commit": {
            "abbreviatedOid": "31c4a06"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "This is definitely helpful. Thanks for making the change.",
          "createdAt": "2022-12-19T14:46:27Z",
          "updatedAt": "2022-12-19T14:47:58Z",
          "comments": [
            {
              "originalPosition": 29,
              "body": "```suggestion\r\n: The public key used by the gateway. The length of this value depends on the `Npk` parameter,\r\n  which is determined by the choice of HPKE KEM {{Section 4 of HPKE}}.\r\n```",
              "createdAt": "2022-12-19T14:46:28Z",
              "updatedAt": "2022-12-19T14:47:58Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOE6fLGM5I7-Xa",
          "commit": {
            "abbreviatedOid": "31c4a06"
          },
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-12-20T00:02:26Z",
          "updatedAt": "2022-12-20T00:02:27Z",
          "comments": [
            {
              "originalPosition": 29,
              "body": "How about:\r\n\r\n```suggestion\r\n: The public key used by the gateway. The length of the public key is `Npk`, which is\r\n  determined by the choice of HPKE KEM as defined in {{Section 4 of HPKE}}.\r\n```",
              "createdAt": "2022-12-20T00:02:26Z",
              "updatedAt": "2022-12-20T00:02:27Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOE6fLGM5I7_bS",
          "commit": {
            "abbreviatedOid": "066eda3"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-12-20T00:10:34Z",
          "updatedAt": "2022-12-20T00:10:34Z",
          "comments": [
            {
              "originalPosition": 29,
              "body": "Perfect!",
              "createdAt": "2022-12-20T00:10:34Z",
              "updatedAt": "2022-12-20T00:10:34Z"
            }
          ]
        }
      ]
    },
    {
      "number": 237,
      "id": "PR_kwDOE6fLGM5GhCn2",
      "title": "Murray's AD review",
      "url": "https://github.com/ietf-wg-ohai/oblivious-http/pull/237",
      "state": "MERGED",
      "author": "martinthomson",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Why is it that media type registration is a journey of discovery each and every time?  It's like the coastline paradox: the closer you get, the more detail resolves.  Also, each requirement makes sense in isolation, but if you need an entire RFC to explain it, maybe something has gone wrong.",
      "createdAt": "2023-01-03T04:39:52Z",
      "updatedAt": "2023-01-05T03:21:10Z",
      "baseRepository": "ietf-wg-ohai/oblivious-http",
      "baseRefName": "main",
      "baseRefOid": "5e3d754f14544fd9d956fd0fd0af877a779fce7e",
      "headRepository": "ietf-wg-ohai/oblivious-http",
      "headRefName": "murray",
      "headRefOid": "388d637d46eedf5173fa96b4fbec6bc1280b306d",
      "closedAt": "2023-01-05T03:21:10Z",
      "mergedAt": "2023-01-05T03:21:10Z",
      "mergedBy": "martinthomson",
      "mergeCommit": {
        "oid": "826e62c3e80b2bf9fd1503bae74ce554546ccee2"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOE6fLGM5Jmd86",
          "commit": {
            "abbreviatedOid": "388d637"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "\ud83e\udd37\u200d\u2642\ufe0fno strong feelings on this one.",
          "createdAt": "2023-01-03T16:42:55Z",
          "updatedAt": "2023-01-03T16:42:55Z",
          "comments": []
        }
      ]
    },
    {
      "number": 238,
      "id": "PR_kwDOE6fLGM5GkjUh",
      "title": "Roman's review feedback",
      "url": "https://github.com/ietf-wg-ohai/oblivious-http/pull/238",
      "state": "MERGED",
      "author": "martinthomson",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "See commits for details.",
      "createdAt": "2023-01-03T21:59:51Z",
      "updatedAt": "2023-01-04T23:44:04Z",
      "baseRepository": "ietf-wg-ohai/oblivious-http",
      "baseRefName": "main",
      "baseRefOid": "5e3d754f14544fd9d956fd0fd0af877a779fce7e",
      "headRepository": "ietf-wg-ohai/oblivious-http",
      "headRefName": "roman",
      "headRefOid": "33b3ef1d375cce7e7357cff95c88906b43e8ecd8",
      "closedAt": "2023-01-04T23:44:03Z",
      "mergedAt": "2023-01-04T23:44:03Z",
      "mergedBy": "martinthomson",
      "mergeCommit": {
        "oid": "aa5214cbae822e161c5447d48366ef79ec24f8eb"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOE6fLGM5JtBtH",
          "commit": {
            "abbreviatedOid": "b3475ee"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "CHANGES_REQUESTED",
          "body": "",
          "createdAt": "2023-01-04T22:04:22Z",
          "updatedAt": "2023-01-04T22:07:37Z",
          "comments": [
            {
              "originalPosition": 11,
              "body": "Not asking for a change, but more offering a comment: now that I'm re-reading this text it occurs to me that this is overly restrictive. Unlinkability only requires HTTPS between client and relay, not between relay and gateway. I don't think we want to get into that nuance, but the phrasing here makes it seem like encryption on both links is necessary and so not strictly true.",
              "createdAt": "2023-01-04T22:04:22Z",
              "updatedAt": "2023-01-04T22:07:37Z"
            },
            {
              "originalPosition": 28,
              "body": "```suggestion\r\nthat uniquely and permanently identifies the Client, including any pseudonymous identifier.\r\n```\r\n\r\nWe've talked about use of identifiers for \"buckets\" of clients for the purposes of DoS protection. I don't believe in the value they afford, but this text seems like it might prohibit that and prevent use of OHTTP for use cases that would certainly benefit from it. The proposed change tries to clarify that information added shouldn't be unique to a client for a long period of time, as that's basically equivalent to a unique client identifier. But something that changes regularly, or identifies a group of clients, seems reasonable in certain deployments.",
              "createdAt": "2023-01-04T22:07:34Z",
              "updatedAt": "2023-01-04T22:07:37Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOE6fLGM5JtON5",
          "commit": {
            "abbreviatedOid": "b3475ee"
          },
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-01-04T23:05:47Z",
          "updatedAt": "2023-01-04T23:05:47Z",
          "comments": [
            {
              "originalPosition": 11,
              "body": "Yes, I had the same thought when constructing the text.  I know we discussed this in the past too.\r\n\r\nWe could remove the second half of the requirement, but I think that I'm with you in leaving well alone.",
              "createdAt": "2023-01-04T23:05:47Z",
              "updatedAt": "2023-01-04T23:05:47Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOE6fLGM5JtOgY",
          "commit": {
            "abbreviatedOid": "b3475ee"
          },
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-01-04T23:07:37Z",
          "updatedAt": "2023-01-04T23:07:37Z",
          "comments": [
            {
              "originalPosition": 28,
              "body": "Right.  This is just a more precise wording either way.\r\n\r\nThe specific circumstances that might motivate some form of \"identification\" will require careful consideration on the part of all involved, so we don't need to get too deep into specifics.",
              "createdAt": "2023-01-04T23:07:37Z",
              "updatedAt": "2023-01-04T23:07:37Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOE6fLGM5JtRbt",
          "commit": {
            "abbreviatedOid": "33b3ef1"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-01-04T23:27:29Z",
          "updatedAt": "2023-01-04T23:27:29Z",
          "comments": [
            {
              "originalPosition": 11,
              "body": "Yeah, I'll just resolve this comment.",
              "createdAt": "2023-01-04T23:27:29Z",
              "updatedAt": "2023-01-04T23:27:29Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOE6fLGM5JtRhT",
          "commit": {
            "abbreviatedOid": "33b3ef1"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2023-01-04T23:28:03Z",
          "updatedAt": "2023-01-04T23:28:03Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOE6fLGM5JtRvO",
          "commit": {
            "abbreviatedOid": "33b3ef1"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2023-01-04T23:29:36Z",
          "updatedAt": "2023-01-04T23:29:36Z",
          "comments": []
        }
      ]
    },
    {
      "number": 239,
      "id": "PR_kwDOE6fLGM5HB4vk",
      "title": "A small grammatical tweak",
      "url": "https://github.com/ietf-wg-ohai/oblivious-http/pull/239",
      "state": "MERGED",
      "author": "martinthomson",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "This didn't have subject-object agreement previously.",
      "createdAt": "2023-01-10T01:04:48Z",
      "updatedAt": "2023-01-12T11:15:18Z",
      "baseRepository": "ietf-wg-ohai/oblivious-http",
      "baseRefName": "main",
      "baseRefOid": "826e62c3e80b2bf9fd1503bae74ce554546ccee2",
      "headRepository": "ietf-wg-ohai/oblivious-http",
      "headRefName": "grammar-tweak",
      "headRefOid": "9306dcdf2a576a7101dea0385b4bf29be2d2fde0",
      "closedAt": "2023-01-12T11:15:17Z",
      "mergedAt": "2023-01-12T11:15:17Z",
      "mergedBy": "chris-wood",
      "mergeCommit": {
        "oid": "01e5ab6db0778ed8769963f6104afe8ab988802a"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOE6fLGM5KEJJW",
          "commit": {
            "abbreviatedOid": "9306dcd"
          },
          "author": "tfpauly",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2023-01-10T16:33:51Z",
          "updatedAt": "2023-01-10T16:33:51Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOE6fLGM5KO4C-",
          "commit": {
            "abbreviatedOid": "9306dcd"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2023-01-12T11:15:10Z",
          "updatedAt": "2023-01-12T11:15:10Z",
          "comments": []
        }
      ]
    },
    {
      "number": 240,
      "id": "PR_kwDOE6fLGM5Hf_99",
      "title": "Appease Lars Eggert's automated nit finder",
      "url": "https://github.com/ietf-wg-ohai/oblivious-http/pull/240",
      "state": "MERGED",
      "author": "martinthomson",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2023-01-16T22:52:01Z",
      "updatedAt": "2023-01-20T02:50:23Z",
      "baseRepository": "ietf-wg-ohai/oblivious-http",
      "baseRefName": "main",
      "baseRefOid": "d1d9e94662ba9662058bd13d7853a9b26bed9373",
      "headRepository": "ietf-wg-ohai/oblivious-http",
      "headRefName": "lars",
      "headRefOid": "b78fdc5ede639d77055c6c599880ae820bade739",
      "closedAt": "2023-01-20T02:50:22Z",
      "mergedAt": "2023-01-20T02:50:22Z",
      "mergedBy": "martinthomson",
      "mergeCommit": {
        "oid": "aa37d9152240714fbd3b1c35767f20ac7d72b170"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOE6fLGM5LOGDZ",
          "commit": {
            "abbreviatedOid": "f4bc5e9"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2023-01-19T15:02:59Z",
          "updatedAt": "2023-01-19T15:02:59Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOE6fLGM5LOI-e",
          "commit": {
            "abbreviatedOid": "f4bc5e9"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "LGTM pending suggestion",
          "createdAt": "2023-01-19T15:09:09Z",
          "updatedAt": "2023-01-19T15:09:16Z",
          "comments": [
            {
              "originalPosition": 16,
              "body": "```suggestion\r\nNon-secure requests - such as those with the \"http\" scheme as opposed to the\r\n```\r\n\r\nThis feels better to me, so I'd prefer to stick with non-secure.",
              "createdAt": "2023-01-19T15:09:09Z",
              "updatedAt": "2023-01-19T15:09:17Z"
            }
          ]
        }
      ]
    },
    {
      "number": 241,
      "id": "PR_kwDOE6fLGM5HlHa6",
      "title": "Template update",
      "url": "https://github.com/ietf-wg-ohai/oblivious-http/pull/241",
      "state": "MERGED",
      "author": "martinthomson",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Automated updates for all the CI and build stuff",
      "createdAt": "2023-01-17T22:22:44Z",
      "updatedAt": "2023-01-19T15:05:04Z",
      "baseRepository": "ietf-wg-ohai/oblivious-http",
      "baseRefName": "main",
      "baseRefOid": "01e5ab6db0778ed8769963f6104afe8ab988802a",
      "headRepository": "ietf-wg-ohai/oblivious-http",
      "headRefName": "template-update",
      "headRefOid": "a066c21b5bc1bbb63eda9b14defc6a5120978259",
      "closedAt": "2023-01-19T15:05:02Z",
      "mergedAt": "2023-01-19T15:05:02Z",
      "mergedBy": "chris-wood",
      "mergeCommit": {
        "oid": "767073612b8cc6cd66174e450ee7710ac73f7dba"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOE6fLGM5LOG-K",
          "commit": {
            "abbreviatedOid": "a066c21"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2023-01-19T15:04:56Z",
          "updatedAt": "2023-01-19T15:04:56Z",
          "comments": []
        }
      ]
    },
    {
      "number": 252,
      "id": "PR_kwDOE6fLGM5HlQu9",
      "title": "Include key configuration description in the registration",
      "url": "https://github.com/ietf-wg-ohai/oblivious-http/pull/252",
      "state": "MERGED",
      "author": "martinthomson",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Closes #243.",
      "createdAt": "2023-01-17T23:16:34Z",
      "updatedAt": "2023-01-19T15:05:32Z",
      "baseRepository": "ietf-wg-ohai/oblivious-http",
      "baseRefName": "main",
      "baseRefOid": "01e5ab6db0778ed8769963f6104afe8ab988802a",
      "headRepository": "ietf-wg-ohai/oblivious-http",
      "headRefName": "media-type-fixup",
      "headRefOid": "6aa468ba8538796f5de0f628346faab4b93fd3d1",
      "closedAt": "2023-01-19T15:05:31Z",
      "mergedAt": "2023-01-19T15:05:31Z",
      "mergedBy": "chris-wood",
      "mergeCommit": {
        "oid": "eae7e85110ea07989f05cf3fb439cbd44a62b684"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOE6fLGM5LOHNu",
          "commit": {
            "abbreviatedOid": "6aa468b"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2023-01-19T15:05:25Z",
          "updatedAt": "2023-01-19T15:05:25Z",
          "comments": []
        }
      ]
    },
    {
      "number": 253,
      "id": "PR_kwDOE6fLGM5IE5K_",
      "title": "Some tweaks from Martin Duke's review",
      "url": "https://github.com/ietf-wg-ohai/oblivious-http/pull/253",
      "state": "MERGED",
      "author": "martinthomson",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "YES rather than DISCUSS is good.  Good feedback is gooder.",
      "createdAt": "2023-01-18T22:56:49Z",
      "updatedAt": "2023-01-19T15:06:08Z",
      "baseRepository": "ietf-wg-ohai/oblivious-http",
      "baseRefName": "main",
      "baseRefOid": "01e5ab6db0778ed8769963f6104afe8ab988802a",
      "headRepository": "ietf-wg-ohai/oblivious-http",
      "headRefName": "duke",
      "headRefOid": "7223132e5dec0650d165b6c6a1adddcee1cac3a5",
      "closedAt": "2023-01-19T15:06:07Z",
      "mergedAt": "2023-01-19T15:06:07Z",
      "mergedBy": "chris-wood",
      "mergeCommit": {
        "oid": "d1d9e94662ba9662058bd13d7853a9b26bed9373"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOE6fLGM5LKDtD",
          "commit": {
            "abbreviatedOid": "a0044ec"
          },
          "author": "martinduke",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "LGTM, thanks",
          "createdAt": "2023-01-18T23:30:46Z",
          "updatedAt": "2023-01-18T23:30:58Z",
          "comments": [
            {
              "originalPosition": 20,
              "body": "```suggestion\r\nprotection if the two resources share an origin.\r\n```\r\nI think the word \"even\" is out of place given that the first sentence implies this consequence",
              "createdAt": "2023-01-18T23:30:46Z",
              "updatedAt": "2023-01-18T23:30:58Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOE6fLGM5LOHfv",
          "commit": {
            "abbreviatedOid": "7223132"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2023-01-19T15:05:59Z",
          "updatedAt": "2023-01-19T15:05:59Z",
          "comments": []
        }
      ]
    },
    {
      "number": 254,
      "id": "PR_kwDOE6fLGM5II1hd",
      "title": "\u00c9ric comments",
      "url": "https://github.com/ietf-wg-ohai/oblivious-http/pull/254",
      "state": "CLOSED",
      "author": "chris-wood",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2023-01-19T15:36:21Z",
      "updatedAt": "2023-01-19T22:52:17Z",
      "baseRepository": "ietf-wg-ohai/oblivious-http",
      "baseRefName": "main",
      "baseRefOid": "d1d9e94662ba9662058bd13d7853a9b26bed9373",
      "headRepository": "ietf-wg-ohai/oblivious-http",
      "headRefName": "caw/more-specific-server",
      "headRefOid": "576a0c02e4531c9957015e70294632138f14d99e",
      "closedAt": "2023-01-19T22:51:48Z",
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [
        {
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "body": "@martinthomson I'm not particularly interested in a bike shed so I'm just going to close this.",
          "createdAt": "2023-01-19T22:52:16Z",
          "updatedAt": "2023-01-19T22:52:16Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOE6fLGM5LQ95S",
          "commit": {
            "abbreviatedOid": "576a0c0"
          },
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-01-19T22:38:28Z",
          "updatedAt": "2023-01-19T22:40:41Z",
          "comments": [
            {
              "originalPosition": 5,
              "body": "I think you should change all instances here, rather than just the first.  Probably the next paragraph too.  \r\n\r\n\r\nBut ... we say above \"servers that operate the Oblivious Gateway Resource\", which I think is crucial here.  This uses \"server\" because it is about protecting the server infrastructure, not a specific resource.  So I think we should revert this one.",
              "createdAt": "2023-01-19T22:38:28Z",
              "updatedAt": "2023-01-19T22:40:41Z"
            }
          ]
        }
      ]
    },
    {
      "number": 256,
      "id": "PR_kwDOE6fLGM5ISgKq",
      "title": "Update reference labels",
      "url": "https://github.com/ietf-wg-ohai/oblivious-http/pull/256",
      "state": "MERGED",
      "author": "martinthomson",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Dingledine2004 -> DMS2004\r\nODoH -> ODOH-PETS\r\n\r\nCloses #246.\r\nCloses #251.",
      "createdAt": "2023-01-23T01:25:15Z",
      "updatedAt": "2023-01-23T01:27:32Z",
      "baseRepository": "ietf-wg-ohai/oblivious-http",
      "baseRefName": "main",
      "baseRefOid": "aa37d9152240714fbd3b1c35767f20ac7d72b170",
      "headRepository": "ietf-wg-ohai/oblivious-http",
      "headRefName": "oh-no-odoh",
      "headRefOid": "b1b49de6a10128e324f05509844867a955d08068",
      "closedAt": "2023-01-23T01:27:31Z",
      "mergedAt": "2023-01-23T01:27:31Z",
      "mergedBy": "martinthomson",
      "mergeCommit": {
        "oid": "3d2666f4399c9db51a5ed59d0b4b5d20d1bf474c"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOE6fLGM5LZUX-",
          "commit": {
            "abbreviatedOid": "b1b49de"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2023-01-23T01:26:05Z",
          "updatedAt": "2023-01-23T01:26:05Z",
          "comments": []
        }
      ]
    },
    {
      "number": 257,
      "id": "PR_kwDOE6fLGM5ISgQy",
      "title": "The gateway can pad too",
      "url": "https://github.com/ietf-wg-ohai/oblivious-http/pull/257",
      "state": "MERGED",
      "author": "martinthomson",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Closes #255.",
      "createdAt": "2023-01-23T01:26:45Z",
      "updatedAt": "2023-01-24T23:16:58Z",
      "baseRepository": "ietf-wg-ohai/oblivious-http",
      "baseRefName": "main",
      "baseRefOid": "aa37d9152240714fbd3b1c35767f20ac7d72b170",
      "headRepository": "ietf-wg-ohai/oblivious-http",
      "headRefName": "pad-gateway",
      "headRefOid": "5b78a53e61ff9be37e5626dd4d391ab95e134555",
      "closedAt": "2023-01-24T23:16:57Z",
      "mergedAt": "2023-01-24T23:16:57Z",
      "mergedBy": "martinthomson",
      "mergeCommit": {
        "oid": "f43e74be7e6fae3c3cb8c277779e8d28ebda0425"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOE6fLGM5LcHfy",
          "commit": {
            "abbreviatedOid": "5b78a53"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "CHANGES_REQUESTED",
          "body": "",
          "createdAt": "2023-01-23T14:07:27Z",
          "updatedAt": "2023-01-23T14:07:31Z",
          "comments": [
            {
              "originalPosition": 13,
              "body": "```suggestion\r\nClients and Oblivious Gateway Resources can use padding to reduce\r\nthe effectiveness of traffic analysis. Padding is a capability provided by binary\r\nHTTP messages; see {{Section 3.8 of BINARY}}.  If the encapsulation method\r\ndescribed in this document is used to protect a different message type (see\r\n{{repurposing}}), that message format might need to include padding support.\r\nOblivious Relay Resources can also use padding for the same reason, though\r\nthe mechanism for doing so is via header or trailer fields.\r\n```\r\n\r\n~The current text makes it seem like the gateway pads via BHTTP, which isn't possible. So in this suggested text I tried to make it clear that the gateway can also pad, but it requires a separate mechanism.~\r\n\r\nEdited to make sense. Sorry...",
              "createdAt": "2023-01-23T14:07:27Z",
              "updatedAt": "2023-01-24T14:02:10Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOE6fLGM5Lfzzz",
          "commit": {
            "abbreviatedOid": "5b78a53"
          },
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-01-24T00:21:17Z",
          "updatedAt": "2023-01-24T00:21:18Z",
          "comments": [
            {
              "originalPosition": 13,
              "body": "Isn't it possible for the gateway to pad responses?",
              "createdAt": "2023-01-24T00:21:17Z",
              "updatedAt": "2023-01-24T00:21:18Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOE6fLGM5LjWG6",
          "commit": {
            "abbreviatedOid": "5b78a53"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-01-24T14:02:50Z",
          "updatedAt": "2023-01-24T14:02:50Z",
          "comments": [
            {
              "originalPosition": 13,
              "body": "\ud83e\udd26 yes, sorry, I read this as the _relay_, not the _gateway_, even though I wrote out the word \"gateway.\" I updated my suggestion to match yours but also mention that it's possible for the relay to pad.",
              "createdAt": "2023-01-24T14:02:50Z",
              "updatedAt": "2023-01-24T14:02:50Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOE6fLGM5LkCNp",
          "commit": {
            "abbreviatedOid": "5b78a53"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "Flipping to approve, with or without my suggestion. Sorry again for my confusion.",
          "createdAt": "2023-01-24T15:34:20Z",
          "updatedAt": "2023-01-24T15:34:20Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOE6fLGM5Lm1fW",
          "commit": {
            "abbreviatedOid": "5b78a53"
          },
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-01-24T23:15:41Z",
          "updatedAt": "2023-01-24T23:15:41Z",
          "comments": [
            {
              "originalPosition": 13,
              "body": "I'm on the edge about the relay.  There are definitely advantages in terms of traffic analysis resistance, so I think we can handle the offhand mention.",
              "createdAt": "2023-01-24T23:15:41Z",
              "updatedAt": "2023-01-24T23:15:41Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOE6fLGM5Lm1t9",
          "commit": {
            "abbreviatedOid": "5b78a53"
          },
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-01-24T23:16:54Z",
          "updatedAt": "2023-01-24T23:16:54Z",
          "comments": [
            {
              "originalPosition": 13,
              "body": "On consideration, I'm going to make a suggestion for the relay in a separate PR.",
              "createdAt": "2023-01-24T23:16:54Z",
              "updatedAt": "2023-01-24T23:16:54Z"
            }
          ]
        }
      ]
    },
    {
      "number": 258,
      "id": "PR_kwDOE6fLGM5ISgcR",
      "title": "Include key configuration description in the registration",
      "url": "https://github.com/ietf-wg-ohai/oblivious-http/pull/258",
      "state": "MERGED",
      "author": "martinthomson",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Left-overs from some other changes.",
      "createdAt": "2023-01-23T01:29:13Z",
      "updatedAt": "2023-01-23T05:21:01Z",
      "baseRepository": "ietf-wg-ohai/oblivious-http",
      "baseRefName": "main",
      "baseRefOid": "3d2666f4399c9db51a5ed59d0b4b5d20d1bf474c",
      "headRepository": "ietf-wg-ohai/oblivious-http",
      "headRefName": "wouters",
      "headRefOid": "7adb2e63d4925762ecbb37fc2c2628000cefa90c",
      "closedAt": "2023-01-23T05:21:00Z",
      "mergedAt": "2023-01-23T05:21:00Z",
      "mergedBy": "martinthomson",
      "mergeCommit": {
        "oid": "7d427aee0604e707c43cf9b40b724857aa6fc1e4"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOE6fLGM5LZUn4",
          "commit": {
            "abbreviatedOid": "7adb2e6"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2023-01-23T01:29:46Z",
          "updatedAt": "2023-01-23T01:29:46Z",
          "comments": []
        }
      ]
    },
    {
      "number": 259,
      "id": "PR_kwDOE6fLGM5ISgj4",
      "title": "s/ensures/can trust/",
      "url": "https://github.com/ietf-wg-ohai/oblivious-http/pull/259",
      "state": "MERGED",
      "author": "martinthomson",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "The client relies on a very specific form of trust here, though maybe they have other means to ensure compliance, it's trust that operates here.\r\n\r\nCloses #249.",
      "createdAt": "2023-01-23T01:30:49Z",
      "updatedAt": "2023-01-23T04:53:42Z",
      "baseRepository": "ietf-wg-ohai/oblivious-http",
      "baseRefName": "main",
      "baseRefOid": "3d2666f4399c9db51a5ed59d0b4b5d20d1bf474c",
      "headRepository": "ietf-wg-ohai/oblivious-http",
      "headRefName": "ensure-trust",
      "headRefOid": "70fdb91a104aea6676ab2d66d508fc205e821db1",
      "closedAt": "2023-01-23T04:53:41Z",
      "mergedAt": "2023-01-23T04:53:41Z",
      "mergedBy": "martinthomson",
      "mergeCommit": {
        "oid": "06040690ededec60474b5bdc8d822fc9a86f587f"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOE6fLGM5LZUua",
          "commit": {
            "abbreviatedOid": "70fdb91"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2023-01-23T01:31:20Z",
          "updatedAt": "2023-01-23T01:31:20Z",
          "comments": []
        }
      ]
    },
    {
      "number": 260,
      "id": "PR_kwDOE6fLGM5IeEll",
      "title": "A relay can pad too",
      "url": "https://github.com/ietf-wg-ohai/oblivious-http/pull/260",
      "state": "MERGED",
      "author": "martinthomson",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "This came out of #257, where we realized that the relay padding is useful, but needs to employ different methods than client or gateway. The relay can't use binary HTTP padding; it has to insert stuff at the HTTP layer.  Include citations for padding in those documents.\r\n\r\nNote that these citations are slightly misleading.  Most relays won't have access at the level necessary to add that padding.  More likely, the relay will need to do as @chris-wood originally suggested, namely adding fields of an appropriate size.  But we don't have good citations for that, so I'm cheaping out.  (Note that RFC 9112, Section 7.1.1 talks about using chunk extensions for padding, but I'm going to pretend that doesn't exist; it's even less usable than the HTTP/2 and HTTP/3 options.)",
      "createdAt": "2023-01-24T23:25:46Z",
      "updatedAt": "2023-01-24T23:51:22Z",
      "baseRepository": "ietf-wg-ohai/oblivious-http",
      "baseRefName": "main",
      "baseRefOid": "f43e74be7e6fae3c3cb8c277779e8d28ebda0425",
      "headRepository": "ietf-wg-ohai/oblivious-http",
      "headRefName": "relay-pad",
      "headRefOid": "56803e9bfcd317e0899ef7878d9e1f50dcf37f97",
      "closedAt": "2023-01-24T23:51:21Z",
      "mergedAt": "2023-01-24T23:51:21Z",
      "mergedBy": "martinthomson",
      "mergeCommit": {
        "oid": "72a2baf3f05c8b554164864262db5ebd87e9fc87"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOE6fLGM5Lm6Gg",
          "commit": {
            "abbreviatedOid": "30344a9"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "Take it or leave it!",
          "createdAt": "2023-01-24T23:42:11Z",
          "updatedAt": "2023-01-24T23:42:19Z",
          "comments": [
            {
              "originalPosition": 6,
              "body": "```suggestion\r\noperate at the HTTP layer since they cannot manipulate binary HTTP messages; for example,\r\nsee {{Section 10.7 of HTTP2}} or {{Section 10.7 of HTTP3}}).\r\n```",
              "createdAt": "2023-01-24T23:42:11Z",
              "updatedAt": "2023-01-24T23:51:01Z"
            }
          ]
        }
      ]
    },
    {
      "number": 263,
      "id": "PR_kwDOE6fLGM5IeN-s",
      "title": "More about timing and windows and anti-replay",
      "url": "https://github.com/ietf-wg-ohai/oblivious-http/pull/263",
      "state": "MERGED",
      "author": "martinthomson",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2023-01-25T00:12:26Z",
      "updatedAt": "2023-01-26T23:39:21Z",
      "baseRepository": "ietf-wg-ohai/oblivious-http",
      "baseRefName": "main",
      "baseRefOid": "72a2baf3f05c8b554164864262db5ebd87e9fc87",
      "headRepository": "ietf-wg-ohai/oblivious-http",
      "headRefName": "issue261",
      "headRefOid": "cd69fde521b05b20d6676f1d0165200bbea9b259",
      "closedAt": "2023-01-25T00:19:59Z",
      "mergedAt": "2023-01-25T00:19:59Z",
      "mergedBy": "martinthomson",
      "mergeCommit": {
        "oid": "72fd3757195c87f38692eae1c893590289e8283c"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOE6fLGM5LnEHV",
          "commit": {
            "abbreviatedOid": "cd69fde"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2023-01-25T00:18:03Z",
          "updatedAt": "2023-01-25T00:18:03Z",
          "comments": []
        }
      ]
    },
    {
      "number": 264,
      "id": "PR_kwDOE6fLGM5IjJfh",
      "title": "nit: Add a preposition to complete the sentence.",
      "url": "https://github.com/ietf-wg-ohai/oblivious-http/pull/264",
      "state": "MERGED",
      "author": "aawc",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "\"and a set HPKE\" => \"and a set of HPKE\"",
      "createdAt": "2023-01-25T22:02:02Z",
      "updatedAt": "2023-01-26T10:41:23Z",
      "baseRepository": "ietf-wg-ohai/oblivious-http",
      "baseRefName": "main",
      "baseRefOid": "72fd3757195c87f38692eae1c893590289e8283c",
      "headRepository": "aawc/oblivious-http",
      "headRefName": "patch-preposition",
      "headRefOid": "a2ae41296bb52fc51391b2beff908808be8856e9",
      "closedAt": "2023-01-26T10:40:38Z",
      "mergedAt": "2023-01-26T10:40:38Z",
      "mergedBy": "chris-wood",
      "mergeCommit": {
        "oid": "da3ac2b2cd857be7518173a42415b48b34375dcd"
      },
      "comments": [
        {
          "author": "aawc",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Thanks for the quick review and approval, @chris-wood\r\n\r\nI haven't used the GitHub UI for submitting PRs in a long time so please pardon my lack of understanding here but I still don't see a way to merge the PR. Does it also need a review from @martinthomson ?",
          "createdAt": "2023-01-26T07:22:13Z",
          "updatedAt": "2023-01-26T07:22:13Z"
        },
        {
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "body": "@aawc it doesn't technically need a review from Martin. The pattern we seem to have landed on is that one of us merges once both approve, but this is simple enough that I just merged it now. Thanks for sending the PR!",
          "createdAt": "2023-01-26T10:41:22Z",
          "updatedAt": "2023-01-26T10:41:22Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOE6fLGM5LtbgB",
          "commit": {
            "abbreviatedOid": "a2ae412"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2023-01-25T22:05:38Z",
          "updatedAt": "2023-01-25T22:05:38Z",
          "comments": []
        }
      ]
    },
    {
      "number": 265,
      "id": "PR_kwDOE6fLGM5I9hfN",
      "title": "Update key consistency reference",
      "url": "https://github.com/ietf-wg-ohai/oblivious-http/pull/265",
      "state": "MERGED",
      "author": "martinthomson",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2023-02-01T00:47:23Z",
      "updatedAt": "2023-02-01T00:52:31Z",
      "baseRepository": "ietf-wg-ohai/oblivious-http",
      "baseRefName": "main",
      "baseRefOid": "da3ac2b2cd857be7518173a42415b48b34375dcd",
      "headRepository": "ietf-wg-ohai/oblivious-http",
      "headRefName": "consistency-ref",
      "headRefOid": "348d74ee87a21841e9eed353b8520233d0a43d65",
      "closedAt": "2023-02-01T00:52:30Z",
      "mergedAt": "2023-02-01T00:52:30Z",
      "mergedBy": "chris-wood",
      "mergeCommit": {
        "oid": "35474c78a7c23afbb0f1656c9d9cf208cf5780dc"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOE6fLGM5MMHrt",
          "commit": {
            "abbreviatedOid": "348d74e"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2023-02-01T00:52:23Z",
          "updatedAt": "2023-02-01T00:52:23Z",
          "comments": []
        }
      ]
    },
    {
      "number": 266,
      "id": "PR_kwDOE6fLGM5I9lAL",
      "title": "Going with \"need to\" over \"should\"",
      "url": "https://github.com/ietf-wg-ohai/oblivious-http/pull/266",
      "state": "MERGED",
      "author": "martinthomson",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "This isn't a suggestion, it's a real risk to consider.",
      "createdAt": "2023-02-01T01:05:11Z",
      "updatedAt": "2023-02-01T02:31:12Z",
      "baseRepository": "ietf-wg-ohai/oblivious-http",
      "baseRefName": "main",
      "baseRefOid": "35474c78a7c23afbb0f1656c9d9cf208cf5780dc",
      "headRepository": "ietf-wg-ohai/oblivious-http",
      "headRefName": "need-to",
      "headRefOid": "7668df57ab850703bbbbe2df1284b04aa867e508",
      "closedAt": "2023-02-01T02:31:11Z",
      "mergedAt": "2023-02-01T02:31:11Z",
      "mergedBy": "martinthomson",
      "mergeCommit": {
        "oid": "a335f34f04d1d9a5fd201ffe97da14eef29c58e6"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOE6fLGM5MMJ1m",
          "commit": {
            "abbreviatedOid": "7668df5"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2023-02-01T01:05:57Z",
          "updatedAt": "2023-02-01T01:05:57Z",
          "comments": []
        }
      ]
    },
    {
      "number": 267,
      "id": "PR_kwDOE6fLGM5J0wvW",
      "title": "Revisions to retry text",
      "url": "https://github.com/ietf-wg-ohai/oblivious-http/pull/267",
      "state": "MERGED",
      "author": "martinthomson",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Corrected to mention *response* freshness, with a new citation\r\n\r\nAdded note about timing of a retry revealing RTT\r\n\r\nCorrected figure title grammar",
      "createdAt": "2023-02-13T08:15:06Z",
      "updatedAt": "2023-02-13T22:05:17Z",
      "baseRepository": "ietf-wg-ohai/oblivious-http",
      "baseRefName": "main",
      "baseRefOid": "a335f34f04d1d9a5fd201ffe97da14eef29c58e6",
      "headRepository": "ietf-wg-ohai/oblivious-http",
      "headRefName": "rtt-timing",
      "headRefOid": "d3ba02806975e994f7b8e5a92cf75c540f809e77",
      "closedAt": "2023-02-13T22:05:16Z",
      "mergedAt": "2023-02-13T22:05:16Z",
      "mergedBy": "martinthomson",
      "mergeCommit": {
        "oid": "402cc57a763327d21493face6b671d154afc1fcb"
      },
      "comments": [
        {
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "body": "Nice addition on RTT timing \ud83d\udc4d",
          "createdAt": "2023-02-13T08:19:23Z",
          "updatedAt": "2023-02-13T08:19:23Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOE6fLGM5NMhaO",
          "commit": {
            "abbreviatedOid": "d3ba028"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2023-02-13T08:18:59Z",
          "updatedAt": "2023-02-13T08:18:59Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOE6fLGM5NP73I",
          "commit": {
            "abbreviatedOid": "d3ba028"
          },
          "author": "tfpauly",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2023-02-13T16:33:27Z",
          "updatedAt": "2023-02-13T16:33:27Z",
          "comments": []
        }
      ]
    },
    {
      "number": 268,
      "id": "PR_kwDOE6fLGM5KGDVM",
      "title": "Remove an errant parenthesis",
      "url": "https://github.com/ietf-wg-ohai/oblivious-http/pull/268",
      "state": "MERGED",
      "author": "martinthomson",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2023-02-16T04:38:02Z",
      "updatedAt": "2023-02-16T10:38:43Z",
      "baseRepository": "ietf-wg-ohai/oblivious-http",
      "baseRefName": "main",
      "baseRefOid": "402cc57a763327d21493face6b671d154afc1fcb",
      "headRepository": "ietf-wg-ohai/oblivious-http",
      "headRefName": "paren",
      "headRefOid": "d09335ed086fe62d9f7ed32173584e0f20a9d54a",
      "closedAt": "2023-02-16T10:38:43Z",
      "mergedAt": "2023-02-16T10:38:42Z",
      "mergedBy": "chris-wood",
      "mergeCommit": {
        "oid": "86808344bc6cdf162571938577114a0c9071fb39"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOE6fLGM5Njmqp",
          "commit": {
            "abbreviatedOid": "d09335e"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2023-02-16T10:38:37Z",
          "updatedAt": "2023-02-16T10:38:37Z",
          "comments": []
        }
      ]
    },
    {
      "number": 269,
      "id": "PR_kwDOE6fLGM5KGOrW",
      "title": "Move moustaches for reference",
      "url": "https://github.com/ietf-wg-ohai/oblivious-http/pull/269",
      "state": "MERGED",
      "author": "martinthomson",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2023-02-16T05:39:10Z",
      "updatedAt": "2023-02-16T10:38:24Z",
      "baseRepository": "ietf-wg-ohai/oblivious-http",
      "baseRefName": "main",
      "baseRefOid": "402cc57a763327d21493face6b671d154afc1fcb",
      "headRepository": "ietf-wg-ohai/oblivious-http",
      "headRefName": "link761",
      "headRefOid": "b8cb0b717591b4e7d6ac0e51bb8080526715f401",
      "closedAt": "2023-02-16T10:38:23Z",
      "mergedAt": "2023-02-16T10:38:23Z",
      "mergedBy": "chris-wood",
      "mergeCommit": {
        "oid": "f92e0cdbf43f434520a97a638f95050a8335c56f"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOE6fLGM5Njmjk",
          "commit": {
            "abbreviatedOid": "b8cb0b7"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2023-02-16T10:38:18Z",
          "updatedAt": "2023-02-16T10:38:18Z",
          "comments": []
        }
      ]
    },
    {
      "number": 272,
      "id": "PR_kwDOE6fLGM5KdkSD",
      "title": "The client selects a KDF and AEAD combination",
      "url": "https://github.com/ietf-wg-ohai/oblivious-http/pull/272",
      "state": "MERGED",
      "author": "martinthomson",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Closes #271.",
      "createdAt": "2023-02-21T21:08:10Z",
      "updatedAt": "2023-02-21T21:46:07Z",
      "baseRepository": "ietf-wg-ohai/oblivious-http",
      "baseRefName": "main",
      "baseRefOid": "86808344bc6cdf162571938577114a0c9071fb39",
      "headRepository": "ietf-wg-ohai/oblivious-http",
      "headRefName": "hpke-symmetric",
      "headRefOid": "45db5e5ed579b679dc46396a8dc486af301c8477",
      "closedAt": "2023-02-21T21:46:06Z",
      "mergedAt": "2023-02-21T21:46:06Z",
      "mergedBy": "martinthomson",
      "mergeCommit": {
        "oid": "8470972241f9fae76699b5e06a1e8bcf4c0c8236"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOE6fLGM5N-R-U",
          "commit": {
            "abbreviatedOid": "45db5e5"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2023-02-21T21:12:00Z",
          "updatedAt": "2023-02-21T21:12:00Z",
          "comments": []
        }
      ]
    },
    {
      "number": 274,
      "id": "PR_kwDOE6fLGM5KjtT8",
      "title": "s/extract/export",
      "url": "https://github.com/ietf-wg-ohai/oblivious-http/pull/274",
      "state": "MERGED",
      "author": "chris-wood",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Closes #273.",
      "createdAt": "2023-02-22T22:33:00Z",
      "updatedAt": "2023-02-23T01:13:00Z",
      "baseRepository": "ietf-wg-ohai/oblivious-http",
      "baseRefName": "main",
      "baseRefOid": "8470972241f9fae76699b5e06a1e8bcf4c0c8236",
      "headRepository": "ietf-wg-ohai/oblivious-http",
      "headRefName": "not-extract",
      "headRefOid": "a7fb54539886eb675c0b872dc66bf1bd3ea1d146",
      "closedAt": "2023-02-23T01:12:59Z",
      "mergedAt": "2023-02-23T01:12:59Z",
      "mergedBy": "martinthomson",
      "mergeCommit": {
        "oid": "d4143f2964f81cc959f61dc110025bca5f365bdf"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 275,
      "id": "PR_kwDOE6fLGM5KkCrs",
      "title": "Include a more precise definition for key config",
      "url": "https://github.com/ietf-wg-ohai/oblivious-http/pull/275",
      "state": "MERGED",
      "author": "martinthomson",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Provides a range of values for the length field and uses repetition for the values of algorithms.\r\n\r\nCloses #270.",
      "createdAt": "2023-02-23T00:36:38Z",
      "updatedAt": "2023-02-27T01:19:59Z",
      "baseRepository": "ietf-wg-ohai/oblivious-http",
      "baseRefName": "main",
      "baseRefOid": "8470972241f9fae76699b5e06a1e8bcf4c0c8236",
      "headRepository": "ietf-wg-ohai/oblivious-http",
      "headRefName": "bytes-length",
      "headRefOid": "b9aed6afdd3da1c874aac77e4a7cc7a5d0d78343",
      "closedAt": "2023-02-27T01:19:58Z",
      "mergedAt": "2023-02-27T01:19:58Z",
      "mergedBy": "martinthomson",
      "mergeCommit": {
        "oid": "06e3d811192637140f075fec226df7bd3a74d2e1"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOE6fLGM5OHEvz",
          "commit": {
            "abbreviatedOid": "b9aed6a"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2023-02-23T00:37:11Z",
          "updatedAt": "2023-02-23T00:37:11Z",
          "comments": []
        }
      ]
    },
    {
      "number": 276,
      "id": "PR_kwDOE6fLGM5KkDJx",
      "title": "Use \"extract\" less often",
      "url": "https://github.com/ietf-wg-ohai/oblivious-http/pull/276",
      "state": "MERGED",
      "author": "martinthomson",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Especially where it is unnecessary and misleading.",
      "createdAt": "2023-02-23T00:39:54Z",
      "updatedAt": "2023-02-23T01:12:15Z",
      "baseRepository": "ietf-wg-ohai/oblivious-http",
      "baseRefName": "main",
      "baseRefOid": "8470972241f9fae76699b5e06a1e8bcf4c0c8236",
      "headRepository": "ietf-wg-ohai/oblivious-http",
      "headRefName": "export-secret",
      "headRefOid": "2aea20151e7b69e39a6a7757d06d6f4fafb5aca4",
      "closedAt": "2023-02-23T01:12:14Z",
      "mergedAt": "2023-02-23T01:12:14Z",
      "mergedBy": "martinthomson",
      "mergeCommit": {
        "oid": "dfba463f9fbdf461d586fbe36e5f1d79eeaaa57c"
      },
      "comments": [
        {
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "body": "Better :)",
          "createdAt": "2023-02-23T00:41:19Z",
          "updatedAt": "2023-02-23T00:41:19Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOE6fLGM5OHFTO",
          "commit": {
            "abbreviatedOid": "2aea201"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2023-02-23T00:41:11Z",
          "updatedAt": "2023-02-23T00:41:11Z",
          "comments": []
        }
      ]
    },
    {
      "number": 280,
      "id": "PR_kwDOE6fLGM5KyP5C",
      "title": "Separate target and gateway",
      "url": "https://github.com/ietf-wg-ohai/oblivious-http/pull/280",
      "state": "MERGED",
      "author": "martinthomson",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "This talks about the odd case where target and gateway are separate. The primary insight here is that the target is just a regular HTTP resource and the requests from the gateway aren't special.  Problems only occur if the gateway is privileged in some way.\r\n\r\nIf abuse comes via the gateway, then the target would ordinary block the client, which tends to affect a bunch of bystanders in this model.  So there is pressure to do something special for the gateway.  In that case, the target is trusting the gateway in some way.  Explain that.\r\n\r\nThe heading here is the only case where we use the short names of the entities, but I can't stand short headings.",
      "createdAt": "2023-02-27T01:45:24Z",
      "updatedAt": "2023-03-09T11:05:45Z",
      "baseRepository": "ietf-wg-ohai/oblivious-http",
      "baseRefName": "main",
      "baseRefOid": "8ebc93d652ffd93bef425f801551a95c21a3a2c9",
      "headRepository": "ietf-wg-ohai/oblivious-http",
      "headRefName": "target-separate",
      "headRefOid": "7358cc972c9241f90b93ab28893be79a7dfa91a9",
      "closedAt": "2023-03-09T11:05:44Z",
      "mergedAt": "2023-03-09T11:05:44Z",
      "mergedBy": "chris-wood",
      "mergeCommit": {
        "oid": "1047dc22c1c099e94d0704192b38f892c31398b5"
      },
      "comments": [
        {
          "author": "evyncke",
          "authorAssociation": "NONE",
          "body": "The changes are a big step forward in the right direction, but the flow seems a little weird as the text in the first part of the security section is about co-located gateway/target. **Strongly** suggest to move the added new text at the end of the whole section and add a forward reference in the text:\r\n\r\n`In this section, a deployment where there are three entities is considered:` (from the intro in the security section)\r\n",
          "createdAt": "2023-03-06T10:28:17Z",
          "updatedAt": "2023-03-06T10:28:17Z"
        },
        {
          "author": "evyncke",
          "authorAssociation": "NONE",
          "body": "And, just to be clear, the PR text addresses my concern. My comment about the flow is just editorial.",
          "createdAt": "2023-03-07T08:30:03Z",
          "updatedAt": "2023-03-07T08:30:23Z"
        },
        {
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "body": "I've taken the suggestion to move the text (with forward references) and made a few tweaks:\r\n\r\n1. Rebased.\r\n2. Moved and rewritten some text from the top of the security considerations that better fit the new section.\r\n3. Added a forward reference to this section.\r\n4. Moved and rewritten text added in #281 to the applicability section.  (Originally this was just to correct a misspelling, but I think this makes more sense in the new home.)\r\n\r\n@chris-wood, can you double-check my work.  With this, I think we're ready to revise the draft and ask the IESG to finalize their ballot.",
          "createdAt": "2023-03-09T06:31:23Z",
          "updatedAt": "2023-03-09T06:31:23Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOE6fLGM5OXjTq",
          "commit": {
            "abbreviatedOid": "f8e1124"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2023-02-27T02:02:50Z",
          "updatedAt": "2023-02-27T02:02:50Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOE6fLGM5OnkB2",
          "commit": {
            "abbreviatedOid": "032ce85"
          },
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-03-01T03:42:44Z",
          "updatedAt": "2023-03-01T03:42:44Z",
          "comments": [
            {
              "originalPosition": 10,
              "body": "```suggestion\r\nmeet the expectations of the Target Resource.  Otherwise, the Target Resource\r\ntreats requests from an Oblivious Gateway Resource no differently than any\r\nother HTTP client.\r\n```",
              "createdAt": "2023-03-01T03:42:44Z",
              "updatedAt": "2023-03-01T03:42:44Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOE6fLGM5PbNBy",
          "commit": {
            "abbreviatedOid": "d18656a"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2023-03-09T11:05:18Z",
          "updatedAt": "2023-03-09T11:05:23Z",
          "comments": [
            {
              "originalPosition": 80,
              "body": "```suggestion\r\nrequests toward specific Target Resources according to an allowlist; see {{server-responsibilities}}.\r\n```",
              "createdAt": "2023-03-09T11:05:18Z",
              "updatedAt": "2023-03-09T11:05:23Z"
            }
          ]
        }
      ]
    },
    {
      "number": 281,
      "id": "PR_kwDOE6fLGM5K97m5",
      "title": "OHTTP is a protocol between client, relay, gateway",
      "url": "https://github.com/ietf-wg-ohai/oblivious-http/pull/281",
      "state": "MERGED",
      "author": "chris-wood",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "This change tries to emphasize that OHTTP is a protocol between client, relay, and gateway, and that the target is sort of ancillary to the whole thing. It further clarifies that the relay should not act as an open proxy when it's operated by an entity that is separate from the target server.\r\n\r\n",
      "createdAt": "2023-02-28T20:26:05Z",
      "updatedAt": "2023-03-09T06:10:57Z",
      "baseRepository": "ietf-wg-ohai/oblivious-http",
      "baseRefName": "main",
      "baseRefOid": "06e3d811192637140f075fec226df7bd3a74d2e1",
      "headRepository": "ietf-wg-ohai/oblivious-http",
      "headRefName": "caw/refinement",
      "headRefOid": "1fd823796b53c40bf04c627c63bd3f474095bb3d",
      "closedAt": "2023-03-09T06:10:56Z",
      "mergedAt": "2023-03-09T06:10:56Z",
      "mergedBy": "martinthomson",
      "mergeCommit": {
        "oid": "8ebc93d652ffd93bef425f801551a95c21a3a2c9"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOE6fLGM5Om7Ys",
          "commit": {
            "abbreviatedOid": "7c54c19"
          },
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "Thanks Chris.  I think that this covers it.",
          "createdAt": "2023-02-28T23:32:46Z",
          "updatedAt": "2023-03-01T00:56:50Z",
          "comments": [
            {
              "originalPosition": 22,
              "body": "Let's do a real list.  People read lists.\r\n\r\n```suggestion\r\nservice. In particular, the protocol in this document describes: \r\n\r\n1. an algorithm for encapsulating binary HTTP messages {{BINARY}} using Hybrid\r\n   Public Key Encryption (HPKE; {{HPKE}}) to protect their contents,\r\n\r\n2. a method for forwarding these encapsulated messages between clients and an\r\n   Oblivious Gateway Resource through a trusted Oblivious Relay Resource using\r\n   HTTP, and\r\n\r\n3. requirements for how the Oblivious Gateway Resource handles encapsulated HTTP\r\n   messages and produces encapsulated responses for the client.\r\n\r\n```",
              "createdAt": "2023-02-28T23:32:46Z",
              "updatedAt": "2023-03-01T00:56:50Z"
            },
            {
              "originalPosition": 28,
              "body": "```suggestion\r\nResource, as well as between that relay and the Oblivious Gateway Resource, so this\r\n```",
              "createdAt": "2023-02-28T23:33:16Z",
              "updatedAt": "2023-03-01T00:56:50Z"
            },
            {
              "originalPosition": 107,
              "body": "If you use the plural form of \"Target Resource\", please add the following to the definitions section:\r\n\r\n```\r\n*[Target Resources]: #dfn-target\r\n```",
              "createdAt": "2023-02-28T23:35:28Z",
              "updatedAt": "2023-03-01T00:56:50Z"
            },
            {
              "originalPosition": 64,
              "body": "```suggestion\r\ninvolves making an HTTP request using the content of the Encapsulated Request. Once the\r\n```\r\n\r\nI know that spelling it all out is probably better, but I think \"content\" in the abstract sense is fine and I like using fewer words where possible.",
              "createdAt": "2023-02-28T23:37:01Z",
              "updatedAt": "2023-03-01T00:56:50Z"
            },
            {
              "originalPosition": 41,
              "body": "```suggestion\r\nThis information allows the Client to send HTTP requests to the Oblivious\r\nGateway Resource for forwarding to a Target Resource.  The Oblivious Gateway\r\nResource does not learn the client's IP address or any other identifying\r\ninformation that might be revealed from the client at the transport layer, nor\r\ndoes the Oblivious Gateway Resource learn which of the requests it receives are\r\nfrom the same Client.\r\n```\r\n\r\nSome rewording and a small addition to address the linkability feature, which is probably worth mentioning.  (Story: I discovered that I didn't want to say \"a HTTP request\" or \"an HTTP request\", so made it plural and then realized that we'd failed to mention the request correlation thing.)",
              "createdAt": "2023-02-28T23:41:12Z",
              "updatedAt": "2023-03-01T00:56:50Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOE6fLGM5Ond-c",
          "commit": {
            "abbreviatedOid": "3125e49"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-03-01T02:57:17Z",
          "updatedAt": "2023-03-01T02:57:18Z",
          "comments": [
            {
              "originalPosition": 115,
              "body": "```suggestion\r\nResource is not misused as a relay for HTTP messages to an arbitrary Target Resource.\r\n```",
              "createdAt": "2023-03-01T02:57:18Z",
              "updatedAt": "2023-03-01T02:57:18Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOE6fLGM5OneB1",
          "commit": {
            "abbreviatedOid": "7c54c19"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-03-01T02:57:39Z",
          "updatedAt": "2023-03-01T02:57:40Z",
          "comments": [
            {
              "originalPosition": 107,
              "body": "Changed to singular =)",
              "createdAt": "2023-03-01T02:57:39Z",
              "updatedAt": "2023-03-01T02:57:40Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOE6fLGM5OneLz",
          "commit": {
            "abbreviatedOid": "d78811c"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-03-01T02:58:42Z",
          "updatedAt": "2023-03-01T02:58:42Z",
          "comments": [
            {
              "originalPosition": 18,
              "body": "```suggestion\r\nservice. In particular, the protocol in this document describes:\r\n```",
              "createdAt": "2023-03-01T02:58:42Z",
              "updatedAt": "2023-03-01T02:58:42Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOE6fLGM5OnoHH",
          "commit": {
            "abbreviatedOid": "6e1987b"
          },
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2023-03-01T04:13:23Z",
          "updatedAt": "2023-03-01T04:13:23Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOE6fLGM5Otj-m",
          "commit": {
            "abbreviatedOid": "6e1987b"
          },
          "author": "paulwouters",
          "authorAssociation": "NONE",
          "state": "APPROVED",
          "body": "LGTM",
          "createdAt": "2023-03-01T20:21:41Z",
          "updatedAt": "2023-03-01T20:21:41Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOE6fLGM5PFOv3",
          "commit": {
            "abbreviatedOid": "6e1987b"
          },
          "author": "evyncke",
          "authorAssociation": "NONE",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-03-06T17:01:53Z",
          "updatedAt": "2023-03-07T11:23:33Z",
          "comments": [
            {
              "originalPosition": 55,
              "body": "Figure 1 still seems to make Target Ressource part of the OHTTP... Possibly not supported by AASVG, but having a dotted line for the communication to the Target ressource would not make obvious that the Gateway is a plain HTTP forwarder using plain HTTP(S).",
              "createdAt": "2023-03-06T17:01:53Z",
              "updatedAt": "2023-03-07T11:23:33Z"
            },
            {
              "originalPosition": 71,
              "body": "The separation in two steps improves the readability. But again, the text appears to have a unmodified target web server accepting plain HTTP.\r\nAs discussed last Monday, this is what OHTTP is and I am still concerned that it does not fit the letter of the OHAI charter",
              "createdAt": "2023-03-06T17:03:50Z",
              "updatedAt": "2023-03-07T11:23:33Z"
            },
            {
              "originalPosition": 113,
              "body": "This text addresses my concern about security. Even if, alas, this is wishful thinking by relying on good will of operators.",
              "createdAt": "2023-03-06T17:05:18Z",
              "updatedAt": "2023-03-07T11:23:33Z"
            },
            {
              "originalPosition": 55,
              "body": "The above comment is not really clear when re-reading it. Please accept my apologies.\r\n\r\nMy concern could be addressed in two ways (different graphics, different semantics but all good for me)\r\n\r\n1. make it clear that gateway/target server must be operated by the same entity (or even be co-located), e.g., by drawing another box around gateway/target\r\n2. make it clear that OHTTP is only client/relay/gateway, e.g., rendering the target & associated data flows clearly out of scope (perhaps using dotted lines)",
              "createdAt": "2023-03-07T08:34:28Z",
              "updatedAt": "2023-03-07T11:23:33Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOE6fLGM5PMJPK",
          "commit": {
            "abbreviatedOid": "6e1987b"
          },
          "author": "bifurcation",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-03-07T14:15:54Z",
          "updatedAt": "2023-03-07T14:15:54Z",
          "comments": [
            {
              "originalPosition": 29,
              "body": "```suggestion\r\n\r\nThe combination of encapsulation and relaying ensures that Oblivious Gateway Resource\r\n```",
              "createdAt": "2023-03-07T14:15:54Z",
              "updatedAt": "2023-03-07T14:15:54Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOE6fLGM5PMPzD",
          "commit": {
            "abbreviatedOid": "6e1987b"
          },
          "author": "bifurcation",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-03-07T14:24:45Z",
          "updatedAt": "2023-03-07T14:25:32Z",
          "comments": [
            {
              "originalPosition": 114,
              "body": "This requirement should be sharper, say:\r\n\r\n> MUST maintain a allow list of target resources that the Gateway will respond for, and check requests against this allow list",
              "createdAt": "2023-03-07T14:24:45Z",
              "updatedAt": "2023-03-07T14:25:32Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOE6fLGM5PMfLs",
          "commit": {
            "abbreviatedOid": "6e1987b"
          },
          "author": "bifurcation",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-03-07T14:45:44Z",
          "updatedAt": "2023-03-07T14:45:48Z",
          "comments": [
            {
              "originalPosition": 55,
              "body": "The point I was expecting to see in this PR is roughly your (1).  In particular, OHTTP only provides authentication and confidentiality protection for requests and responses between the Client and the Gateway.  A client would be crazy to use a Gateway for arbitrary Targets, because it would have no security to the target.  Some proposed text, not sure how exactly it fits in here\r\n\r\n> OHTTP provides authentication and confidentiality protection between the Client and the Oblivious Gateway, but importantly *not* between the Client and the Target Resource.  While the Target Resource is a distinct HTTP resource from the Gateway Resource, they are both logically under the control of the Oblivious Gateway, since the Oblivious Gateway can unilaterally dictate the responses returned from the Target Resource to the Client.  Clients MUST maintain an explicit allowlist of target resources that the client trusts an Oblivious Gateway to respond for, and check requests against this allowlist before sending them. \r\n\r\nAnd in the figure, I would probably draw a curly bracket above the Gateway Resource and Target Resource to illustrate this property.\r\n\r\n~~~\r\n                                          Oblivious Gateway\r\n                                                  |\r\n                                     .-----------' '------------.\r\n                                    |                            |\r\n\r\n+---------+       +----------+      +----------+      +----------+\r\n| Client  |       | Relay    |      | Gateway  |      | Target   |\r\n|         |       | Resource |      | Resource |      | Resource |\r\n+----+----+       +----+-----+      +-------+--+      +----+-----+\r\n     |                 |                    |              |\r\n     |                 |                    |              |\r\n     |                 |                    |              |\r\n~~~\r\n",
              "createdAt": "2023-03-07T14:45:44Z",
              "updatedAt": "2023-03-07T14:45:49Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOE6fLGM5PMgcI",
          "commit": {
            "abbreviatedOid": "6e1987b"
          },
          "author": "bifurcation",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-03-07T14:47:25Z",
          "updatedAt": "2023-03-07T14:47:25Z",
          "comments": [
            {
              "originalPosition": 71,
              "body": "@evyncke would my proposal in https://github.com/ietf-wg-ohai/oblivious-http/pull/281#discussion_r1127979426 help clarify this?",
              "createdAt": "2023-03-07T14:47:25Z",
              "updatedAt": "2023-03-07T14:47:26Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOE6fLGM5PMuFu",
          "commit": {
            "abbreviatedOid": "6e1987b"
          },
          "author": "evyncke",
          "authorAssociation": "NONE",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-03-07T15:05:50Z",
          "updatedAt": "2023-03-07T15:05:50Z",
          "comments": [
            {
              "originalPosition": 55,
              "body": "The text and the graphic are good for me.",
              "createdAt": "2023-03-07T15:05:50Z",
              "updatedAt": "2023-03-07T15:05:50Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOE6fLGM5PMuX_",
          "commit": {
            "abbreviatedOid": "6e1987b"
          },
          "author": "evyncke",
          "authorAssociation": "NONE",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-03-07T15:06:15Z",
          "updatedAt": "2023-03-07T15:06:16Z",
          "comments": [
            {
              "originalPosition": 71,
              "body": "yes",
              "createdAt": "2023-03-07T15:06:15Z",
              "updatedAt": "2023-03-07T15:06:16Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOE6fLGM5PNeOo",
          "commit": {
            "abbreviatedOid": "6e1987b"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-03-07T16:07:58Z",
          "updatedAt": "2023-03-07T16:07:58Z",
          "comments": [
            {
              "originalPosition": 55,
              "body": "@bifurcation I applied a variant of this suggestion. @evyncke, @bifurcation, @martinthomson: can you please take a look?",
              "createdAt": "2023-03-07T16:07:58Z",
              "updatedAt": "2023-03-07T16:07:58Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOE6fLGM5PNg7J",
          "commit": {
            "abbreviatedOid": "6e1987b"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-03-07T16:11:54Z",
          "updatedAt": "2023-03-07T16:11:55Z",
          "comments": [
            {
              "originalPosition": 114,
              "body": "I think SHOULD is fine for this case since there are alternative ways to solve this problem, and we have a MUST check on the client-side now. Resolving as such. ",
              "createdAt": "2023-03-07T16:11:54Z",
              "updatedAt": "2023-03-07T16:11:55Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOE6fLGM5PNhAo",
          "commit": {
            "abbreviatedOid": "6e1987b"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-03-07T16:12:02Z",
          "updatedAt": "2023-03-07T16:12:03Z",
          "comments": [
            {
              "originalPosition": 113,
              "body": "Great!",
              "createdAt": "2023-03-07T16:12:02Z",
              "updatedAt": "2023-03-07T16:12:03Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOE6fLGM5PNhaO",
          "commit": {
            "abbreviatedOid": "7319113"
          },
          "author": "bifurcation",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "Thanks @chris-wood -- couple nits, otherwise lgtm.",
          "createdAt": "2023-03-07T16:12:34Z",
          "updatedAt": "2023-03-07T16:15:07Z",
          "comments": [
            {
              "originalPosition": 59,
              "body": "```suggestion\r\n                                  .--------------------------------.\r\n```",
              "createdAt": "2023-03-07T16:12:34Z",
              "updatedAt": "2023-03-07T16:15:07Z"
            },
            {
              "originalPosition": 173,
              "body": "Minor readability point: I would introduce this a little bit, say \"Because OHTTP does not allow the client to authenticate the Target Resource (only the Gateway Resource), ...\"",
              "createdAt": "2023-03-07T16:14:44Z",
              "updatedAt": "2023-03-07T16:15:07Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOE6fLGM5PNkzO",
          "commit": {
            "abbreviatedOid": "7319113"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-03-07T16:17:27Z",
          "updatedAt": "2023-03-07T16:17:27Z",
          "comments": [
            {
              "originalPosition": 173,
              "body": "Applied -- thanks!",
              "createdAt": "2023-03-07T16:17:27Z",
              "updatedAt": "2023-03-07T16:17:27Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOE6fLGM5PPQ_Q",
          "commit": {
            "abbreviatedOid": "1fd8237"
          },
          "author": "evyncke",
          "authorAssociation": "NONE",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-03-07T19:51:49Z",
          "updatedAt": "2023-03-07T19:52:01Z",
          "comments": [
            {
              "originalPosition": 55,
              "body": "@chris-wood  the enhanced figure is good indeed for me *except* that there is no text associated outside the figure to explain what the external box is.\r\nAny chance to have a variation of @bifurcation 's text proposal ?",
              "createdAt": "2023-03-07T19:51:50Z",
              "updatedAt": "2023-03-07T19:52:01Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOE6fLGM5PPRwm",
          "commit": {
            "abbreviatedOid": "6e1987b"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-03-07T19:54:06Z",
          "updatedAt": "2023-03-07T19:54:06Z",
          "comments": [
            {
              "originalPosition": 55,
              "body": "@evyncke They're in the same box, and the accompanying text says they are the same entity. I don't think additional labels (using terms we would have to define) is a helpful clarification, so I suggest we leave this as-is and treat the matter as an editorial issue up to the editors to resolve. Can we please do that? If not, why not?",
              "createdAt": "2023-03-07T19:54:06Z",
              "updatedAt": "2023-03-07T19:54:32Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOE6fLGM5PQc2s",
          "commit": {
            "abbreviatedOid": "1fd8237"
          },
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "This works for me.  We can merge this and then I want to take another pass at the other PR.",
          "createdAt": "2023-03-07T23:23:47Z",
          "updatedAt": "2023-03-07T23:23:47Z",
          "comments": []
        }
      ]
    },
    {
      "number": 282,
      "id": "PR_kwDOE6fLGM5L2FTL",
      "title": "Allowlist tweaks",
      "url": "https://github.com/ietf-wg-ohai/oblivious-http/pull/282",
      "state": "MERGED",
      "author": "martinthomson",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2023-03-12T23:27:43Z",
      "updatedAt": "2023-03-13T00:40:09Z",
      "baseRepository": "ietf-wg-ohai/oblivious-http",
      "baseRefName": "main",
      "baseRefOid": "1047dc22c1c099e94d0704192b38f892c31398b5",
      "headRepository": "ietf-wg-ohai/oblivious-http",
      "headRefName": "allowlist-tweaks",
      "headRefOid": "2c814fa43c936ce1bcff6690f931abf3690cfc0d",
      "closedAt": "2023-03-13T00:39:56Z",
      "mergedAt": "2023-03-13T00:39:56Z",
      "mergedBy": "martinthomson",
      "mergeCommit": {
        "oid": "388859c6e8fe56f0327768779fdad50831a39fd7"
      },
      "comments": [
        {
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "body": "We'll hold this for the (inevitable) next update of the draft.",
          "createdAt": "2023-03-13T00:40:09Z",
          "updatedAt": "2023-03-13T00:40:09Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOE6fLGM5Po1kk",
          "commit": {
            "abbreviatedOid": "2c814fa"
          },
          "author": "tfpauly",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2023-03-12T23:38:27Z",
          "updatedAt": "2023-03-12T23:38:27Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOE6fLGM5Po17X",
          "commit": {
            "abbreviatedOid": "2c814fa"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2023-03-12T23:48:24Z",
          "updatedAt": "2023-03-12T23:48:24Z",
          "comments": []
        }
      ]
    },
    {
      "number": 283,
      "id": "PR_kwDOE6fLGM5MDYE3",
      "title": "Tweak diagram alignment",
      "url": "https://github.com/ietf-wg-ohai/oblivious-http/pull/283",
      "state": "MERGED",
      "author": "martinthomson",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "The gateway was a little too far off centre for my comfort here.  This puts it a little closer to the Target, which is nicer, I think.",
      "createdAt": "2023-03-15T00:30:57Z",
      "updatedAt": "2023-03-15T19:10:52Z",
      "baseRepository": "ietf-wg-ohai/oblivious-http",
      "baseRefName": "main",
      "baseRefOid": "388859c6e8fe56f0327768779fdad50831a39fd7",
      "headRepository": "ietf-wg-ohai/oblivious-http",
      "headRefName": "nudge-gateway",
      "headRefOid": "b51a9d2c676f9b15c700cffa839722c6fd26eabc",
      "closedAt": "2023-03-15T19:10:51Z",
      "mergedAt": "2023-03-15T19:10:50Z",
      "mergedBy": "chris-wood",
      "mergeCommit": {
        "oid": "1f89b60be4b199adaba52ad09ea88651ede2e1e2"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDOE6fLGM5QAGA5",
          "commit": {
            "abbreviatedOid": "b51a9d2"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2023-03-15T19:10:46Z",
          "updatedAt": "2023-03-15T19:10:46Z",
          "comments": []
        }
      ]
    },
    {
      "number": 284,
      "id": "PR_kwDOE6fLGM5O9zYp",
      "title": "Length prefix key encoding when there are multiple",
      "url": "https://github.com/ietf-wg-ohai/oblivious-http/pull/284",
      "state": "OPEN",
      "author": "martinthomson",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "This changes the definition of \"application/ohttp-keys\" in a way that is not backwards compatible, but it ensures that the format is usable once new KEMs are introduced.",
      "createdAt": "2023-04-24T06:40:25Z",
      "updatedAt": "2023-05-02T00:10:57Z",
      "baseRepository": "ietf-wg-ohai/oblivious-http",
      "baseRefName": "main",
      "baseRefOid": "1f89b60be4b199adaba52ad09ea88651ede2e1e2",
      "headRepository": "ietf-wg-ohai/oblivious-http",
      "headRefName": "key-config-len",
      "headRefOid": "2ea3f006365b304899178ba95ba3e2287d800ef0",
      "closedAt": null,
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [
        {
          "author": "ericorth",
          "authorAssociation": "NONE",
          "body": "I just left a should-we-really-do-this comment in the issue.  But if we decide \"yes, we should\", this text all looks reasonable to me.",
          "createdAt": "2023-04-26T21:00:50Z",
          "updatedAt": "2023-04-26T21:00:50Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOE6fLGM5TcQ1F",
          "commit": {
            "abbreviatedOid": "781753c"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-04-25T13:24:35Z",
          "updatedAt": "2023-04-25T13:27:45Z",
          "comments": [
            {
              "originalPosition": 9,
              "body": "```suggestion\r\nencodings are concatenated to form a list.  See {{iana-keys}} for a definition of the media\r\n```",
              "createdAt": "2023-04-25T13:25:30Z",
              "updatedAt": "2023-04-25T13:27:45Z"
            },
            {
              "originalPosition": 9,
              "body": "Do we want to say anything about what receivers should do if, say, one of the configs in the list is malformed but others are not?",
              "createdAt": "2023-04-25T13:27:40Z",
              "updatedAt": "2023-04-25T13:27:45Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOE6fLGM5TeYsN",
          "commit": {
            "abbreviatedOid": "781753c"
          },
          "author": "ericorth",
          "authorAssociation": "NONE",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-04-25T18:20:50Z",
          "updatedAt": "2023-04-25T18:20:51Z",
          "comments": [
            {
              "originalPosition": 9,
              "body": "Since the entire point of this change seems to be to allow ignoring unrecognized configs, it seems there should at least be some language about doing that, if not ignoring recognized but malformed configs.",
              "createdAt": "2023-04-25T18:20:50Z",
              "updatedAt": "2023-04-25T18:20:51Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOE6fLGM5TgArm",
          "commit": {
            "abbreviatedOid": "781753c"
          },
          "author": "martinthomson",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-04-25T23:38:09Z",
          "updatedAt": "2023-04-25T23:38:09Z",
          "comments": [
            {
              "originalPosition": 9,
              "body": "My implementation treats the entire thing as invalid if there are any decode errors (aside from those that follow the public key for an unknown KEM, that is, because those errors are essentially impossible to locate).\r\n\r\n... But I don't think that we need to say that directly.  I'd like to start assuming that people will do that, if possible.",
              "createdAt": "2023-04-25T23:38:09Z",
              "updatedAt": "2023-04-25T23:39:44Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOE6fLGM5TgBww",
          "commit": {
            "abbreviatedOid": "87dbb7c"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-04-25T23:45:40Z",
          "updatedAt": "2023-04-25T23:45:40Z",
          "comments": [
            {
              "originalPosition": 9,
              "body": "I think text that encourages consistent implementation behavior for clients would be helpful. I think your implementation choice is reasonable.",
              "createdAt": "2023-04-25T23:45:40Z",
              "updatedAt": "2023-04-25T23:45:40Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOE6fLGM5TnU8L",
          "commit": {
            "abbreviatedOid": "781753c"
          },
          "author": "ericorth",
          "authorAssociation": "NONE",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-04-26T21:02:12Z",
          "updatedAt": "2023-04-26T21:02:13Z",
          "comments": [
            {
              "originalPosition": 9,
              "body": "Similarly, my implementation in Google QUICHE currently rejects all of them unless they're all parsed as vaild, so I agree that that's a good way to go.",
              "createdAt": "2023-04-26T21:02:12Z",
              "updatedAt": "2023-04-26T21:02:13Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOE6fLGM5T5yO6",
          "commit": {
            "abbreviatedOid": "e36441c"
          },
          "author": "chris-wood",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2023-05-01T14:26:15Z",
          "updatedAt": "2023-05-01T14:26:20Z",
          "comments": [
            {
              "originalPosition": 18,
              "body": "```suggestion\r\nMUST discard incorrectly encoded key configuration collections.\r\n```\r\n\r\n... since it wasn't entirely clear if object meant a single key configuration or the entire collection.",
              "createdAt": "2023-05-01T14:26:16Z",
              "updatedAt": "2023-05-01T14:28:21Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOE6fLGM5T77vb",
          "commit": {
            "abbreviatedOid": "e36441c"
          },
          "author": "tfpauly",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "Looks good!",
          "createdAt": "2023-05-01T23:27:12Z",
          "updatedAt": "2023-05-01T23:27:12Z",
          "comments": []
        }
      ]
    }
  ]
}